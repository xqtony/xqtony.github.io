<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>托尼的技术博客</title>
  
  
  <link href="https://xqtony.github.io/atom.xml" rel="self"/>
  
  <link href="https://xqtony.github.io/"/>
  <updated>2024-12-14T09:38:33.255Z</updated>
  <id>https://xqtony.github.io/</id>
  
  <author>
    <name>Tony Kong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对称二叉树</title>
    <link href="https://xqtony.github.io/2024/12/14/101%20%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://xqtony.github.io/2024/12/14/101%20%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2024-12-14T09:36:45.134Z</published>
    <updated>2024-12-14T09:38:33.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="探索对称二叉树的多种判断方式"><a href="#探索对称二叉树的多种判断方式" class="headerlink" title="探索对称二叉树的多种判断方式"></a>探索对称二叉树的多种判断方式</h1><p>在二叉树的相关算法问题中，判断一棵二叉树是否为对称二叉树是一个经典的题目。本文将详细分析判断对称二叉树的多种方式，并对相应的代码实现进行深入解读。</p><span id="more"></span><h2 id="一、对称二叉树的定义"><a href="#一、对称二叉树的定义" class="headerlink" title="一、对称二叉树的定义"></a>一、对称二叉树的定义</h2><p>对称二叉树是指一棵二叉树的左子树和右子树关于根节点对称。即左子树的左子节点与右子树的右子节点对称，左子树的右子节点与右子树的左子节点对称，并且对应节点的值相等。</p><h2 id="二、递归法判断对称二叉树"><a href="#二、递归法判断对称二叉树" class="headerlink" title="二、递归法判断对称二叉树"></a>二、递归法判断对称二叉树</h2><h3 id="（一）思路分析"><a href="#（一）思路分析" class="headerlink" title="（一）思路分析"></a>（一）思路分析</h3><p>递归法是一种直观且简洁的解决方式。我们可以定义一个递归函数，这个函数接收两棵子树作为参数，分别比较它们对应节点的值以及子树的结构。递归的终止条件有两个：一是当两棵子树都为空时，说明已经遍历到叶子节点的下一层，返回 <code>true</code>；二是当其中一棵子树为空，另一棵不为空，或者对应节点的值不相等时，返回 <code>false</code>。在递归过程中，我们需要分别比较左子树的左子节点与右子树的右子节点，以及左子树的右子节点与右子树的左子节点。</p><h3 id="（二）代码实现"><a href="#（二）代码实现" class="headerlink" title="（二）代码实现"></a>（二）代码实现</h3><p>以下是使用递归法判断对称二叉树的代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> checkSymmetry(root.Left, root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkSymmetry</span><span class="params">(left *TreeNode, right *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="comment">// 递归终止条件</span></span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> &amp;&amp; right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> left == <span class="literal">nil</span> || right == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> left.Val!= right.Val &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归比较左子树的左子节点与右子树的右子节点，以及左子树的右子节点与右子树的左子节点</span></span><br><span class="line">    <span class="keyword">return</span> checkSymmetry(left.Left, right.Right) &amp;&amp; checkSymmetry(left.Right, right.Left)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、迭代法（使用队列）判断对称二叉树"><a href="#三、迭代法（使用队列）判断对称二叉树" class="headerlink" title="三、迭代法（使用队列）判断对称二叉树"></a>三、迭代法（使用队列）判断对称二叉树</h2><h3 id="（一）思路分析-1"><a href="#（一）思路分析-1" class="headerlink" title="（一）思路分析"></a>（一）思路分析</h3><p>迭代法通常借助数据结构来辅助实现。这里我们使用队列来存储需要比较的节点对。首先将根节点的左子树和右子树入队。然后在循环中，每次取出队首的两个节点进行比较，如果它们都为空，则继续循环；如果其中一个为空，另一个不为空，或者节点值不相等，则返回 <code>false</code>。接着将左子树的左子节点与右子树的右子节点，以及左子树的右子节点与右子树的左子节点依次入队，直到队列为空，说明整棵树是对称的，返回 <code>true</code>。</p><h3 id="（二）代码实现-1"><a href="#（二）代码实现-1" class="headerlink" title="（二）代码实现"></a>（二）代码实现</h3><p>以下是使用迭代法（队列）判断对称二叉树的代码示例，也就是题目中给出的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * type TreeNode struct &#123;</span></span><br><span class="line"><span class="comment"> *     Val int</span></span><br><span class="line"><span class="comment"> *     Left *TreeNode</span></span><br><span class="line"><span class="comment"> *     Right *TreeNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isSymmetric</span><span class="params">(root *TreeNode)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    queue := []*TreeNode&#123;&#125;</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, root.Left)</span><br><span class="line">    queue = <span class="built_in">append</span>(queue, root.Right)</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        u, v := queue[<span class="number">0</span>], queue[<span class="number">1</span>]</span><br><span class="line">        queue = queue[<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="literal">nil</span> &amp;&amp; v == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u == <span class="literal">nil</span> || v == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (u.Val!= v.Val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue = <span class="built_in">append</span>(queue, u.Left)</span><br><span class="line">        queue = <span class="built_in">append</span>(queue, v.Right)</span><br><span class="line"></span><br><span class="line">        queue = <span class="built_in">append</span>(queue, u.Right)</span><br><span class="line">        queue = <span class="built_in">append</span>(queue, v.Left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、两种方法的比较"><a href="#四、两种方法的比较" class="headerlink" title="四、两种方法的比较"></a>四、两种方法的比较</h2><h3 id="（一）时间复杂度"><a href="#（一）时间复杂度" class="headerlink" title="（一）时间复杂度"></a>（一）时间复杂度</h3><ul><li>递归法：在最坏的情况下，需要遍历二叉树的所有节点，时间复杂度为 $O(n)$，其中 $n$ 是二叉树的节点数。</li><li>迭代法（队列）：同样需要遍历所有节点，每次入队和出队操作的时间复杂度都是常数级别的，所以总的时间复杂度也是 $O(n)$。</li></ul><h3 id="（二）空间复杂度"><a href="#（二）空间复杂度" class="headerlink" title="（二）空间复杂度"></a>（二）空间复杂度</h3><ul><li>递归法：由于递归调用需要使用栈空间，在最坏情况下，二叉树是一条链，递归深度为 $n$，所以空间复杂度为 $O(n)$。在最好情况下，二叉树是完全对称的，递归深度为树的高度 $log n$，空间复杂度为 $O(log n)$。</li><li>迭代法（队列）：在最坏情况下，队列中最多会存储二叉树的一层节点，对于一棵满二叉树，其节点数最多为 $n&#x2F;2$，所以空间复杂度为 $O(n)$。在最好情况下，二叉树是完全对称的，队列中最多存储树的高度个节点，空间复杂度为 $O(log n)$。</li></ul><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>判断对称二叉树可以使用递归法和迭代法（队列）。递归法代码简洁，易于理解，但可能会受到栈空间的限制。迭代法使用队列来模拟递归过程，虽然代码相对复杂一些，但在空间利用上可能会有一定的优势，尤其是在某些特定的二叉树结构下。在实际应用中，可以根据二叉树的特点以及对空间和时间复杂度的要求来选择合适的判断方法。</p><p>希望通过本文的分析，能够帮助读者深入理解对称二叉树的判断方式及其背后的算法思想，在解决相关二叉树问题时能够更加得心应手。 </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;探索对称二叉树的多种判断方式&quot;&gt;&lt;a href=&quot;#探索对称二叉树的多种判断方式&quot; class=&quot;headerlink&quot; title=&quot;探索对称二叉树的多种判断方式&quot;&gt;&lt;/a&gt;探索对称二叉树的多种判断方式&lt;/h1&gt;&lt;p&gt;在二叉树的相关算法问题中，判断一棵二叉树是否为对称二叉树是一个经典的题目。本文将详细分析判断对称二叉树的多种方式，并对相应的代码实现进行深入解读。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://xqtony.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AI辅助创作" scheme="https://xqtony.github.io/tags/AI%E8%BE%85%E5%8A%A9%E5%88%9B%E4%BD%9C/"/>
    
    <category term="算法" scheme="https://xqtony.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二叉树" scheme="https://xqtony.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="递归" scheme="https://xqtony.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="迭代" scheme="https://xqtony.github.io/tags/%E8%BF%AD%E4%BB%A3/"/>
    
  </entry>
  
  <entry>
    <title>翻转二叉树</title>
    <link href="https://xqtony.github.io/2024/12/13/226%20%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://xqtony.github.io/2024/12/13/226%20%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2024-12-13T11:53:47.205Z</published>
    <updated>2024-12-13T11:56:08.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="翻转二叉树的实现方法全解析"><a href="#翻转二叉树的实现方法全解析" class="headerlink" title="翻转二叉树的实现方法全解析"></a>翻转二叉树的实现方法全解析</h1><p>在二叉树的操作中，翻转二叉树是一个经典的问题。本文将详细介绍翻转二叉树的实现方法，包括递归方法以及其他可能的方法。</p><span id="more"></span><h2 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h2><p>给定一个二叉树，将其每个节点的左右子树进行交换，从而翻转整个二叉树。例如，原始二叉树为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br></pre></td></tr></table></figure><p>翻转后的二叉树应该是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure><h2 id="二、递归实现方法"><a href="#二、递归实现方法" class="headerlink" title="二、递归实现方法"></a>二、递归实现方法</h2><p>以下是使用递归方式实现翻转二叉树的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(root *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="comment">// 如果根节点为空，直接返回空</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归翻转左子树</span></span><br><span class="line">    invertTree(root.Left)</span><br><span class="line">    <span class="comment">// 递归翻转右子树</span></span><br><span class="line">    invertTree(root.Right)</span><br><span class="line">    <span class="comment">// 交换左右子树</span></span><br><span class="line">    l := root.Left</span><br><span class="line">    root.Left = root.Right</span><br><span class="line">    root.Right = l </span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，首先对根节点进行判断，如果为空则直接返回。然后递归地对左子树和右子树进行翻转操作，这是递归的核心部分。最后交换根节点的左右子树，完成整棵树的翻转。递归的思想在于将大问题逐步分解为相同结构的小问题，这里就是将整棵树的翻转分解为每个子树的翻转，直到子树为空。</p><h2 id="三、非递归实现方法（使用栈）"><a href="#三、非递归实现方法（使用栈）" class="headerlink" title="三、非递归实现方法（使用栈）"></a>三、非递归实现方法（使用栈）</h2><p>除了递归方法，还可以使用栈来实现二叉树的翻转。思路是先将根节点入栈，然后循环取出栈顶节点，交换其左右子树，并将其非空的左右子树依次入栈，直到栈为空。</p><p>以下是使用栈实现的代码示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(root *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    stack := []*TreeNode&#123;root&#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        node := stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> node.Left!= <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, node.Left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> node.Right!= <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, node.Right)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换左右子树</span></span><br><span class="line">        node.Left, node.Right = node.Right, node.Left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种非递归的方法利用了栈的后进先出特性，模拟了递归的过程，避免了递归可能带来的栈溢出风险，尤其适用于二叉树深度较大的情况。</p><h2 id="四、非递归实现方法（使用队列）"><a href="#四、非递归实现方法（使用队列）" class="headerlink" title="四、非递归实现方法（使用队列）"></a>四、非递归实现方法（使用队列）</h2><p>类似地，也可以使用队列来实现。将根节点入队，然后循环取出队首节点，交换其左右子树，并将其非空的左右子树依次入队，直到队列为空。</p><p>代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invertTree</span><span class="params">(root *TreeNode)</span></span> *TreeNode &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        node := queue[<span class="number">0</span>]</span><br><span class="line">        queue = queue[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> node.Left!= <span class="literal">nil</span> &#123;</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, node.Left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> node.Right!= <span class="literal">nil</span> &#123;</span><br><span class="line">            queue = <span class="built_in">append</span>(queue, node.Right)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换左右子树</span></span><br><span class="line">        node.Left, node.Right = node.Right, node.Left</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用队列的方法与使用栈的方法在思路上较为相似，只是数据结构的操作特性不同，队列是先进先出，而栈是后进先出。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>翻转二叉树是二叉树操作中的一个基础且重要的问题。递归方法简洁直观，能够很好地体现递归的思想，但可能在树深度较大时存在栈溢出风险。而非递归的栈和队列方法则可以在一定程度上避免这种风险，并且在处理大规模数据时可能具有更好的性能表现。在实际应用中，可以根据二叉树的规模和具体场景选择合适的实现方法。希望通过本文的介绍，读者能够深入理解翻转二叉树的多种实现方式，并能够在实际编程中灵活运用。 </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;翻转二叉树的实现方法全解析&quot;&gt;&lt;a href=&quot;#翻转二叉树的实现方法全解析&quot; class=&quot;headerlink&quot; title=&quot;翻转二叉树的实现方法全解析&quot;&gt;&lt;/a&gt;翻转二叉树的实现方法全解析&lt;/h1&gt;&lt;p&gt;在二叉树的操作中，翻转二叉树是一个经典的问题。本文将详细介绍翻转二叉树的实现方法，包括递归方法以及其他可能的方法。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://xqtony.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AI辅助创作" scheme="https://xqtony.github.io/tags/AI%E8%BE%85%E5%8A%A9%E5%88%9B%E4%BD%9C/"/>
    
    <category term="算法" scheme="https://xqtony.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二叉树" scheme="https://xqtony.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="递归" scheme="https://xqtony.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的最大深度</title>
    <link href="https://xqtony.github.io/2024/12/10/104%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <id>https://xqtony.github.io/2024/12/10/104%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</id>
    <published>2024-12-10T12:00:23.502Z</published>
    <updated>2024-12-10T12:12:39.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="探索二叉树最大深度的计算：深入解析代码实现"><a href="#探索二叉树最大深度的计算：深入解析代码实现" class="headerlink" title="探索二叉树最大深度的计算：深入解析代码实现"></a>探索二叉树最大深度的计算：深入解析代码实现</h1><p>在计算机科学与数据结构的领域中，二叉树是一种极为重要且基础的结构。二叉树的最大深度是其一个关键属性，它在许多算法和应用场景中都有着广泛的应用。本文将深入探讨如何通过代码来计算二叉树的最大深度，并对相关代码进行详细的剖析，同时还会介绍其他的解法。</p><h2 id="一、二叉树最大深度的概念"><a href="#一、二叉树最大深度的概念" class="headerlink" title="一、二叉树最大深度的概念"></a>一、二叉树最大深度的概念</h2><p>二叉树是由节点组成的层次化数据结构，每个节点最多有两个子节点，分别称为左子节点和右子节点。二叉树的最大深度定义为从根节点到最远叶子节点的路径上的节点数量。例如，一个只有根节点的二叉树，其最大深度为 1；而一个根节点有左右子节点，且左右子节点均为叶子节点的二叉树，其最大深度为 2。</p><span id="more"></span><h2 id="二、递归解法及解析"><a href="#二、递归解法及解析" class="headerlink" title="二、递归解法及解析"></a>二、递归解法及解析</h2><p>以下是一种常见的使用递归计算二叉树最大深度的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span></span> (res <span class="type">int</span>) &#123;</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125; </span><br><span class="line">    res = max(<span class="number">1</span>+maxDepth(root.Left), <span class="number">1</span>+maxDepth(root.Right))</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>maxDepth</code> 函数中，首先将结果变量 <code>res</code> 初始化为 0。这一步骤是为了后续存储计算得到的最大深度做准备。</p><p>接着，对传入的根节点 <code>root</code> 进行判断。如果 <code>root</code> 为 <code>nil</code>，意味着当前二叉树为空，按照定义，空二叉树的最大深度为 0，所以直接返回 0。</p><p>当根节点不为 <code>nil</code> 时，进入核心计算逻辑。根据二叉树最大深度的特性，一棵二叉树的最大深度等于其左子树最大深度与右子树最大深度中的较大值再加上 1（这里的 1 代表根节点所在的层级）。因此，通过递归调用 <code>maxDepth</code> 函数分别计算左子树和右子树的最大深度，即 <code>maxDepth(root.Left)</code> 和 <code>maxDepth(root.Right)</code>。然后将这两个深度分别加上 1 后，使用 <code>max</code> 函数来获取较大的值，并将其赋值给 <code>res</code>，最后返回 <code>res</code> 作为整棵二叉树的最大深度。</p><p><code>max</code> 函数则是一个简单的比较函数，用于比较传入的两个整数 <code>a</code> 和 <code>b</code>。如果 <code>a</code> 大于 <code>b</code>，则返回 <code>a</code>；否则返回 <code>b</code>。这个函数为 <code>maxDepth</code> 函数中获取左右子树深度较大值提供了便利。</p><h2 id="三、迭代解法（层序遍历）及解析"><a href="#三、迭代解法（层序遍历）及解析" class="headerlink" title="三、迭代解法（层序遍历）及解析"></a>三、迭代解法（层序遍历）及解析</h2><p>除了递归解法，我们还可以使用迭代的方式，通过层序遍历二叉树来计算其最大深度。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxDepth</span><span class="params">(root *TreeNode)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    queue := []*TreeNode&#123;root&#125;</span><br><span class="line">    depth := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">        size := <span class="built_in">len</span>(queue)</span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; size; i++ &#123;</span><br><span class="line">            node := queue[<span class="number">0</span>]</span><br><span class="line">            queue = queue[<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">if</span> node.Left!= <span class="literal">nil</span> &#123;</span><br><span class="line">                queue = <span class="built_in">append</span>(queue, node.Left)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> node.Right!= <span class="literal">nil</span> &#123;</span><br><span class="line">                queue = <span class="built_in">append</span>(queue, node.Right)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        depth++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个迭代解法中，首先判断根节点是否为空，如果为空则直接返回 0。然后创建一个队列，并将根节点入队。接着进入循环，每次循环处理一层节点。先获取当前队列的长度 <code>size</code>，这代表当前层的节点数量。然后遍历当前层的节点，对于每个节点，将其左子节点和右子节点（如果存在）入队。当一层节点处理完后，深度 <code>depth</code> 加 1。直到队列为空，此时的 <code>depth</code> 就是二叉树的最大深度。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>通过上述两种方法，我们可以计算二叉树的最大深度。递归解法简洁明了，利用了二叉树结构与递归的天然契合性，代码较为紧凑，但在递归深度较大时可能会有栈溢出的风险。而迭代的层序遍历解法则是从另一个角度出发，通过模拟层次遍历的过程逐步计算深度，虽然代码相对复杂一些，但在处理大规模二叉树时可能具有更好的性能表现。理解和掌握这两种计算二叉树最大深度的方法，对于深入学习二叉树相关的算法，如二叉树遍历、平衡二叉树判断等，都有着重要的基础作用。它不仅有助于我们更好地理解二叉树的性质，也在实际的编程应用中，为处理树形数据结构提供了有力的工具。在后续的学习和实践中，我们可以进一步探索二叉树在各种复杂场景下的应用，并基于此不断优化和拓展代码逻辑，以适应不同的需求。 </p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;探索二叉树最大深度的计算：深入解析代码实现&quot;&gt;&lt;a href=&quot;#探索二叉树最大深度的计算：深入解析代码实现&quot; class=&quot;headerlink&quot; title=&quot;探索二叉树最大深度的计算：深入解析代码实现&quot;&gt;&lt;/a&gt;探索二叉树最大深度的计算：深入解析代码实现&lt;/h1&gt;&lt;p&gt;在计算机科学与数据结构的领域中，二叉树是一种极为重要且基础的结构。二叉树的最大深度是其一个关键属性，它在许多算法和应用场景中都有着广泛的应用。本文将深入探讨如何通过代码来计算二叉树的最大深度，并对相关代码进行详细的剖析，同时还会介绍其他的解法。&lt;/p&gt;
&lt;h2 id=&quot;一、二叉树最大深度的概念&quot;&gt;&lt;a href=&quot;#一、二叉树最大深度的概念&quot; class=&quot;headerlink&quot; title=&quot;一、二叉树最大深度的概念&quot;&gt;&lt;/a&gt;一、二叉树最大深度的概念&lt;/h2&gt;&lt;p&gt;二叉树是由节点组成的层次化数据结构，每个节点最多有两个子节点，分别称为左子节点和右子节点。二叉树的最大深度定义为从根节点到最远叶子节点的路径上的节点数量。例如，一个只有根节点的二叉树，其最大深度为 1；而一个根节点有左右子节点，且左右子节点均为叶子节点的二叉树，其最大深度为 2。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://xqtony.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AI辅助创作" scheme="https://xqtony.github.io/tags/AI%E8%BE%85%E5%8A%A9%E5%88%9B%E4%BD%9C/"/>
    
    <category term="算法" scheme="https://xqtony.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二叉树" scheme="https://xqtony.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="递归" scheme="https://xqtony.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的中序遍历</title>
    <link href="https://xqtony.github.io/2024/12/09/binary-tree-inorder/"/>
    <id>https://xqtony.github.io/2024/12/09/binary-tree-inorder/</id>
    <published>2024-12-09T12:36:35.046Z</published>
    <updated>2024-12-09T12:40:17.749Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><p>二叉树是计算机科学中一种非常重要的数据结构，而二叉树的遍历操作又是对二叉树进行操作的基础。其中，中序遍历是二叉树遍历中的一种常见方式。在这篇博客中，我们将深入探讨二叉树中序遍历的概念，并介绍三种实现中序遍历的方法：迭代法、递归法和Morris遍历法。</p><span id="more"></span><h2 id="二、二叉树中序遍历的定义"><a href="#二、二叉树中序遍历的定义" class="headerlink" title="二、二叉树中序遍历的定义"></a>二、二叉树中序遍历的定义</h2><p>中序遍历（Inorder Traversal）是二叉树遍历的一种方式，它按照“左 - 根 - 右”的顺序访问二叉树中的节点。也就是说，对于每个节点，先遍历其左子树，然后访问该节点本身，最后遍历其右子树。</p><p>例如，对于如下二叉树：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  1</span><br><span class="line"> / \</span><br><span class="line">2   3</span><br></pre></td></tr></table></figure><p>其中序遍历的结果是 <code>[2, 1, 3]</code>。</p><h2 id="三、迭代法实现中序遍历"><a href="#三、迭代法实现中序遍历" class="headerlink" title="三、迭代法实现中序遍历"></a>三、迭代法实现中序遍历</h2><ol><li><strong>算法思路</strong><ul><li>迭代法实现中序遍历主要依靠栈这种数据结构。我们从根节点开始，将根节点及其所有左子节点依次压入栈中，直到左子节点为空。</li><li>然后从栈中弹出一个节点，访问该节点（将其值添加到结果列表中），再处理该节点的右子树。</li><li>重复上述过程，直到栈为空且当前节点为空。</li></ul></li><li><strong>代码实现（以Go语言为例）</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> (res []<span class="type">int</span>) &#123;</span><br><span class="line">    stack := []*TreeNode&#123;&#125;  <span class="comment">// 也可以写成 stack := make([]*TreeNode, 0)</span></span><br><span class="line">    <span class="keyword">for</span> (root!= <span class="literal">nil</span> || <span class="built_in">len</span>(stack)!= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> root!= <span class="literal">nil</span> &#123;</span><br><span class="line">            stack = <span class="built_in">append</span>(stack, root)</span><br><span class="line">            root = root.Left</span><br><span class="line">        &#125;</span><br><span class="line">        root = stack[<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        stack = stack[:<span class="built_in">len</span>(stack)<span class="number">-1</span>]</span><br><span class="line">        res = <span class="built_in">append</span>(res, root.Val)</span><br><span class="line">        root = root.Right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>代码解释</strong><ul><li>首先，我们初始化一个空栈 <code>stack</code>。</li><li>在主循环中，<code>(root!= nil || len(stack)!= 0)</code> 条件判断保证了只要还有节点未被遍历或者栈中还有节点，就继续循环。</li><li>内层循环 <code>for root!= nil</code> 不断将当前节点及其左子节点压入栈中，直到当前节点的左子节点为空。</li><li>当内层循环结束后，从栈顶弹出一个节点（这是最左的节点），将其值添加到结果列表 <code>res</code> 中，然后处理该节点的右子树。</li></ul></li></ol><h2 id="四、递归法实现中序遍历"><a href="#四、递归法实现中序遍历" class="headerlink" title="四、递归法实现中序遍历"></a>四、递归法实现中序遍历</h2><ol><li><strong>算法思路</strong><ul><li>递归法实现中序遍历是基于二叉树中序遍历的定义。对于一个节点，先递归地遍历其左子树，然后访问该节点本身，最后递归地遍历其右子树。</li></ul></li><li><strong>代码实现（以Go语言为例）</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> res []<span class="type">int</span></span><br><span class="line">    <span class="keyword">var</span> inorder <span class="function"><span class="keyword">func</span><span class="params">(*TreeNode)</span></span></span><br><span class="line">    inorder = <span class="function"><span class="keyword">func</span><span class="params">(node *TreeNode)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        inorder(node.Left)</span><br><span class="line">        res = <span class="built_in">append</span>(res, node.Val)</span><br><span class="line">        inorder(node.Right)</span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>代码解释</strong><ul><li>我们定义了一个内部递归函数 <code>inorder</code>。</li><li>当节点为 <code>nil</code> 时，直接返回，表示已经到达叶子节点的下一层（空节点）。</li><li>首先递归调用 <code>inorder(node.Left)</code> 来遍历左子树，然后将当前节点的值添加到结果列表 <code>res</code> 中，最后递归调用 <code>inorder(node.Right)</code> 来遍历右子树。</li></ul></li></ol><h2 id="五、Morris遍历法实现中序遍历"><a href="#五、Morris遍历法实现中序遍历" class="headerlink" title="五、Morris遍历法实现中序遍历"></a>五、Morris遍历法实现中序遍历</h2><ol><li><strong>算法思路</strong><ul><li>Morris遍历法是一种利用树的空闲指针来实现空间复杂度为O(1)的遍历方法。它的核心思想是利用二叉树节点中的空指针来建立一种临时的链接，帮助我们实现遍历。</li><li>对于当前节点，如果其左子节点为空，那么我们访问当前节点，并移动到右子节点。</li><li>如果当前节点的左子节点不为空，我们找到当前左子树中的最右节点（即左子树中的前驱节点）。如果最右节点的右指针为空，我们将其右指针指向当前节点，然后移动到左子节点；如果最右节点的右指针指向当前节点，这意味着我们已经遍历完左子树，我们断开这个临时链接，访问当前节点，并移动到右子节点。</li></ul></li><li><strong>代码实现（以Go语言为例）</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(root *TreeNode)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> res []<span class="type">int</span></span><br><span class="line">    cur := root</span><br><span class="line">    <span class="keyword">for</span> cur!= <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> cur.Left == <span class="literal">nil</span> &#123;</span><br><span class="line">            res = <span class="built_in">append</span>(res, cur.Val)</span><br><span class="line">            cur = cur.Right</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev := cur.Left</span><br><span class="line">            <span class="keyword">for</span> prev.Right!= <span class="literal">nil</span> &amp;&amp; prev.Right!= cur &#123;</span><br><span class="line">                prev = prev.Right</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> prev.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">                prev.Right = cur</span><br><span class="line">                cur = cur.Left</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.Right = <span class="literal">nil</span></span><br><span class="line">                res = <span class="built_in">append</span>(res, cur.Val)</span><br><span class="line">                cur = cur.Right</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>代码解释</strong><ul><li>我们从根节点开始，用 <code>cur</code> 指针来遍历二叉树。</li><li>当 <code>cur.Left == nil</code> 时，我们直接访问当前节点（将其值添加到 <code>res</code> 中），然后移动到右子节点。</li><li>当 <code>cur.Left!= nil</code> 时，我们寻找当前左子树中的最右节点 <code>prev</code>。<ul><li>如果 <code>prev.Right == nil</code>，说明我们还没有遍历左子树，我们将 <code>prev.Right</code> 指向当前节点 <code>cur</code>，然后移动到左子节点。</li><li>如果 <code>prev.Right == cur</code>，说明我们已经遍历完左子树，我们断开这个临时链接（将 <code>prev.Right</code> 设为 <code>nil</code>），访问当前节点（将其值添加到 <code>res</code> 中），然后移动到右子节点。</li></ul></li></ul></li></ol><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>二叉树的中序遍历在很多算法问题中都有重要应用。迭代法利用栈来实现遍历，逻辑清晰但需要手动管理栈；递归法代码简洁明了，但在一些语言中可能会因为递归深度过深而导致栈溢出；Morris遍历法虽然算法思路较为复杂，但实现了空间复杂度为O(1)的遍历，在空间受限的情况下非常有用。根据不同的应用场景，我们可以选择合适的遍历方法来解决问题。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、引言&quot;&gt;&lt;a href=&quot;#一、引言&quot; class=&quot;headerlink&quot; title=&quot;一、引言&quot;&gt;&lt;/a&gt;一、引言&lt;/h2&gt;&lt;p&gt;二叉树是计算机科学中一种非常重要的数据结构，而二叉树的遍历操作又是对二叉树进行操作的基础。其中，中序遍历是二叉树遍历中的一种常见方式。在这篇博客中，我们将深入探讨二叉树中序遍历的概念，并介绍三种实现中序遍历的方法：迭代法、递归法和Morris遍历法。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://xqtony.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="AI辅助创作" scheme="https://xqtony.github.io/tags/AI%E8%BE%85%E5%8A%A9%E5%88%9B%E4%BD%9C/"/>
    
    <category term="算法" scheme="https://xqtony.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二叉树" scheme="https://xqtony.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="中序遍历" scheme="https://xqtony.github.io/tags/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>分库分表是什么，怎么做</title>
    <link href="https://xqtony.github.io/2024/03/13/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    <id>https://xqtony.github.io/2024/03/13/%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/</id>
    <published>2024-03-12T16:22:19.538Z</published>
    <updated>2024-03-12T17:08:49.345Z</updated>
    
    <content type="html"><![CDATA[<p>本文大纲</p><ul><li>什么是分库分表？</li><li>如何切分库和表？</li><li>为什么要分库分表？</li><li>切分策略</li><li>分库分表产生的问题</li><li>分库分表如何落地？</li></ul><span id="more"></span><h1 id="什么是分库分表"><a href="#什么是分库分表" class="headerlink" title="什么是分库分表"></a>什么是分库分表</h1><h2 id="1-1-分库"><a href="#1-1-分库" class="headerlink" title="1.1 分库"></a>1.1 分库</h2><p>分库是指在表数量不变的情况下对库进行切分。</p><p>举例：如下图，数据库 A 中存放了 user 和 order 两张表，将两张表切分到两个数据库中，user 表放到 database A，order 表放到 database B。</p><p><img src="/../images/shard/shard1.png" alt="分库"></p><p>1.2 分表</p><p>分表是指在库数量不变的情况下对表进行切分。</p><p>举例：如下图，数据库 A 中存放了 user 表，将 user 表切分成 user1 和 user2 两张表并放到 database A 中。</p><p><img src="/../images/shard/shard2.png" alt="分表"></p><p>1.3 分库分表</p><p>分库分表是指库和表都切分，数量都发生变化。</p><p>举例：如下图，数据库 A 中存放了 user 表，将 user 表切分成 user1、user2、user3、user4 四张表，user1 和 user2 放到 database A 中，user3 和 user4 放到 database B 中。</p><p><img src="/../images/shard/image.png" alt="Alt text"></p><h1 id="二、如何切分库和表？"><a href="#二、如何切分库和表？" class="headerlink" title="二、如何切分库和表？"></a>二、如何切分库和表？</h1><p>主流的切分方式有 3 种：水平切分、垂直切分和混合切分。 </p><h2 id="2-1-水平切分"><a href="#2-1-水平切分" class="headerlink" title="2.1 水平切分"></a>2.1 水平切分</h2><p>水平切分包含水平分库和水平分表。</p><h3 id="2-1-1-水平分表"><a href="#2-1-1-水平分表" class="headerlink" title="2.1.1 水平分表"></a>2.1.1 水平分表</h3><p>水平分表指的表结构不变，将单表数据切分成多表。切分后的结果：</p><ul><li>每个表的结构一样；</li><li>每个表的数据不一样；</li><li>所有表的数据并集为全量数据；</li></ul><p>切分抽象图如下：</p><p><img src="/../images/shard/image-1.png" alt="Alt text"></p><p>举例：如下图，order 表，按照 oder_id 的数据范围水平切分后变成了 order1 和 order2 表，两个表的结构一样，数据不同。</p><p><img src="/../images/shard/image-2.png" alt="Alt text"></p><h3 id="2-1-2-水平分库"><a href="#2-1-2-水平分库" class="headerlink" title="2.1.2 水平分库"></a>2.1.2 水平分库</h3><p>水平分库是指，将表水平切分后分到不同的数据库，使得每个库具有相同的表，表中的数据不相同，水平分库一般是伴随水平分表。</p><p>举例：如下图，order 表，水平切分后，分到 database A 和 database B 中，这样原来一个库就被拆分成 2 个库。</p><p><img src="/../images/shard/image-3.png" alt="Alt text"></p><h2 id="2-2-垂直切分"><a href="#2-2-垂直切分" class="headerlink" title="2.2 垂直切分"></a>2.2 垂直切分</h2><p>垂直切分包含垂直分库和垂直分表。</p><h3 id="2-2-1-垂直分表"><a href="#2-2-1-垂直分表" class="headerlink" title="2.2.1 垂直分表"></a>2.2.1 垂直分表</h3><p>垂直分表指将存在一张表中的字段切分到多张表。切分后的结果：</p><ul><li>每个表的结构不一样；</li><li>每个表的数据不一样；</li><li>所有表的字段并集是原表的字段；</li></ul><p>切分抽象图如下：</p><p><img src="/../images/shard/image-4.png" alt="Alt text"></p><p>举例：如下图，order 表，根据字段垂直切分，切分后 order_base 表包含一部分字段的数据 和 order_info 表包含另一部分字段的数据。</p><p><img src="/../images/shard/image-5.png" alt="Alt text"></p><h3 id="2-2-2-垂直分库"><a href="#2-2-2-垂直分库" class="headerlink" title="2.2.2 垂直分库"></a>2.2.2 垂直分库</h3><p>垂直分库指的是，将单个库中的表分到多个库，每个库包含的表不一样。</p><p>举例：如下图，database A 中的 order 表 和 user 表，垂直分库为 database A 包含 order 表，database B 包含 user 表。</p><p><img src="/../images/shard/image-6.png" alt="Alt text"></p><h2 id="2-3-混合切分"><a href="#2-3-混合切分" class="headerlink" title="2.3 混合切分"></a>2.3 混合切分</h2><p>混合切分其实就是水平切分和垂直切分的组合，切分抽象图如下：</p><p><img src="/../images/shard/image-7.png" alt="Alt text"></p><p>举例：如下图，order 表，按照 oder_id 数据范围做了水平切分，并且按照表字段做了垂直切分。</p><p><img src="/../images/shard/image-8.png" alt="Alt text"></p><p>说明：上面的举例只是为了更好的展示如何切分，并不包含真实业务内容。</p><h1 id="三、为什么要分库分表？"><a href="#三、为什么要分库分表？" class="headerlink" title="三、为什么要分库分表？"></a>三、为什么要分库分表？</h1><h2 id="3-1-单库出现性能瓶颈"><a href="#3-1-单库出现性能瓶颈" class="headerlink" title="3.1 单库出现性能瓶颈"></a>3.1 单库出现性能瓶颈</h2><p>单库出现性能瓶颈，通常有以下几种情况：</p><ul><li>数据库服务器磁盘空间不足，但是无法扩容，导致写数据异常；</li><li>数据库服务器 CPU 压力过大，无法升配，导致读写性能较慢；</li><li>数据库服务器内存不足，无法扩容，导致读写性能瓶颈；</li><li>数据库服务器网络带宽不足，无法升配，导致读写性能瓶颈；</li><li>数据库服务器连接数过多，无法升配，导致客户端连接等待&#x2F;超时；</li></ul><p>如下图，单库已经达到了性能瓶颈，因此需要扩容成 2 个数据库：</p><p><img src="/../images/shard/image-9.png" alt="Alt text"></p><p>3.2 单表出现性能瓶颈</p><p>单表出现性能瓶颈，通常是因为单表数据量过大，导致读写性能较慢。</p><p>如下图，order 表已经达到了性能瓶颈，因此需要切分成 2 张表：</p><p><img src="/../images/shard/image-10.png" alt="Alt text"></p><h2 id="3-3-微服务化"><a href="#3-3-微服务化" class="headerlink" title="3.3 微服务化"></a>3.3 微服务化</h2><p>因公司架构发展，技术团队需要对服务器进行微服务化，从而分库分表。如下图展示：</p><p><img src="/../images/shard/image-11.png" alt="Alt text">   </p><h1 id="四、切分策略"><a href="#四、切分策略" class="headerlink" title="四、切分策略"></a>四、切分策略</h1><p>主流的切分策略有 3 种：Range 范围、hash 切分、映射表。</p><h2 id="4-1-Range-范围"><a href="#4-1-Range-范围" class="headerlink" title="4.1 Range 范围"></a>4.1 Range 范围</h2><p>Range 范围是指按某个字段的数据区间来进行切分。</p><p>比如：user 表按照 user_id 的数据范围切分成多张表，每 1000 万条数据存放一张表，切分后的表可以放到同一个数据库，也可以放到不同的数据库，示例图如下：</p><p><img src="/../images/shard/image-12.png" alt="Alt text"></p><ul><li>优点</li></ul><p>方便扩容，每次数据量达到 range 值就新加一张表，可以通过代码实现自动化扩容；</p><ul><li>缺点</li></ul><p>存在写偏移，可能有热点问题；</p><p>举例</p><p>比如用户注册场景：user 表，因为新注册的用户数据都是写新表，通常来说新用户的活跃度高，所以读写流量全部集中在最新的 user 表，因此，新表可能存在热点问题。  </p><h1 id="4-2-hash-切分"><a href="#4-2-hash-切分" class="headerlink" title="4.2 hash 切分"></a>4.2 hash 切分</h1><p>通过对分表键 key 进行一定的运算（通常有取余、取模运算，比如：key % m，key &#x2F; m，hash(key)&#x2F;m 等等），通过运算结果来决定路由的库和表。目前大多数互联网公司主要采用该方法。</p><ul><li>优点</li></ul><p>数据分片比较均匀，大大降低热点问题；</p><ul><li>缺点</li></ul><p>hash 算法选择不合理，后期扩容可能需要迁移数据；</p><p>数据被切分到不同的库和表中，可能存在跨节点查询和分页等问题；</p><p>举例</p><p>比如：user 表信息，根据 user_id 对 10 取余，这样就可以通过 user_id 尾号 hash 到 user_0 到 user_9 10 张表中：</p><p><img src="/../images/shard/image-13.png" alt="Alt text">   </p><h2 id="4-3-映射表"><a href="#4-3-映射表" class="headerlink" title="4.3 映射表"></a>4.3 映射表</h2><p>映射表其实是 Range 范围 和 hash 切分的混合模式，将分表键和数据库的映射关系记录在一个单独的表（表的形式可以是 数据库表，文件或者配置中心）。</p><ul><li>优点</li></ul><p>可以灵活设置路由规则；</p><ul><li>缺点：</li></ul><p>方案比较复杂；</p><p>映射表可能也会随着业务量的增大，同样需要分库分表，带来更多的问题；</p><p>举例</p><p>某社区电商下单场景，因为全国仓库的数量有限，所以分库直接使用了仓编编码-数据库映射表（后期新增加仓库，只要在表中增加映射关系），为了保证履约的时效性，用户下单时，商城端会选择最近的仓库，服务器在映射表中根据仓库编码查询并路由到对应的数据库，最后在库中进行 order 表的操作，交互如下图：</p><p><img src="/../images/shard/image-14.png" alt="Alt text"></p><h1 id="五、分库分表产生的问题"><a href="#五、分库分表产生的问题" class="headerlink" title="五、分库分表产生的问题"></a>五、分库分表产生的问题</h1><p>分库分表能够解决性能瓶颈问题，但是分库分表不是银弹，它同样也会带来一些问题：</p><ul><li>调试和维护难度</li><li>分布式事务</li><li>分布式事务</li><li>跨库关联&#x2F;分页&#x2F;排序</li></ul><h2 id="5-1-定位和维护难度"><a href="#5-1-定位和维护难度" class="headerlink" title="5.1 定位和维护难度"></a>5.1 定位和维护难度</h2><p>单库单表，可以很直观在表中查看数据，分库分表后，需要先根据 key 找到库和表，这样在一定意义上增加了开发人员定位问题的难度，再因为库和表的增多，维护难度自然也上去了（公司有 DBA 可以交给他们）。   </p><h2 id="5-2-分布式-ID"><a href="#5-2-分布式-ID" class="headerlink" title="5.2 分布式 ID"></a>5.2 分布式 ID</h2><p>单库单表，可以直接使用表自增主键保证全局唯一性，分库分表后，需要自己维护全局唯一的 ID，常用的算法有：UUID、号段模式（数据库生成全局 ID）、雪花算法。</p><p>UUID 优点：</p><p>性能非常高，本地生成，没有网络消耗；</p><p>UUID 缺点：</p><p>不易于存储：UUID 太长，16 字节 128 位，通常以 36 长度的字符串表示，很多场景不适用;</p><p>信息不安全：基于 MAC 地址生成 UUID 的算法可能会造成 MAC 地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置;</p><p>ID 作为主键时在特定的环境会存在一些问题，比如做 DB 主键的场景下，UUID 就非常不适用。</p><p>号段模式优点：</p><p>可以每次获取一个 ID，也可以每次获取一批 ID；</p><p>简单，利用现有数据库系统的功能实现；</p><p>ID 单调自增，可以实现对 ID 要求特殊的业务；</p><p>号段模式缺点：</p><p>强依赖发号 DB 的性能，可能有单点问题；</p><p>雪花算法优点：</p><p>毫秒数在高位，自增序列在低位，整个 ID 都是趋势递增的。</p><p>不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成 ID 的性能也是非常高的。</p><p>可以根据自身业务特性分配 bit 位，非常灵活。</p><p>雪花算法缺点：</p><p>强依赖机器时钟，如果机器时钟回拨，会导致重复或者服务不可用，不过发生的概率比较小；</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于公司内部没有分布式 ID 相关实现的，可以使用或借鉴 美团开源的 Leaf ( <a href="https://github.com/Meituan-Dianping/Leaf">https://github.com/Meituan-Dianping/Leaf</a> ) ，该框架提供了雪花算法和号段模式两种方案。</p><h2 id="5-3-分布式事务"><a href="#5-3-分布式事务" class="headerlink" title="5.3 分布式事务"></a>5.3 分布式事务</h2><p>单库单表可以直接使用本地事务来保障数据的正确性，分库分表之后可能就需要引入分布式事务的问题，解决方案有两种：</p><p>业务划分的时候规避分布式事务；</p><p>使用专业的的分布式框架，比如阿里开源的 Seata ( <a href="https://seata.io/zh-cn/">https://seata.io/zh-cn/</a> )；</p><h2 id="5-4-跨库关联-x2F-分页-x2F-排序"><a href="#5-4-跨库关联-x2F-分页-x2F-排序" class="headerlink" title="5.4 跨库关联&#x2F;分页&#x2F;排序"></a>5.4 跨库关联&#x2F;分页&#x2F;排序</h2><p>单库单表可以直接使用 MySQL limit 特性实现分页，分库分表后，可能会出现分页问题，解决方案有三种：</p><p>选择合适的分表字段，规避绝大部分高频查询场景出现跨库；</p><p>使用专业的分布式框架，比如开源框架：ElasticSearch ( <a href="https://github.com/elastic/elasticsearch">https://github.com/elastic/elasticsearch</a> )；</p><p>业务代码中分别查询，然后组装数据；</p><h1 id="六、分库分表工具"><a href="#六、分库分表工具" class="headerlink" title="六、分库分表工具"></a>六、分库分表工具</h1><p>分库分表工具主要有 2 种模式：客户端模式 和 代理模式   </p><h2 id="6-1-客户端模式"><a href="#6-1-客户端模式" class="headerlink" title="6.1 客户端模式"></a>6.1 客户端模式</h2><p>客户端模式是指在客户端实现直连数据库，客户端通常是通过一些封装好的 jar 来实现，如下图所示：</p><p><img src="/../images/shard/image-15.png" alt="Alt text"></p><p>常见的开源中间件有：Apache 的 Sharding-JDBC、淘宝的 TDDL、美图的 Zebra。</p><h2 id="6-2-代理模式"><a href="#6-2-代理模式" class="headerlink" title="6.2 代理模式"></a>6.2 代理模式</h2><p>代理模式是指需要单独部署服务，客户端连接代理服务，由代理服务再和数据库交互，如下图所示：</p><p><img src="/../images/shard/image-16.png" alt="Alt text"></p><p>常见的开源中间件有：Apache 的 Sharding-Proxy、阿里的 cobar、国产的 MyCat、360 的 Atlas。</p><p>另外还有 google 的 vitess，它是基于 zookeeper，通过 RPC 方式进行数据管理。   </p><h2 id="6-3-总结"><a href="#6-3-总结" class="headerlink" title="6.3 总结"></a>6.3 总结</h2><p>两种方案的核心思想都是类似的，都是将分库分表的逻辑进行抽象封装，业务无需关注分库分表的实现细节，只需按照规则进行简单的配置和开发，就能正常的使用分库分表。</p><p>两者各有优劣，客户端模式比较轻量，性能也会比较好；代理模式，客户端无需维护服务，但是需要部署额外的代理服务器，代理服务器的稳定性和性能等都需要保障。</p><h1 id="七、分库分表如何落地？"><a href="#七、分库分表如何落地？" class="headerlink" title="七、分库分表如何落地？"></a>七、分库分表如何落地？</h1><p>敲黑板……重点，重点，重点，重要的事情说三遍！！！</p><p>互联网业内有句经典名言”Talk is cheap.Show me your code”，理论讲再多，无法付诸实际生产都是空谈。</p><p>这里以某大厂社区电商订单业务的真实案例来分享如何落地分库分表。</p><h2 id="场景：社区电商下每日-3000-万下单场景"><a href="#场景：社区电商下每日-3000-万下单场景" class="headerlink" title="场景：社区电商下每日 3000 万下单场景"></a>场景：社区电商下每日 3000 万下单场景</h2><h3 id="评估库和表的总数"><a href="#评估库和表的总数" class="headerlink" title="评估库和表的总数"></a>评估库和表的总数</h3><p>一般评估的标准是：当前日订单峰值 M  支持最大的爆发增长速率 R  业务能支撑 Y 年发展 * 365 天&#x2F;年，单表存储 1000 万数据按。</p><p>预估数据总数：日订单 3000 万，一年按 365 天计数，最大支持日订单 10 倍的增长速度（即日订单量 1 亿），业务能支撑 10 年发展，因此，需要存储的总订单量 Total &#x3D; 3000w  365  10 * 10 ≈ 10000 亿，万亿级。</p><p>评估库和表的总数：每张表按 1000 万存储（库总数  表总数 &#x3D; 10000 亿 &#x2F; 1000 万），因此，库总数  表总数 &#x3D; 10 万，组合方式有『1 个库  10 万张表、10 个库  1 万张表、100 个库  1000 张表 等』，整体来看，”100 个库  1000 张表”这种组合数据离散比较均匀，在计算机中，一般采用 2^n 来计数。所以，100 个库  1000 张表可以比较接近 2^7  2^10 &#x3D; 128 * 1024，所以最终 128 个库，每个库 1024 张表。</p><h3 id="分库分表字段的选择"><a href="#分库分表字段的选择" class="headerlink" title="分库分表字段的选择"></a>分库分表字段的选择</h3><p>在单库单表中，可以直接进行 join 查询和分页操作，分库分表后，数据会分到不同的数据库和表上，可能会导致跨库查询等问题，因此，分表字段的选择，决定了能否将原本需要进行分页的数据划分到同一张表上，从而避免跨库查询。</p><p>So，如何选择分库分表字段？</p><p>有用过社区电商产品（橙心优选，美团优选，多多买菜，盒马邻里）的小伙伴应该知道，社区电商的模式是：当日购买，次日履约。</p><p>为了保证履约的时效，用户在下单时，商城端都是把订单下到最近的仓库，因此，可以根据仓库编码来分库。</p><p><img src="/../images/shard/image-17.png" alt="Alt text"></p><p>在整个销售链路和履约链路中，有几个高发的订单查询场景，因此分表字段的选择必须满足这些场景：</p><p>用户视角：查询自己所有的订单，因此，可以通过 user_id 分表，把某用户所有的订单放到同一张表。</p><p>团长视角：查询用户下给自己的所有订单，因此，可以通过 tuan_user_id 分表，把某团长的所有的订单放到同一张表。</p><p>商家视角：查询用户下给自己的所有订单，因此，可以通过 merchant_id 分表，把某商家的所有的订单放到同一张表。</p><p>客服视角：通过订单号查询某个订单，因此，通过 order_id 分表能够快速查询订单信息。</p><p>上述 4 种场景都是订单表高发查询的场景，但是目前常用的分库分表中间件都只能支持一个分表字段，该如何解决上面 4 种查询问题呢？</p><p>通常的做法有：冗余数据和关系索引表。</p><p>其实在计算中的世界很多时候都是时间和空间的一个权衡问题，是拿时间换空间，还是拿空间换时间？冗余数据和关系索引表就很好的体现了时间和空间的权衡关系。</p><h3 id="冗余数据："><a href="#冗余数据：" class="headerlink" title="冗余数据："></a>冗余数据：</h3><p>相同的数据保存多份，每份数据使用不同的分表字段，从而满足各种查询需求。如下图所示：通过 user_id、tuan_user_id、merchant_id、order_id 4 个字段来分表，因此需要冗余 4 份相同数据的 order 表。</p><p><img src="/../images/shard/image-18.png" alt="Alt text"></p><p>很显然，冗余数据是通过空间换时间的做法，优点是只要一次查询请求就能满足业务需求，缺点就是相同数据保存多份，浪费了空间，增加了成本。</p><p>淘宝的订单表采用的是数据冗余，拆分买家库和卖家库两个库，一个订单，在买家和卖家库里都存储了一份。</p><h3 id="关系索引表："><a href="#关系索引表：" class="headerlink" title="关系索引表："></a>关系索引表：</h3><p>它是指建立查询条件和基表分表键的索引关系。如下图，订单表是基表，通过建立 user_id 和 order_id，tuan_user_id 和 order_id，merchant_id 和 order_id 的关系索引表来满足几种查询场景：</p><p><img src="/../images/shard/image-19.png" alt="Alt text"></p><p>很显然，关系索引表是通过时间换空间的做法，优点是相对数据冗余法节省了空间和成本，缺点是多了一次索引表的查询，因此时间相对就增加了。该方式额外增加的时间在高并发特别大的场景就能显现出来。</p><p>因此，最后分库分表模型是根据仓库编码 warehouse_code 来分库，根据分表字段路由到 order 表，如下图：</p><p><img src="/../images/shard/image-20.png" alt="Alt text"></p><h3 id="Q-amp-A："><a href="#Q-amp-A：" class="headerlink" title="Q&amp;A："></a>Q&amp;A：</h3><ul><li>疑问 1：上述案例的数据库只能支撑 10 年，10 年以后的数据怎么存储？</li></ul><p>有过网购经验的小伙伴应该都很少去查询 3 年前的数据，因此，我们可以设置一个冷热数据，比如按 3 年划分，3 年内数据可以放到数据库做热数据，3 年前的数据可以归档到 ElasticSearch&#x2F;hive，做冷数据查询。</p><ul><li>疑问 2：如何查询某一时间段的订单？</li></ul><p>可以同步到 ElasticSearch&#x2F;hive，这样就可以很方便的按时间段来查询。</p><ul><li>疑问 3：上述案例是基于新业务，如果已经有线上服务和数据，该如何分库分表？</li></ul><p>这个场景是很多公司面临的问题，因此这里给出一个切分的常用处理流程：</p><p>立项讨论：</p><p>这个步骤需要完成和相关部门以及人员确认分库分表事项、实施日程、后期周知、风险以及应对方案等事宜。</p><p>技术方案：</p><p>技术方案需要给出详细迁移方案，包括分库分表方案，代码改造，服务器过渡到新库新表方案，数据迁移方案，风险处理方案等。</p><p>代码改造：</p><p>代码改造，主要会涉及到几个部分：服务如何过渡到新库新表，如何灵活支持灰度读写操作，如何进行数据全量迁移、一致性校验等任务。</p><p>分库分表方案：</p><p>分库分表方案需要确认分库分表的字段，库和表的数量等问题，可以参考上文 社区电商分库分表落地方案。</p><p>数据同步：</p><p>数据同步有全量数据迁移、增量数据同步以及数据校验、优化和补偿。</p><p>数据全量迁移常用方案：开发代码将老库数据迁移到新库；使用中间件同步工具（比如：阿里的 canal）将老库数据同步到新库。</p><p>增量数据同步常用方案：同步双写，在写数据库的地方修改成写两份数据；异步双写，写老库，监听 binlog 异步同步到新库；中间件同步：通过中间件（比如：阿里的 canal）将数据同步到目标库表。</p><p>数据校验常用方案：增量数据校验 和 全量数据校验 和 人工抽检。</p><p>数据校验核心流程：分别读取老库数据和新库数据，然后比较，数据一致则继续比较下一条数据，数据不一致则进行补偿。</p><p>数据补偿核心流程：新库存在老库不存在，则新库删除数据；新库不存在老库存在，则新库插入数据；新库存在老库存在，则比较所有字段，不一致则将新库更新为老库数据。</p><p>风险处理方案：</p><p>风险处理包含部门间配合，技术方案的处理（服务回滚，数据修复等）</p><h1 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h1><p>首先，本文从分库分表的理论到分库分表的实例落地分享，但是百种业务百种架构，百种架构百种方案，本文可以给分库分表一个很好的参考意义。</p><p>其次，数据分库分表技术难度比较大，特别是从现有业务改造，需要考虑数据的迁移以及服务器平稳过渡到新库新表，因此整个迁移过程都是一个很大的考验。</p><p>最后，我们分享了一个分库分表的常用流程，因为涉及点太多，所以只能给出一个业内常用的方案，很多细节点还需要在实施前充分去补充和完善。</p><h1 id="九、-代码实例"><a href="#九、-代码实例" class="headerlink" title="九、 代码实例"></a>九、 代码实例</h1><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_bill_2021_1` (</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>  COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `address_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址id&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_bill_2021_2` (</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>  COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `address_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址id&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"><span class="comment">-- 省略....</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_bill_2021_12` (</span><br><span class="line">  `order_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>  COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `address_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址id&#x27;</span>,</span><br><span class="line">  `status` <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`order_id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wyd<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>wyd<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sharding-sphere.version</span>&gt;</span>4.0.0-RC2<span class="tag">&lt;/<span class="name">sharding-sphere.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">shardingsphere.version</span>&gt;</span>5.0.0-beta<span class="tag">&lt;/<span class="name">shardingsphere.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sharding-sphere.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-namespace<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sharding-sphere.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.wyd.dao;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_bill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bill</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> Long addressId;</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setOrderId</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.orderId = orderId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddressId</span><span class="params">(Long addressId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.addressId = addressId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(String status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreateTime</span><span class="params">(Date createTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分库算法</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.wyd;</span><br><span class="line"><span class="keyword">import</span> org.apache.shardingsphere.api.sharding.standard.PreciseShardingAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shardingsphere.api.sharding.standard.PreciseShardingValue;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="comment">//自定义数据库分片算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DBShardingAlgorithm</span> <span class="keyword">implements</span> <span class="title class_">PreciseShardingAlgorithm</span>&lt;Long&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, PreciseShardingValue&lt;Long&gt; shardingValue)</span> &#123;</span><br><span class="line">        <span class="comment">//真实数据库节点</span></span><br><span class="line">        availableTargetNames.stream().forEach((item) -&gt; &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;actual db:&quot;</span> + item);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//逻辑表以及分片的字段名</span></span><br><span class="line">        System.out.println(<span class="string">&quot;logicTable:&quot;</span>+shardingValue.getLogicTableName()+<span class="string">&quot;;shardingColumn:&quot;</span>+ shardingValue.getColumnName());</span><br><span class="line">        <span class="comment">//分片数据字段值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;shardingColumn value:&quot;</span>+ shardingValue.getValue().toString());</span><br><span class="line">        <span class="comment">//获取字段值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> shardingValue.getValue();</span><br><span class="line">        <span class="comment">//分片索引计算 0 , 1</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">db_index</span> <span class="operator">=</span> orderId &amp; (<span class="number">2</span> - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String each : availableTargetNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (each.equals(<span class="string">&quot;ds&quot;</span>+db_index)) &#123;</span><br><span class="line">                <span class="comment">//匹配的话，返回数据库名</span></span><br><span class="line">                <span class="keyword">return</span> each;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDAyOTI2Nw==&mid=2247484608&idx=1&sn=c2deb84f4dabf5838fafe77ab274dfba&chksm=96c728fca1b0a1ea307ac9aefae146d39e6367732537d460d4a1581696bf05a7729201604ea4&token=1026451003&lang=zh_CN#rd">大厂实例分享：每日 3000万订单，如何分库分表</a><br><a href="https://www.zhihu.com/question/448775613/answer/2053752631">什么是分库分表，为什么要分库分表？ - 华为云开发者联盟的回答 - 知乎</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文大纲&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是分库分表？&lt;/li&gt;
&lt;li&gt;如何切分库和表？&lt;/li&gt;
&lt;li&gt;为什么要分库分表？&lt;/li&gt;
&lt;li&gt;切分策略&lt;/li&gt;
&lt;li&gt;分库分表产生的问题&lt;/li&gt;
&lt;li&gt;分库分表如何落地？&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://xqtony.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="转载" scheme="https://xqtony.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
    <category term="数据库" scheme="https://xqtony.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JVM核心知识</title>
    <link href="https://xqtony.github.io/2023/10/15/JVM%20basics/"/>
    <id>https://xqtony.github.io/2023/10/15/JVM%20basics/</id>
    <published>2023-10-14T16:17:56.835Z</published>
    <updated>2024-03-12T17:03:55.348Z</updated>
    
    <content type="html"><![CDATA[<p>分享JVM核心基础</p><span id="more"></span><h1 id="JVM-核心知识"><a href="#JVM-核心知识" class="headerlink" title="JVM 核心知识"></a>JVM 核心知识</h1><h2 id="Java是什么样的编程语言"><a href="#Java是什么样的编程语言" class="headerlink" title="Java是什么样的编程语言"></a>Java是什么样的编程语言</h2><h3 id="编程语言分类："><a href="#编程语言分类：" class="headerlink" title="编程语言分类："></a>编程语言分类：</h3><ul><li>面向过程，面向对象，面向函数</li><li>静态类型，动态类型</li><li>编译执行，解释执行</li><li>有虚拟机，无虚拟机</li><li>有GC，无GC</li></ul><p>Java是一种面向对象，静态类型，编译执行，有VM&#x2F;GC和运行时，跨平台的高级语言。</p><h3 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h3><p>C++通过源代码跨平台。在不同的OS中编译。</p><p>Java通过字节码（二进制）跨平台。编译之后生成的字节码可以在不同的OS中运行。</p><h3 id="字节码，类加载器，虚拟机"><a href="#字节码，类加载器，虚拟机" class="headerlink" title="字节码，类加载器，虚拟机"></a>字节码，类加载器，虚拟机</h3><p>文件系统 （字节码文件） -&gt; 虚拟机（类加载器） -&gt; 对象实例</p><h2 id="Java字节码技术"><a href="#Java字节码技术" class="headerlink" title="Java字节码技术"></a>Java字节码技术</h2><p>字节码是由单个字节组成的指令，理论上最多支持256个。实际上Java只用了200左右的，还有一些操作码保留给调试调用。</p><p>主要分为4大类：<br>1 栈操作指令，包括局部变量交互的指令<br>2 程序流程控制指令<br>3 对象操作指令，包括方法调用指令<br>4 算术运算以及类型转换指令</p><h3 id="生成字节码"><a href="#生成字节码" class="headerlink" title="生成字节码"></a>生成字节码</h3><p>编译： javac demo.java<br>查看字节码：javap -c demo</p><p>本人对字节码暂时不感兴趣。</p><p>了解什么是偏移量，字节码，助记符，程序计数器，局部变量区以及求值栈即可。</p><h2 id="JVM类加载器"><a href="#JVM类加载器" class="headerlink" title="JVM类加载器"></a>JVM类加载器</h2><p><img src="/../images/JVM/image.png" alt="类的生命周期"></p><p>1 加载：找Class文件<br>2 验证：验证格式，依赖<br>3 准备：静态字段，方法表<br>4 解析：符号解析为引用<br>5 初始化：构造器，静态变量赋值，静态代码块<br>6 使用<br>7 卸载</p><h3 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h3><p>1 虚拟机启动时，初始化主类<br>2 new一个类的时候要初始化该类<br>3 调用静态方法、静态字段的时候初始化静态所在地类<br>4 子类的初始化会触发父类的初始化<br>5 方接口定义了default方法，则该接口的实现类的初始化会触发接口的初始化<br>6 反射API对类反射调用的时候，会初始化该类<br>7 初次调用MothodHandle的时候，初始化该MethodHandle所指向方法所在的类</p><h3 id="不会初始化（可能会加载）"><a href="#不会初始化（可能会加载）" class="headerlink" title="不会初始化（可能会加载）"></a>不会初始化（可能会加载）</h3><p>1 通过子类调用父类的静态字段，只会出发父类的初始化，不会出发子类的初始化<br>2 定义对象数组，不会触发初始化<br>3 常量在编译器件会存入调用类的常量池中，本质上没有引用定义常量的类，不会触发定义常量所在的类。<br>4 通过类名获取Class对象，不会触发类的初始化<br>5 通过Class.forName加载指定类的时候，如果指定参数initialize为false的时候，不会触发类初始化。<br>6 通过ClassLoader默认的loadClass方法，也不会触发初始化动作（加载了，但是不初始化）</p><h3 id="三类加载器"><a href="#三类加载器" class="headerlink" title="三类加载器"></a>三类加载器</h3><p>1 启动类加载器 BootstrapClassLoader<br>2 扩展类加载器 ExtClassLoader<br>3 应用类加载器 AppClassLoader</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;分享JVM核心基础&lt;/p&gt;</summary>
    
    
    
    <category term="Java高级特性和类库" scheme="https://xqtony.github.io/categories/Java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E5%92%8C%E7%B1%BB%E5%BA%93/"/>
    
    
    <category term="Java" scheme="https://xqtony.github.io/tags/Java/"/>
    
    <category term="原创" scheme="https://xqtony.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>经验贴：Spring Bean的scope你真的会用吗？</title>
    <link href="https://xqtony.github.io/2023/09/26/spring-bean-prototype-issue/"/>
    <id>https://xqtony.github.io/2023/09/26/spring-bean-prototype-issue/</id>
    <published>2023-09-26T12:18:00.661Z</published>
    <updated>2023-09-26T14:38:45.606Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道Spring中的Bean默认都是单例的，也就是singleton。另外一个常用的是prototype（原型），可以通过它实现多例模式。但是请问，直接使用@Scope注解加上prototype直接就能实现多例吗？参考下面的代码：</p><span id="more"></span><p>MyService Bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope(value=&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span></span><br></pre></td></tr></table></figure><p>MyController Bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(/rest)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyService service;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;scope1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testScope1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;num:&quot;</span>+ ++num +<span class="string">&quot;次请求,&quot;</span>+ service);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面定义了两个Bean，一个是服务，一个是控制器。我们把服务通过自动注入的方式注入控制器。</p><p>请问上面的实现方式可以确保实现多例模式吗？</p><p>有的朋友可能认为，我已经使用了<code>@Scope(value=&quot;prototype&quot;)</code>，理当直接就是多例模式，每次访问&#x2F;rest&#x2F;me API的时候都能创建新的Bean，打印不同的结果。但是事实真的如此吗？</p><p>实际上看到的输出是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num:1次请求,com.xqtony.bean.scope.prototype.service.MyService@6bc394d2</span><br><span class="line">num:2次请求,com.xqtony.bean.scope.prototype.service.MyService@6bc394d2</span><br></pre></td></tr></table></figure><p>实际上，并没有实现多例！我们的运行结果会发现，两次请求打印出来的结果是一样的。原因是什么？是因为我们没有指定ScopeProxyMode。</p><p>ScopeProxyMode的值有: Default, NO, TARGET_CLASS, INTERFACE。</p><p>如果希望在这个例子中实现多例，必须加上<code>ScopeProxyMode.TARGET_CLASS</code>。</p><p>MyService Bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope(value=&quot;prototype&quot;, proxyMode=ScopedProxyMode.TARGET_CLASS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService2</span></span><br></pre></td></tr></table></figure><p>这时候会发现，service2和service一个是新创建了对象，另一个没有。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num:0次请求, service没加  ScopeProxyModecom.xqtony.bean.scope.prototype.service.MyService@2a80117c</span><br><span class="line">num:0次请求, service加了 ScopeProxyMode.TARGET_CLASScom.xqtony.bean.scope.prototype.service.MyService2@203f807a</span><br><span class="line">num:1次请求, service没加  ScopeProxyModecom.xqtony.bean.scope.prototype.service.MyService@2a80117c</span><br><span class="line">num:1次请求, service加了 ScopeProxyMode.TARGET_CLASScom.xqtony.bean.scope.prototype.service.MyService2@391e383e</span><br></pre></td></tr></table></figure><p>为什么我们知道要使用<code>TARGET_CLASS</code>呢？因为proxyMode的默认值是Default，而在源码中是这样描述的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default typically equals &#123;<span class="doctag">@link</span> #NO&#125;, unless a different default</span></span><br><span class="line"><span class="comment"> * has been configured at the component-scan instruction level.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DEFAULT,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Do not create a scoped proxy.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This proxy-mode is not typically useful when used with a</span></span><br><span class="line"><span class="comment"> * non-singleton scoped instance, which should favor the use of the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #INTERFACES&#125; or &#123;<span class="doctag">@link</span> #TARGET_CLASS&#125; proxy-modes instead if it</span></span><br><span class="line"><span class="comment"> * is to be used as a dependency.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NO,</span><br></pre></td></tr></table></figure><p>可见在使用Prototype（原型）的时候，是不应该使用DEFAULT的。</p><p>完整的项目代码请参考我的代码仓库：</p><p><a href="https://github.com/xqtony/spring-scope-prototype">Github项目地址</a></p><p>参考：<br><a href="https://blog.csdn.net/qq_39404258/article/details/109076346">springboot中怎么获取多例（prototype）</a><br><a href="https://zhuanlan.zhihu.com/p/27971569">spring的scope为prototype的bean的正确使用方法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们知道Spring中的Bean默认都是单例的，也就是singleton。另外一个常用的是prototype（原型），可以通过它实现多例模式。但是请问，直接使用@Scope注解加上prototype直接就能实现多例吗？参考下面的代码：&lt;/p&gt;</summary>
    
    
    
    <category term="实战经验" scheme="https://xqtony.github.io/categories/%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="Spring" scheme="https://xqtony.github.io/tags/Spring/"/>
    
    <category term="Spring Boot" scheme="https://xqtony.github.io/tags/Spring-Boot/"/>
    
    <category term="Spring Bean" scheme="https://xqtony.github.io/tags/Spring-Bean/"/>
    
    <category term="Prototype" scheme="https://xqtony.github.io/tags/Prototype/"/>
    
  </entry>
  
  <entry>
    <title>AWS Certified Solution Architect Associate SAA-C03 笔记 (一)</title>
    <link href="https://xqtony.github.io/2023/06/27/AWS%20Certified%20Solution%20Architect%20Associate%20SAA-C03%20part1%20copy/"/>
    <id>https://xqtony.github.io/2023/06/27/AWS%20Certified%20Solution%20Architect%20Associate%20SAA-C03%20part1%20copy/</id>
    <published>2023-06-26T16:50:59.881Z</published>
    <updated>2023-06-26T16:54:32.697Z</updated>
    
    <content type="html"><![CDATA[<p>最近花了相当长的时间在Pluralsight平台上学习AWS助理架构师的课程。下面是上课记得一些笔记，对于入门和复习都有很大帮助，欢迎阅读。</p><p>本篇是第一篇，涵盖了AWS基础，IAM，S3，EC2等内容。</p><p>持续更新中…</p><span id="more"></span><h1 id="AWS-Fundamentals"><a href="#AWS-Fundamentals" class="headerlink" title="AWS Fundamentals"></a>AWS Fundamentals</h1><h2 id="The-Building-Blocks-of-AWS-Availability-Zones-and-Regions"><a href="#The-Building-Blocks-of-AWS-Availability-Zones-and-Regions" class="headerlink" title="The Building Blocks of AWS: Availability Zones and Regions"></a>The Building Blocks of AWS: Availability Zones and Regions</h2><p>Region: 2+ AZ<br>AZ: 独立机房<br>Edge Locations：CloudFront、AWS CDN 内容分发网络</p><h2 id="Who-Owns-What-in-the-Cloud"><a href="#Who-Owns-What-in-the-Cloud" class="headerlink" title="Who Owns What in the Cloud?"></a>Who Owns What in the Cloud?</h2><p>toll 过路费<br>charge a toll for the use of (a bridge or road):</p><h2 id="Compute-Storage-Databases-and-Networking"><a href="#Compute-Storage-Databases-and-Networking" class="headerlink" title="Compute, Storage, Databases, and Networking"></a>Compute, Storage, Databases, and Networking</h2><p>Compute:<br>EC2, Lambda, EB<br>Storage:<br>S3, Elastic Block Store (EBS), Elastic File Server (EFS), FSx, Stroage Gateway<br>Databases:<br>RDS, DynamoDB, Redshift<br>Networking:<br>VPCs (Virtual DC), Direct Connect, Route 53 (DNS), API Gateway, AWS Global Accelerator</p><h2 id="What-Is-the-Well-Architected-Framework"><a href="#What-Is-the-Well-Architected-Framework" class="headerlink" title="What Is the Well-Architected Framework?"></a>What Is the Well-Architected Framework?</h2><p>AWS Witepapers &amp; Guide:<br>考试前必读。<br>Operational Excellence, Performance Efficiency, Security, Cost Optimization, Reliability, Sustainability</p><h2 id="AWS-Fundamentals-Exam-Tips"><a href="#AWS-Fundamentals-Exam-Tips" class="headerlink" title="AWS Fundamentals Exam Tips"></a>AWS Fundamentals Exam Tips</h2><p>Review:</p><p>Region: 2+AZ<br>AZ: different dc<br>Edge locations: AWS CDN, (CloudFront)</p><p>Responsibility:<br>SG, IAM, patching EC2, patching DB on EC2, etc<br>Mgmt DC, sec came, etc</p><p>Key Services:<br>Compute: EC2, Lam, EB<br>Storage: S3, EBS, EFS, FSx, SG<br>DB: RDS, DDB, Rs<br>Net: VPCs, DirC, R53, ApiG, AGA</p><p>Whitepaper reading.</p><h1 id="Identity-and-Access-Management-IAM"><a href="#Identity-and-Access-Management-IAM" class="headerlink" title="Identity and Access Management (IAM)"></a>Identity and Access Management (IAM)</h1><h2 id="Securing-the-Root-Account"><a href="#Securing-the-Root-Account" class="headerlink" title="Securing the Root Account"></a>Securing the Root Account</h2><p>IAM:<br>Create user<br>Create groups and roles<br>Control access to AWS resources</p><h2 id="Permanent-IAM-Credentials"><a href="#Permanent-IAM-Credentials" class="headerlink" title="Permanent IAM Credentials"></a>Permanent IAM Credentials</h2><p>PowerUser除了不能搞IAM其他和Admin一样<br>IAM全球<br>Root全能，不日用<br>新用户默认无权限<br>Access Key ID是编程用的<br>新用户密码等只能看一次<br>设置密码轮换是必要的<br>IAM Federation 可以用LDAP<br>Id Federation 也能用LDAP，SMAL协议。</p><h2 id="IAM-Exam-Tips"><a href="#IAM-Exam-Tips" class="headerlink" title="IAM Exam Tips"></a>IAM Exam Tips</h2><p>4安全方法：<br>1 Root MFA<br>2 Admin组创建，分配权限<br>3 创建Admin用户<br>4 Admin用户加入到Admin组</p><p>IAM JSON<br>考点：<br>IAM是全球的<br>Root全能，不日用<br>New User无权限<br>Access key ID和secret access key不是用户名密码；是编程用的<br>密码等只能看一次<br>密码轮换是必要的<br>IAM自治：可以复用现有账户<br>ID 自治： 添加SAML标准的Active Dir。(LDAP)</p><h1 id="Simple-Storage-Service-S3"><a href="#Simple-Storage-Service-S3" class="headerlink" title="Simple Storage Service (S3)"></a>Simple Storage Service (S3)</h1><h2 id="S3-Overview"><a href="#S3-Overview" class="headerlink" title="S3 Overview"></a>S3 Overview</h2><p>S3目录<br>S3<br>对象存储<br>任意文件类型<br>无法用来跑OS或者DB。仅仅是静态存储。<br>S3 基本<br>无线容量<br>单个文件最大5TB<br>S3 Buckets概念。（buckets类似文件夹）<br>S3 Bucket名字注册在全局命名空间，全球唯一<br>举例<br><a href="https://bucket名称.s3.region.amazonaws.com/key-name">https://bucket名称.s3.region.amazonaws.com/key-name</a><br>文件上传，成功则返回200 Code<br>S3 Overview：<br>Key：  Object name<br>Version ID: important for multiple version<br>Value: data it self, byte array<br>Metadata: data about the data<br>S3 is a safe place to store.<br>Availability and durability<br>Highly available and Highly durable<br>Build for 99.95% - 99.99% service availability, depends on S3 tier<br>11 9 durability.</p><p>S3 Standard</p><ol><li>HAD<br>99.99% avail<br>11 9’s dur</li><li>Designed for frequent access</li><li>suitable for most workloads.</li></ol><ul><li>default storage class</li><li>websites, content distribution, mobile and gaming, etc.<br>3大特性：<br>Tiered Storage 分级存储<br>Lifecycle Management 生命周期管理<br>Versioning 版本<br>安全：</li></ul><ol><li>服务端加密</li><li>ACLs （访问控制列表）</li><li>Bucket policies 桶策略<br>RAW 一致性<br>成功写操作之后，读可以正确读取<br>Strong consistency 强一致性<br>考点：</li><li>基于对象<br>2 非OS&#x2F;DB存储<br>3 至高5TB<br>4 无限容量<br>5 s3是全局命名空间<br>6 成功文件上传返回200<br>S3对象Tips：<br>Key： 对象名称<br>Value： 数据本身<br>Version ID：版本号<br>Metadata：元数据</li></ol><h2 id="Securing-Your-Bucket-with-S3-Block-Public-Access"><a href="#Securing-Your-Bucket-with-S3-Block-Public-Access" class="headerlink" title="Securing Your Bucket with S3 Block Public Access"></a>Securing Your Bucket with S3 Block Public Access</h2><p>我忘记过Version ID<br>Object ACLs vs Bucket Policies<br>OA: 单个对象级别的权限控制<br>BP：整个Bucket级别<br>创建Bucket是Global的，不单独针对区域。</p><h2 id="Hosting-a-Static-Website-Using-S3"><a href="#Hosting-a-Static-Website-Using-S3" class="headerlink" title="Hosting a Static Website Using S3"></a>Hosting a Static Website Using S3</h2><p>S3可以serve静态网页。<br>S3自动缩放大小<br>考点：<br>静态网页 -》联想到S3<br>BP： 让整个bucket公共，使用Bucket Policy<br>Static Only：只能搞静态网页。有数据库链接的不行。<br>自动扩容：S3可以自动扩容。<br>考点：<br>1 默认私有buckets<br>2 ACLs 单个权限<br>3 Bucket Policy 整个bucket权限<br>4 HTTP 200 表明上传完成</p><h2 id="Versioning-Objects-in-S3"><a href="#Versioning-Objects-in-S3" class="headerlink" title="Versioning Objects in S3"></a>Versioning Objects in S3</h2><p>版本控制优势：<br>全版本保留<br>备份<br>无法关闭（只能暂停）<br>生命周期<br>MFA支持<br>delete marker<br>5个技巧：<br>All Versions 全版本保留<br>备份<br>无法关闭（一旦打开）<br>生命周期规则<br>支持MFA</p><h2 id="S3-Storage-Classes"><a href="#S3-Storage-Classes" class="headerlink" title="S3 Storage Classes"></a>S3 Storage Classes</h2><p>S3 存储分类<br>标准<br>standard-infrequent Access<br>One Zone-infrequent Access<br>Intelligent-Tiering<br>3 Glacier..<br>S3标准<br>高可用行高持久性<br>高频访问<br>适用大多数负载<br>考点：<br>视频网站：存储视频，图片用S3标准<br>静态网站，使用S3标准<br>S3 标准-IA<br>不频，但能快速访问<br>访问要钱<br>用例：长期存储，备份，DR灾备<br>99.9 Avail （少个9）<br>11个9的持久性<br>S3 One Zone-Infrequent Access<br>类似于S3 Standard-IA<br>只存在于单个AZ<br>节约20%成本<br>适合于不重要的长期存在数据<br>99.5% Avil<br>11个9的持久<br>S3 Intelligent-Tiering<br>使用AI决定去<br>99.99% Avail<br>11个9的持久性<br>3 Glacier：<br>Glacier Instant Retrieval</p><ul><li>长期存储，立即获取<br>Glacier Flexible Retrieval</li><li>理想的长期春初，需要几分钟到12小时来获取<br>Glacier Deep Arcihive</li><li>7-10年的存储目标，12到48 小时获取<br>99.99 A<br>11个9持久</li></ul><h2 id="Lifecycle-Management-with-S3"><a href="#Lifecycle-Management-with-S3" class="headerlink" title="Lifecycle Management with S3"></a>Lifecycle Management with S3</h2><p>生命周期管理<br>30天转移<br>在 S3 Glacier 中，您必须将数据存储在存档中，存档的最低时间限制为90天。这意味着，一旦您将数据存储在 S3 Glacier 中，您必须等待至少90天，才能检索该数据。这是因为 S3 Glacier 是一种适用于长期存储和归档的服务，而不是适用于频繁访问的热存储服务。</p><p>S3生命周期考点：<br>自动在不同分类中移动<br>和version一起用<br>当前和过去version都可以</p><h2 id="S3-Object-Lock-and-Glacier-Vault-Lock"><a href="#S3-Object-Lock-and-Glacier-Vault-Lock" class="headerlink" title="S3 Object Lock and Glacier Vault Lock"></a>S3 Object Lock and Glacier Vault Lock</h2><p>S3对象锁<br>WORM 写一次，读很多次<br>write once, read many<br>用于监管需求<br>Governance Mode<br>治理模式<br>无权限情况下， 不能删除或者覆盖<br>Compliance Mode<br>合规模式<br>被保护对象无法被覆盖或者删除，任何用户都不行。包括Root用户也不行<br>Retention Periods<br>保留期<br>在特定时间段内保留对象，逾期后可以覆盖和修改。除非加上了Legal Hold，加上了不能改<br>Legal Hold是指一种法律程序，用于保护企业在诉讼或调查期间的电子数据。它是指企业在知道或合理预料到将要发生法律诉讼或调查时，采取的一系列措施，以确保与该诉讼或调查相关的信息不会被更改、删除或丢失。这些措施包括暂停数据销毁、备份和保留相关数据，并采取其他必要措施以确保数据完整性和可用性。 </p><p>Legal Hold通常是由企业的法律部门或合规部门发起并监督的。如果企业没有及时采取Legal Hold措施，可能会面临法律责任和罚款。<br> Retention Mode：Retention Mode是一种数据保留模式，可确保对象在指定的保留期内不被删除或更改。在Retention Mode下，对象被锁定，无法被更改或删除。Retention Mode有两种模式：COMPLIANCE和GOVERNANCE。COMPLIANCE模式是一种严格的保留模式，保留期内的对象无法被删除或更改。GOVERNANCE模式是一种灵活的保留模式，允许管理员在保留期内删除和更改对象，但需要提前30天发出通知。<br>3个 Object Lock的提示：<br>1 S3 OL用来存放WORM模型<br>2 OL可以是在单个对象，也可以在整个bucket上<br>3 OL有两个模式：Gov Mode和Comp Mode<br>Legal Hold Mode：Legal Hold Mode是一种法律保留模式，可确保对象在法律程序期间不被删除或更改。在Legal Hold Mode下，对象被锁定，无法被更改或删除，直到Legal Hold被解除。<br>S3 OL Mode分类：<br>Comp M：谁都不能改<br>Gov M：特定人能改<br>WORM模型是一种数据存储模型，即“Write Once Read Many”（只写一次，多次读取）。WORM模型的基本思想是，一旦数据被写入存储系统，就无法更改或删除，只能被多次读取。这种模型通常用于需要长期保留数据的场景，如合规性要求、法律诉讼、归档等。</p><p>WORM模型通常用于磁带库、光盘存储、硬盘阵列等存储系统中。在这些存储系统中，数据被写入后，存储系统会对其进行保护，以防止数据被意外或恶意删除或修改。这种保护通常包括数据备份、数据加密、访问控制等措施。</p><p>WORM模型的优点在于，它可以确保数据的完整性和可用性，防止数据被意外或恶意删除或修改。这对于需要长期保留数据的场景非常重要，如金融、医疗、法律等行业。同时，WORM模型也有一定的缺点，如存储成本高、数据访问速度较慢等。因此，在选择存储系统时，需要根据实际需求进行选择。<br>这句话的意思是，AWS S3 Glacier Vault Lock功能允许您为每个S3 Glacier Vault轻松部署和执行合规性控制，并使用保管库锁定策略来保护其数据。Vault Lock是一种控制访问和保护数据的功能，它可以通过Vault Lock策略来限制对Vault的访问和修改。Vault Lock策略是一种JSON文档，可以定义保管库的访问权限、保留期限、删除保护等规则。</p><p>使用Vault Lock功能，您可以确保保管库中的数据符合合规性要求，并且不能被意外或恶意删除或修改。Vault Lock策略可以防止管理员或其他用户删除或修改数据，即使他们拥有相应的权限。Vault Lock还可以防止数据被意外或恶意删除或修改，从而保护数据的完整性和可用性。</p><p>总之，S3 Glacier Vault Lock功能提供了一种简单而有效的方式来确保S3 Glacier Vault中的数据符合合规性要求，并保护数据的完整性和可用性。<br>在AWS S3 Glacier中，Vault指的是一种逻辑容器，用于存储数据归档。Vault是S3 Glacier中的基本存储单元，您可以将数据归档到Vault中，然后对其进行管理和检索。Vault可以看作是一个文件夹，您可以在其中创建和管理归档文件。</p><p>每个Vault都有一个唯一的名称，并且可以配置一些属性，如访问权限、保留期限、删除保护等。Vault中的归档文件可以通过AWS控制台、AWS CLI或AWS SDK进行管理和检索。您可以上传和下载归档文件，列出Vault中的所有归档文件，以及删除归档文件等。</p><p>在S3 Glacier中，Vault是一个重要的概念，它提供了一种方便而安全的方式来存储和管理数据归档。同时，Vault也是S3 Glacier中的一个重要的合规性要求，您需要确保Vault中的数据符合合规性要求，并保护数据的完整性和可用性。<br>情境：<br>WORM + S3: S3 Obj Lock  -&gt; Comp, Gov<br>WORM + Glacier: Glacier Vault Lock</p><h2 id="Encrypting-S3-Objects"><a href="#Encrypting-S3-Objects" class="headerlink" title="Encrypting S3 Objects"></a>Encrypting S3 Objects</h2><p>Encryption分类<br>1 传输加密</p><ul><li>SSL&#x2F;TLS</li><li>HTTPS<br>2 Rest加密：服务端加密</li><li>SSE-S3：S3-管理密钥，使用AES 256</li><li>SSE-KMS: AWS Key Mgmt Service</li><li>SSE-C： Customer提供的key<br>3 Rest加密 客户端加密<br>上传之前加密，自己高<br>两种强制执行桶加密的方式：<br>Console 点击复选框就可以<br>考点：BP 桶策略<br>强制执行服务端加密：<br>1:<br>使用x-amz-server-side-encryption头<br>2:<br>两种选项：<br>x-amz-server-side-encryption: AES256<br>x-amz-server-side-encryption: aws:kms<br>3:<br>header放在PUT请求中，让S3加密obj，在上传的时候，使用指定的加密方法。<br>可以创建BP，deny任何header不包含SSE头的PUT请求，<br>考点：<br>传输加密：SSL&#x2F;TLS，HTTPS<br>服务端加密：SSE，SSE-S3， SSE-KM，SSE-C<br>客户端加密：自定义<br>强制加密：PUT请求</li></ul><h2 id="Optimizing-S3-Performance"><a href="#Optimizing-S3-Performance" class="headerlink" title="Optimizing S3 Performance"></a>Optimizing S3 Performance</h2><p>S3性能优化</p><p>S3前缀越多，性能越高。<br>第一个字节100-200ms</p><p>充不多5500个Get请求，per 桶，per 前缀（prefix）<br>KMS限制：<br>上传调用API<br>下载调用API<br>KSM API调用配额<br>分区域的，5500，10000， 30000每秒<br>不能要求加量<br>多段上传</p><ul><li>推荐对&gt;100MB文件操作</li><li>大于5GB的必须分</li><li>并行传输 （<br>下载：<br>Byte-Range Fetches</li><li>并行下载，分byte段</li><li>失败只针对特定比特段<br>S3 字节区域下载：<br>加速下载<br>可以只加载一部分文件（比如文件头）<br>考点：<br>1 Prefix指的是<br>mybucketname&#x2F;sub1&#x2F;sub2&#x2F;file.jpg<br>中<br>&#x2F;sub1&#x2F;sub2&#x2F;这一段<br>2 大量访问：<br>3500 PUT&#x2F;COPY&#x2F;POST&#x2F;DELETE<br>5500 GET&#x2F;HEAD<br>per second, per prefix<br>3 分开prefix可以提高性能<br>考点：<br>KMS</li><li>有配额的</li><li>分区域，五千五，一万，三万请求每秒</li><li>不让加量<br>考点：<br>分段上传性能高<br>100MB以上推荐，5GB必须分段<br>S3 Byte-range fetch 可以加速下载</li></ul><h2 id="Backing-up-Data-With-S3-Replication"><a href="#Backing-up-Data-With-S3-Replication" class="headerlink" title="Backing up Data With S3 Replication"></a>Backing up Data With S3 Replication</h2><p>S3 复制以前叫做跨区域复制<br>3个考点：<br>1 可以从一个桶复制到另一个桶<br>2 现存的对象不会自动复制<br>3 删除标记默认不会复制</p><h2 id="S3-Exam-Tips"><a href="#S3-Exam-Tips" class="headerlink" title="S3 Exam Tips"></a>S3 Exam Tips</h2><p>总结：<br>基于对象、不适用OS、DB、之高5TB、容量无限<br>全局名字，不可重名、上传成功返回200<br>4点：key value verionId metadata<br>安全4点：默认私有、对象ACLs、桶策略、HTTP代码成功200<br>静态网站：桶策略、静态内容、自动扩容<br>版本控制：全版本、备份、无法关闭、生命周期规则、支持MFA<br>存储分级：S3 Std， S3 Std-IA， S3 OZ-IA，S3 Glacier， S3 Glacier DA，SA3 I-T<br>重要数据：99.99，99.9， 99.5， 1<br>生命周期：自动移动，联合版本使用，当前过去版本都可以使用<br>S3对象锁：WORM模型，单个对象或者整个桶可以锁，分两类：Gov和Comp<br>Glacier锁：强制实施WORM<br>加密：两类：传输加密SSL&#x2F;TLS，服务端加密：SSE（server-side enc）SSE-S3 （AES256） SSE-KMS SSE-C 客户端加密：自己解决 强制加密桶策略：加header<br>Prefix定义（文件夹名字） 性能 3500PUT，5500 GET、HEADER  越多Prefix，性能越高（2个能达到11000 GET）每秒<br>KMS配额限定 5500，1万，3万，且无法增加<br>性能优化：多部份上传，100MB以上，5GB以上必须，S3brf 快速下载 并列<br>S3复制：以前叫跨区复制。也可以同区域复制，从一个buck到另一个buck，现存默认不复制，默认不复制删除标记</p><h1 id="Elastic-Compute-Cloud-EC2"><a href="#Elastic-Compute-Cloud-EC2" class="headerlink" title="Elastic Compute Cloud (EC2)"></a>Elastic Compute Cloud (EC2)</h1><h2 id="EC2-Overview"><a href="#EC2-Overview" class="headerlink" title="EC2 Overview"></a>EC2 Overview</h2><p>EC2计费标准：<br>On-Demand 按需 按小时、秒<br>Reserved 保留 1-3年<br>Spot   竞价<br>Dedicated  专用<br>按需的场景：<br>Flex<br>Short term<br>Test water<br>保留实例场景：(RI)<br>可预测的使用<br>特定用量需求<br>先付钱<br>标准RI<br>可转换RI<br>调度RI<br>RI能省钱至高72%<br>需要承诺1-3年的用量<br>超级flexible。不限定EC2， Lambda也ok<br>何时使用Spot<br>不能用来做网站。因为竞价，可能顶掉了。<br>Flex yes<br>Urgent no<br>Cost sensitive yes<br>Dedicated专用：<br>合规性需求<br>专用许可证<br>AWS Price Calculator<br>考点：<br>EC2像个VM，在AWS而非自由数据中心。<br>选择现在需要的容量<br>按需缩放<br>按用量付费<br>等几分钟二不是几个月<br>EC2付费选项：<br> 按需，保留，Spot，专用。</p><h2 id="Demo-Launching-an-EC2-Instance’"><a href="#Demo-Launching-an-EC2-Instance’" class="headerlink" title="Demo: Launching an EC2 Instance’"></a>Demo: Launching an EC2 Instance’</h2><p> VPC是个虚拟dc<br>一个subnet就是一个AZ</p><h2 id="AWS-Command-Line"><a href="#AWS-Command-Line" class="headerlink" title="AWS Command Line"></a>AWS Command Line</h2><p>aws s3 ls<br>aws s3 mb s3:&#x2F;&#x2F;sdfdsfsdfsdf<br>aws s3 cp hello.txt s3:&#x2F;&#x2F;sdfdsfsdfsdf</p><p>考点：<br>给最少的权限；创建和使用IAM组，附加上IAM Policy，自动继承<br>考点CLI：<br>1 Secret Access Key 私密访问密钥 只能看一次<br>2 不要分享 Key pair<br>3 支持Win Linux和Mac</p><h2 id="Using-Roles"><a href="#Using-Roles" class="headerlink" title="Using Roles"></a>Using Roles</h2><p>可以给EC2设置IAM Role成为S3 Admin<br>考点：<br>1 倾向使用Role<br>2 避免硬编码角色<br>3 政策是控制role的权限的<br>4 可以直接更新policy<br>5 可以attach和detah role给running EC2<br>考点：<br>1 用Role的确是最佳实践<br>2 用Role可以通过ssh 附加.pem公钥登录了，因此不需要使用access key ID和secret access key了。<br>3 策略。通过策略（Policies）来控制Role的权限<br>4 更新。更新Role上附加的策略可以即刻生效<br>5 附加，去除。可以随意的在运行中的EC2上附加或者去除Role。很方便</p><h2 id="Security-Groups-and-Bootstrap-Scripts"><a href="#Security-Groups-and-Bootstrap-Scripts" class="headerlink" title="Security Groups and Bootstrap Scripts"></a>Security Groups and Bootstrap Scripts</h2><p>安全组和Bootstrip script<br>计算机通信常用端口<br>22<br>3389<br>80<br>443<br>Bootstrap 脚本是初始化EC2时候运行的脚本。懂了<br>安全组考点：<br>0 安全组是虚拟的防火墙的概念<br>1 安全组的更改会立即生效<br>2 一个安全组内可以有任何数量的EC2<br>3 一个EC2也 可以附加上多个安全组<br>4 默认禁止所有入境流量<br>5 所有出境流量都是允许的</p><h2 id="EC2-Metadata-and-User-Data"><a href="#EC2-Metadata-and-User-Data" class="headerlink" title="EC2 Metadata and User Data"></a>EC2 Metadata and User Data</h2><p>metadata指的是 关于EC2本身的一些数据<br><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html">https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html</a><br>考点：<br>1 User data 就是bootstrap script<br>2 Metadata就是EC2数据<br>3 能用bootstrap 脚本访问metadata</p><h2 id="Networking-with-EC2"><a href="#Networking-with-EC2" class="headerlink" title="Networking with EC2"></a>Networking with EC2</h2><p>使用增强网络的时候，ENA100GB，VI10GB，选ENA<br> 弹性构造适配器<br>Elastic Fabric Adapter<br>EFA：提速，降低延迟<br>使用EFA，高性能计算HPC可以直接与机器学习程序通信，通过on-bypass.<br>考点<br>3中网络，ENI，低成本<br>EN 10 ~100 GB的网速需求<br>EFA 高性能计算场景，需要OS-bypass的场景。</p><h2 id="Optimizing-with-EC2-Placement-Groups"><a href="#Optimizing-with-EC2-Placement-Groups" class="headerlink" title="Optimizing with EC2 Placement Groups"></a>Optimizing with EC2 Placement Groups</h2><p>Placement Group优化EC2<br>集群 – 将一个可用区中靠近的实例打包在一起。通过使用该策略，工作负载可以实现所需的低延迟网络性能，以满足高性能计算（HPC）应用程序通常使用的紧密耦合的节点到节点通信的要求。</p><p>分区 – 将实例分布在不同的逻辑分区上，以便一个分区中的实例组不会与不同分区中的实例组使用相同的基础硬件。该策略通常为大型分布式和重复的工作负载所使用，例如，Hadoop、Cassandra 和 Kafka。</p><p>分布 – 将一小组实例严格放置在不同的基础硬件上以减少相关的故障。<br><a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/placement-groups.html">https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/placement-groups.html</a><br>考点：<br>1 cluster 集群  用于放在一起，减少延迟，提高吞吐量<br>2 spread 分布，一个是一个<br>3 partition 分区，几个是一个<br>考点：<br>集群不能跨az，其他两个可以<br>只有特定的类型才能放在“置放群组”里，包括计算优化，内存优化，GPU，以及存储优化。<br>AWS推荐一个集群里使用同质实例<br>无法合并两个PG<br>可以把现存实例移到PG里。（必须是关闭状态，而且只能通过AWS CLI或者SDK来实现，通过网页控制台目前还不可以）</p><h2 id="Solving-Licensing-Issues-with-Dedicated-Hosts"><a href="#Solving-Licensing-Issues-with-Dedicated-Hosts" class="headerlink" title="Solving Licensing Issues with Dedicated Hosts"></a>Solving Licensing Issues with Dedicated Hosts</h2><p>专用实例的场景：<br>有许可证的情况</p><h2 id="Timing-Workloads-with-Spot-Instances-and-Spot-Fleets"><a href="#Timing-Workloads-with-Spot-Instances-and-Spot-Fleets" class="headerlink" title="Timing Workloads with Spot Instances and Spot Fleets"></a>Timing Workloads with Spot Instances and Spot Fleets</h2><p>Spot得先给出你能给的最高价格。<br>Spot考点：<br>1 至高节省90%<br>2 仅适用于不需要持久化存储的场景<br>3 可以设置“不让停”时长<br>4 Spot舰队Fleet是一些Spot和（可选）按需实例的结合</p><h2 id="Deploying-vCenter-in-AWS-with-VMware-Cloud-on-AWS"><a href="#Deploying-vCenter-in-AWS-with-VMware-Cloud-on-AWS" class="headerlink" title="Deploying vCenter in AWS with VMware Cloud on AWS"></a>Deploying vCenter in AWS with VMware Cloud on AWS</h2><p>AWS上用VMware的几个场景<br>考点：<br>可以使用VMware去部署vCenter在AWS里</p><h2 id="Extending-AWS-Beyond-the-Cloud-with-AWS-Outposts"><a href="#Extending-AWS-Beyond-the-Cloud-with-AWS-Outposts" class="headerlink" title="Extending AWS Beyond the Cloud with AWS Outposts"></a>Extending AWS Beyond the Cloud with AWS Outposts</h2><p>Outposts是把AWS服务带到本地的私有服务器上<br>AWS Outposts Rack是一个完整的机架式设备，其中包含了计算、存储和网络设备，以及AWS云中的所有服务。<br>AWS Outposts Server是一种单独的计算设备，它可以与现有的本地存储和网络设备配合使用。<br>Rack和Server的区别要我说，就Rack什么都带，Server就单独一个Server；Rack U很多（40多），Server少（可能就一个）<br>考点：<br>AWS本地化，考虑Outpost<br>大Rack<br>小Server</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近花了相当长的时间在Pluralsight平台上学习AWS助理架构师的课程。下面是上课记得一些笔记，对于入门和复习都有很大帮助，欢迎阅读。&lt;/p&gt;
&lt;p&gt;本篇是第一篇，涵盖了AWS基础，IAM，S3，EC2等内容。&lt;/p&gt;
&lt;p&gt;持续更新中…&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://xqtony.github.io/categories/AWS/"/>
    
    
    <category term="原创" scheme="https://xqtony.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="AI辅助创作" scheme="https://xqtony.github.io/tags/AI%E8%BE%85%E5%8A%A9%E5%88%9B%E4%BD%9C/"/>
    
    <category term="AWS" scheme="https://xqtony.github.io/tags/AWS/"/>
    
    <category term="Cloud" scheme="https://xqtony.github.io/tags/Cloud/"/>
    
    <category term="云技术" scheme="https://xqtony.github.io/tags/%E4%BA%91%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>AWS Certified Solution Architect Associate SAA-C03 笔记 (二)</title>
    <link href="https://xqtony.github.io/2023/06/27/AWS%20Certified%20Solution%20Architect%20Associate%20SAA-C03%20part2/"/>
    <id>https://xqtony.github.io/2023/06/27/AWS%20Certified%20Solution%20Architect%20Associate%20SAA-C03%20part2/</id>
    <published>2023-06-26T16:02:34.650Z</published>
    <updated>2023-06-26T16:54:36.173Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是AWS Certified Solution Architect Associate SAA-C03 笔记的第二部分，涵盖了EBS，DB，Route 53及ELB的内容。</p><p>持续更新中…</p><span id="more"></span><h1 id="Elastic-Block-Storage-EBS-and-Elastic-File-System-EFS"><a href="#Elastic-Block-Storage-EBS-and-Elastic-File-System-EFS" class="headerlink" title="Elastic Block Storage (EBS) and Elastic File System (EFS)"></a>Elastic Block Storage (EBS) and Elastic File System (EFS)</h1><h2 id="EBS-Overview"><a href="#EBS-Overview" class="headerlink" title="EBS Overview"></a>EBS Overview</h2><p>减轻记忆负载：<br>仅在IOPS大于16000时，考虑io1或者io2 （Provisioned IOPS）<br>io2有99.999的持久性</p><p>大数据，数据仓库，ETL，考虑st1<br>最便宜 sc1</p><h2 id="Volumes-and-Snapshots"><a href="#Volumes-and-Snapshots" class="headerlink" title="Volumes and Snapshots"></a>Volumes and Snapshots</h2><p>EBS 弹性块存储，考点：<br>1 Volume 虚拟磁盘存在于EBS中，snapshot在S3中<br>2 snapshot是某一时刻对存储容器的照片，且具有增量的特定<br>3 第一个snapshot得花点时间创建，为了创建一致的快照，需要停止实例，并解除容器的关联。<br>4 可以在不同的region之间共享snapshot<br>5 可以在使用EBS的过程中更换EBS容量类型</p><hr><p>EBS（Elastic Block Store）是AWS提供的一种云存储服务，用于提供持久化的块存储。在EBS中，Volume和Snapshot是两个重要的概念。</p><p>Volume是EBS中的虚拟磁盘，它可以被挂载到EC2实例上，作为持久化的存储空间。Volume的大小可以根据需要动态调整，支持多种类型，如SSD和磁盘。Volume中存储的数据是持久化的，即使EC2实例被关闭或删除，数据仍然会保留在Volume中。</p><p>Snapshot是EBS中的备份机制，它可以对一个Volume进行快照备份，保存在S3中。Snapshot是一个只读的镜像，可以用来恢复Volume的数据，也可以作为新的Volume的基础镜像。通过定期创建Snapshot，可以保证数据的安全和可靠性，同时也可以提高恢复速度和灵活性。</p><p>总的来说，Volume是EBS中的存储空间，而Snapshot是对Volume的备份，用于数据的恢复和复制。两者共同构成了EBS的核心功能，为云应用提供了可靠的持久化存储服务。</p><h2 id="Protecting-EBS-Volumes-with-Encryption"><a href="#Protecting-EBS-Volumes-with-Encryption" class="headerlink" title="Protecting EBS Volumes with Encryption"></a>Protecting EBS Volumes with Encryption</h2><p>加密的虚拟磁盘的考点：<br>静态数据在磁盘内是加密的<br>实例与磁盘之间的动态数据也是加密的<br>镜像是加密的<br>由镜像创建的虚拟磁盘也是加密的<br>如何加密虚拟磁盘（考点）：<br>创建一个未加密的根设备磁盘镜像<br>复制一份镜像，过程中选择加密选项<br>从加密镜像创建一个AMI<br>用AMI启动新的加密实例</p><h2 id="EC2-Hibernation"><a href="#EC2-Hibernation" class="headerlink" title="EC2 Hibernation"></a>EC2 Hibernation</h2><p>EC2休眠（考点）<br>EC2休眠功能是让RAM里数据存到磁盘<br>更快的启动速度因为不需要重启OS<br>实例的RAM必须小于150GB<br>实例家族包括C，M和R的3，4，5.<br>支持Win，Amazon Linux 2 AMI，Ubuntu<br>实例不能休眠超过60天<br>休眠功能支持按需实例和保留实例</p><h2 id="EFS-Overview"><a href="#EFS-Overview" class="headerlink" title="EFS Overview"></a>EFS Overview</h2><p> EFS简单来说就网络磁盘，NFS<br>简单总结一下EFS<br>NFSv4协议<br>目前只支持Linux<br>使用KMS加密<br>自增的文件系统，不需要提前计划容量<br>按用量收费.<br> 1000+链接<br>10GB每秒<br>1000TB最多<br>EFS支持存储分级，Standard收费高，IA收费低。可以指定生命周期，移动文件来省钱<br>EFS考点：<br>支持NFSv4<br>按照用量付费<br>支持PB级别存储<br>千级并发NFS支持<br>跨AZ存储<br>具备读写一致性<br>提示：看见NFS高扩展性共享存储就考虑EFS。</p><h2 id="FSx-Overview"><a href="#FSx-Overview" class="headerlink" title="FSx Overview"></a>FSx Overview</h2><p>考点：<br>看见SharePoint迁移，立马想到FSx for Windows。因为是使用了Windows一模一样的文件系统。<br>考点：<br>分布式，高弹性：EFS<br>Windows相关： FSx for Win<br>AI&#x2F;ML：FSx for Lustre</p><h2 id="Amazon-Machine-Images-EBS-vs-Instance-Store"><a href="#Amazon-Machine-Images-EBS-vs-Instance-Store" class="headerlink" title="Amazon Machine Images: EBS vs. Instance Store"></a>Amazon Machine Images: EBS vs. Instance Store</h2><p>考点：<br>分布式，高弹性：EFS<br>Windows相关： FSx for Win<br>AI&#x2F;ML：FSx for lustre<br>AMI 亚马逊机器镜像<br> AMI就两种：<br>来自其他EBS快照的EBS<br>来自S3中存的模板的Instance store<br>instance store volumes<br>实例存储虚拟磁盘<br>也叫 临时存储<br>无法停止；重启不丢数据；删除实例则丢失实例存储虚拟磁盘。<br>AWS中的Instance store volume是一种暂时性的存储设备，通常与EC2实例一起使用。它是通过直接连接到物理主机而不是网络来提供高性能和低延迟的存储。Instance store volume通常用于需要高性能和低延迟的应用程序，如数据库、缓存和日志文件。</p><p>Instance store volume有以下特点：</p><ol><li><p>速度快：Instance store volume是直接连接到物理主机的，因此具有非常快的IO性能。</p></li><li><p>暂时性：Instance store volume的数据是暂时性的，如果实例终止或失败，数据将被删除。因此，Instance store volume不适合存储需要长期保存的数据。</p></li><li><p>可用性有限：Instance store volume的可用性取决于实例类型和区域。某些实例类型可能没有Instance store volume，而某些区域可能没有可用的Instance store volume。</p></li></ol><p>因此，如果您需要高性能和低延迟的存储，而且数据不需要长期保存，那么Instance store volume是一个很好的选择。但是，如果您需要长期保存数据或需要高可用性和可靠性，那么建议使用EBS卷。<br>考点：<br>Instance store也叫临时存储 ephemeral<br>Instance store不允许stop<br>EBS可以stop<br>这俩都可以重启，不丢数据<br>默认这俩终止都删磁盘，但是EBS可以选择不删<br>附加：<br>AMI简单来说就是蓝图</p><h2 id="AWS-Backup"><a href="#AWS-Backup" class="headerlink" title="AWS Backup"></a>AWS Backup</h2><p>考点：<br>AWS备份，看到集中式管理所有服务类似需求考虑AWS备份。<br>可以结合AWS Organization来实现多个账户的集中式管理<br>好处是：集中管理；生命周期自定义；合规性的便利，可以强制备份生命周期，可加密，可审计。</p><h2 id="EBS-Exam-Tips"><a href="#EBS-Exam-Tips" class="headerlink" title="EBS Exam Tips"></a>EBS Exam Tips</h2><p>EBS总结考点：<br>EBS固态：<br>gp2启动盘，一万六，三九<br>gp3高性能，也是三九，是gp2四倍性能<br>io1也是三九，比前俩更快<br>io2最快了，五九<br>考点：<br>EBS机械硬盘：<br>st1 三九，不能当启动盘，用来当数据仓库，大数据的。<br>sc1也是三九，便宜，不能当启动盘，用来放点不常用数据的，比如log什么的<br>考点：<br>比较Volume和Snapshot<br>存储地点不同：EBS和S3<br>快照是增量的，是虚拟磁盘某时刻的状态<br>第一个快照花的时间会比较久。<br>快照想要一致的话，要关机，解绑虚拟磁盘<br>快照可以跨账户，跨区域共享，但是必须要先拷贝到目的区域<br>EBS可以在运行中更改虚拟磁盘大小和类型<br>考点：<br>AMI的类型：<br>EBS与Instace Store<br>都能重启不丢东西<br>EBS能stop，IS不能<br>EBS能保留终止后的磁盘，IS不能<br>IS是基于内存的。<br>AMI就是蓝图<br>加密卷考点：<br>静态数据是加密的<br>动态数据也是加密的<br>快照是加密的<br>所有加密快照创建的虚拟磁盘也是加密的<br>加密流程重要考点：<br>四步加密一个磁盘：<br>1 创建一个快照<br>2 复制快照，勾选加密选项<br>3 基于加密快照创建AMI<br>4 基于加密AMI启动加密实例<br>休眠考点：<br>休眠是把RAM存到EBS里了<br>启动速度快<br>RAM不能超过150GB<br>支持的实例类型：C&#x2F;M&#x2F;R 3-5<br>跨平台，Win，A L 2， Ubuntu<br>休眠不能超过60天<br>仅在按需和预留实例中有<br>EFS考点：<br>支持版本NFSv4<br>千级并发<br>按用量付费<br>分布在同区域的多个AZ上<br>最多PB级别<br>读写一致<br>重要：场景题目，提到高扩展性共享NFS，考虑EFS。<br>考题：<br>EFS：高并发<br>FSx Win：微软专用<br>FSx Lustre：AI&#x2F;ML<br>考题：选啥存储实例<br>S3：无服务存储<br>冰川：归档<br>EFS：跨AZ集中式存储<br>FSx Lustre：AI&#x2F;ML等<br>EBS Volume：持久性EC2用的硬盘<br>Instance Store：临时性存一下EC2实例<br>FSx for Win：微软全家桶<br>考点：AWS备份：<br>合并几乎所有服务<br>结合AWS组织可以跨账户备份<br>好处是：集中管理，自动备份，可以定义生命周期；合规性能力提高，可以强制备份，备份加密，可以备份完之后审计</p><h1 id="Databases"><a href="#Databases" class="headerlink" title="Databases"></a>Databases</h1><h2 id="Relational-Database-Service-RDS-Overview"><a href="#Relational-Database-Service-RDS-Overview" class="headerlink" title="Relational Database Service (RDS) Overview"></a>Relational Database Service (RDS) Overview</h2><p>OLTP与OLAP的区别：<br>T主打传输<br>A主打分析<br>RDS只能用来OLTP<br>想要OLAP，记得Redshift（红移）<br>RDS里的Multi-AZ ：<br>就是个一模一样的备份。只能用作备份，不能用于负载均衡。<br>Multi-AZ的备份能力由AWS提供，用户不关心备份的细节<br> 考点：<br>RDS类型有SQL Server，MySQL， PostgreSQL，MariaDB，以及Amazon Aurora<br>RDS是为OLTP负载准备的<br>RDS不适合OLAP负载</p><h2 id="Increasing-Read-Performance-with-Read-Replicas"><a href="#Increasing-Read-Performance-with-Read-Replicas" class="headerlink" title="Increasing Read Performance with Read Replicas"></a>Increasing Read Performance with Read Replicas</h2><p>考点：<br>Multi-AZ vs Read Replica</p><ul><li><p>一模一样的备份，存放在其他AZ</p></li><li><p>只能用于容灾</p></li><li><p>灾难发生，RDS可以自动使用待机版本恢复</p></li><li><p>只读备份，可以是同AZ，跨AZ甚至跨Region</p></li><li><p>用来增加读性能（重点）</p></li><li><p>适用于heavy read的应用；也适用与隔离生产数据库，用于只读目的</p></li></ul><h2 id="What-Is-Amazon-Aurora"><a href="#What-Is-Amazon-Aurora" class="headerlink" title="What Is Amazon Aurora?"></a>What Is Amazon Aurora?</h2><p>Aurora考点：<br>最少3个AZ，每个AZ有2个备份，最低6份数据<br>Aurora镜像可以在账户之间共享<br>3种Read 副本，Aurora，MySQL以及PostgreSQL，其中只有Aurora的具有自动failover能力<br>Aurora默认开启自动备份，也可以手动创建镜像。<br>Aurora无服务简单便宜，不可预测的负载情境下适用</p><h2 id="DynamoDB-Overview"><a href="#DynamoDB-Overview" class="headerlink" title="DynamoDB Overview"></a>DynamoDB Overview</h2><p>DynamoDB考点：<br>4个事实：<br>存储在SSD上<br>分布在3个不同地理位置的DC<br>支持 最终一致性读取 和 强一致性读取<br>最终一致性读取： 最佳读取性能，一秒钟内所有数据的备份都是一致的<br>强一致性读取：任意时刻读取的内容都包含改时刻之前的所有写入操作。</p><h2 id="When-Do-We-Use-DynamoDB-Transactions"><a href="#When-Do-We-Use-DynamoDB-Transactions" class="headerlink" title="When Do We Use DynamoDB Transactions?"></a>When Do We Use DynamoDB Transactions?</h2><p>DynamoDB Transactions考点：<br>场景题：任何提及ACID需求的<br>DynamoDB提速原子性，一致性，隔离性，持久性在一个或多个表的一个AWS账户和一个区域内<br>全部或没有</p><h2 id="Saving-Your-Data-with-DynamoDB-Backups"><a href="#Saving-Your-Data-with-DynamoDB-Backups" class="headerlink" title="Saving Your Data with DynamoDB Backups"></a>Saving Your Data with DynamoDB Backups</h2><p>DynamoDB中的备份Point-in-Time Recovery的特点：<br>保护意料之外的写操作或删除操作<br>可以回退到35天内任何时间<br>递增的备份<br>默认不开启<br>最新的回退的是5分钟之前。5分钟之内不能。</p><h1 id="Virtual-Private-Cloud-VPC-Networking"><a href="#Virtual-Private-Cloud-VPC-Networking" class="headerlink" title="Virtual Private Cloud (VPC) Networking"></a>Virtual Private Cloud (VPC) Networking</h1><h2 id="VPC-Overview"><a href="#VPC-Overview" class="headerlink" title="VPC Overview"></a>VPC Overview</h2><p>VPC中包含Web，Application，Database三种子网。<br>Web是公共子网，面向互联网<br>Application是私有子网，面向web tier和db tier<br>Database也是私有子网，只面向app tier。<br>可以在公司数据中心和AWS云之间建立VPN<br>一个计算IP地址段的网站<br>AWS里是最多能支持<br>10.0.0.0&#x2F;16，保留了一部分地址。<br>局域网地址有三个网段：（复习）<br>10.0.0.0&#x2F;8<br>172.16.0.0&#x2F;12<br>192.168.0.0&#x2F;16</p><p>很多组织，公司 ，都用10.0.0.0<br>下面两节的架构<br>Internet Gateway网关<br>Virtual Private Gateway 虚拟私有网关<br>默认VPC vs 自定义VPC：<br>默认VPC更简单，默认VPC子网都有连接到Internet的路由，每个EC2实例都有一个公共和私有IP。<br>自定义VPC可以完全自定义，但是要花时间去配置。</p><h2 id="Demo-Provisioning-a-VPC-Part-1"><a href="#Demo-Provisioning-a-VPC-Part-1" class="headerlink" title="Demo: Provisioning a VPC - Part 1"></a>Demo: Provisioning a VPC - Part 1</h2><p>Classless Inter-Domain Routing (CIDR) is an IP address allocation method that improves data routing efficiency on the internet.<br>subnet约等于虚拟防火墙</p><p>VPC设置IP地址的时候，会保留5个地址。<br>0 网络地址<br>1 VPC路由<br>2 DNS服务器<br>3 保留<br>255 广播地址，VPC没有广播但是保留<br>VPC考点：<br>VPC可以认为是AWS中的逻辑数据中心<br>VPC包含网关（或者叫虚拟私有网关），路由表，网络访问控制列表，子网，以及安全组<br>一个子网只存在于一个AZ里 （常考）。</p><h2 id="Demo-Provisioning-a-VPC-Part-2"><a href="#Demo-Provisioning-a-VPC-Part-2" class="headerlink" title="Demo: Provisioning a VPC - Part 2"></a>Demo: Provisioning a VPC - Part 2</h2><p>ICMP是ping相关的<br>配置公共子网，通过公共子网里的机器ssh到私有子网的机器上，yum update一下发现的确不能访问互联网。</p><h2 id="Using-NAT-Gateways-for-Internet-Access"><a href="#Using-NAT-Gateways-for-Internet-Access" class="headerlink" title="Using NAT Gateways for Internet Access"></a>Using NAT Gateways for Internet Access</h2><p>NAT Gateway的5个要点：<br>1 在AZ里冗余<br>2 5Gbps起步，目前最高45Gbps<br>3 无需patch<br>4 与安全组无关联<br>5 自动分配公有IP地址</p><h2 id="Protecting-Your-Resources-with-Security-Groups"><a href="#Protecting-Your-Resources-with-Security-Groups" class="headerlink" title="Protecting Your Resources with Security Groups"></a>Protecting Your Resources with Security Groups</h2><p>这一节复习安全组，主要强调安全组是有状态的。有状态是指当你在实例上发送一个请求，它的response是可以无视inbound安全组规则的。同理，一个inbound请求进来之后的响应可以无视outbound规则外流。<br>安全组的是有状态的。它能记得住一个入站请求，并在出站的时候自动放行，而无视出站规则。</p><h2 id="Controlling-Subnet-Traffic-with-Network-ACLs"><a href="#Controlling-Subnet-Traffic-with-Network-ACLs" class="headerlink" title="Controlling Subnet Traffic with Network ACLs"></a>Controlling Subnet Traffic with Network ACLs</h2><p>Network ACL:<br>1 可选的配置，和防火墙很像，可以控制in、out的流量，可以在一个或多个子网上生效<br>2 可以配置与安全组类似的配置，来额外添加一层防护。<br>补充：<br>默认网络ACL：VPC自动创建的，默认允许所有流入流出的流量<br>自定义网络ACL：可以创建自定义的 ACL。默认的自定义ACL禁用所有的流入流出流量（重点）<br>子网关联：每个子网必须与一个ACL关联。如果不显式的指定子网关联，则自动的与默认ACL关联。<br>IP拦截：拦截IP使用的是ACL，而不是安全组。<br>ACL与子网：<br>ACL与子网是一对多的关系；一个ACL可以关联多个子网，但是一个子网一次只能关联一个ACL。当一个子网与新的ACL关联，其旧的ACL关联会被移除掉。</p><p>ACL中的rule，需要越小的越先执行。<br>ACL把入站和出站规则分开了，每个rule可以是白名单或黑名单。<br>ACL是无状态的。入站允许的相应也需要服从出站的规则。反之亦然。<br>Ephemeral ports 译作临时端口，是创建TCP链接时候会用到的端口。刚才的例子里，为出站规则开放了TCP的一系列临时端口。<br>考点：</p><ol><li>默认ACL允许所有入站和出站流量</li><li>自定义的ACL默认Deny所有流量</li><li>子网关联：子网必须与某个ACL关联，如果不指定，默认关联到默认ACL上。</li><li>IP拦截：只能通过ACL实现IP拦截。安全组做不到IP拦截。</li><li>ACL与安全组是一对多的关系。给安全组执行新ACL会替换掉原来的ACL。</li><li>ACL包含一系列rule，按照序号从小到大执行。</li><li>ACL分为入站和出站两套规则，每套里面又分为允许和拒绝两种。</li><li>ACL是无状态的。它记不住曾经放行过的规则，所以入站出站都得配置一次。</li></ol><h2 id="Private-Communication-Using-VPC-Endpoints"><a href="#Private-Communication-Using-VPC-Endpoints" class="headerlink" title="Private Communication Using VPC Endpoints"></a>Private Communication Using VPC Endpoints</h2><p>AWS中的VPC Endpoint是什么？如何理解它？它有什么用？</p><p>AWS中的VPC Endpoint是一种连接VPC与AWS服务的方式，使得您的VPC内的资源可以私有地访问AWS服务，同时不需要通过Internet Gateway或NAT设备。</p><p>VPC Endpoint可以理解为一个虚拟的网络设备，它提供了一个接口，使得您的VPC内的资源可以直接与AWS服务通信，而无需通过Internet连接。这意味着您可以更加安全地连接到AWS服务，并且不需要在VPC和AWS服务之间暴露任何公共IP地址。</p><p>VPC Endpoint可以用于连接多种AWS服务，例如S3、DynamoDB、Kinesis等。使用VPC Endpoint可以提高安全性、可靠性和性能，并且可以减少网络数据传输的成本。<br>什么东西在VPC内？什么AWS服务在VPC之外？</p><p>在VPC内可以包含各种AWS资源，例如EC2实例、RDS数据库、Elasticache缓存、Lambda函数等。此外，您还可以在VPC内创建各种网络资源，例如子网、路由表、网络ACL等。通过将这些资源放置在VPC内，您可以更好地控制它们的安全性和网络连接。</p><p>AWS服务可以分为两类：一类是可以在VPC内使用的服务，例如S3、DynamoDB、Kinesis等；另一类是无法在VPC内使用的服务，例如Route 53、CloudFront等。对于无法在VPC内使用的服务，您需要通过Internet连接来访问它们。但是，AWS提供了一些安全性更高的连接方式，例如VPC Endpoint和VPN连接，使得您可以更加安全地连接到这些服务。<br>AWS中需要通过Interface Endpoint连接的服务包括：</p><p>Elastic Compute Cloud (EC2)<br>Relational Database Service (RDS)<br>Elastic Cache<br>Elastic Kubernetes Service (EKS)<br>DocumentDB<br>AWS PrivateLink<br>这些服务需要通过Interface Endpoint连接，因为它们是在VPC中运行的服务，需要使用私有IP地址进行通信。<br>AWS中需要通过Gateway Endpoint连接的服务包括：</p><p>Simple Storage Service (S3)<br>DynamoDB<br>这些服务需要通过Gateway Endpoint连接，因为它们是在AWS公共基础设施上运行的服务，无法直接使用私有IP地址进行通信。<br>AWS提供了两种类型的VPC Endpoint：Gateway类型和Interface类型。</p><p>Gateway类型的VPC Endpoint用于连接S3和DynamoDB这样的AWS服务。它们是通过VPC Endpoint连接到AWS服务的，但是在VPC Endpoint内部使用的是AWS公共IP地址。这种类型的VPC Endpoint可以用于连接多个AWS服务，但是不能用于连接在VPC中运行的服务。</p><p>Interface类型的VPC Endpoint用于连接在VPC中运行的服务，例如EC2、RDS和Elasticache等。它们使用了一个私有IP地址，可以直接将流量路由到VPC中的资源。这种类型的VPC Endpoint可以用于连接多种AWS服务，但是需要在每个服务上创建一个独立的VPC Endpoint。</p><p>因此，Gateway类型的VPC Endpoint适用于连接AWS服务，而Interface类型的VPC Endpoint适用于连接在VPC中运行的资源。<br>通过VPC Endpoint连接S3，而不是通过NAT连接S3.这里VPC Endpoint的类型是Gateway<br>VPC EP考点：</p><ol><li>想纯通过AWS内网连接AWS服务的时候使用</li><li>两种类型，接口和网关</li><li>网关类型支持S3和DynamoDB，仅此两种。</li></ol><h2 id="Building-Solutions-across-VPCs-with-Peering"><a href="#Building-Solutions-across-VPCs-with-Peering" class="headerlink" title="Building Solutions across VPCs with Peering"></a>Building Solutions across VPCs with Peering</h2><p>多VPCs的互联问题：<br>VPC Peering：<br>允许使用私有IP地址将VPC互联<br>实例的行为会像他们在同一子网一样<br>甚至可以跨账户将VPC互联<br>星型配置。不可传递。<br>可以跨区域Region互联<br>如图，必须建立直连，不能传递。<br>VPC Peering 考点：<br>1 允许使用private IP把VPC互联<br>2 传递互联不支持，不行<br>3 可以跨区域互联<br>4 CIDR 地址不能重叠（合理，毕竟可以私有IP通信）</p><h2 id="Network-Privacy-with-AWS-PrivateLink"><a href="#Network-Privacy-with-AWS-PrivateLink" class="headerlink" title="Network Privacy with AWS PrivateLink"></a>Network Privacy with AWS PrivateLink</h2><p>PrivateLink考点：<br>当有Peering VPC到数十个，上百个甚至上千个用户VPC的时候，考虑PrivateLink。<br>PrivateLink不需要VPC Peering，不需要路由表，不需要NAT网关，不需要互联网网关等等。<br>需要服务端VPC开启网络负载均衡器，需要客户端开启ENI弹性网络接口。<br>它区别与VPC Peering，它不会暴露整个VPC里的所有服务，应该是只会暴露需要的服务。<br>与互联网开放的区别是更安全，更好管理。</p><h2 id="Securing-Your-Network-with-VPN-CloudHub"><a href="#Securing-Your-Network-with-VPN-CloudHub" class="headerlink" title="Securing Your Network with VPN CloudHub"></a>Securing Your Network with VPN CloudHub</h2><p>AWS VPN CloudHub<br>如果有多个网站，每个网站有自己的VPN连接，可以使用AWS VPN CloudHub把这些site连接到一起。类似于VPC Peering，工作模式成为hub and spoke模型。<br>它低费率，易管理。尽管是在互联网上操作的，但是全程加密。<br>考试看到多个VPN相关的，考虑这个。</p><h2 id="Connecting-on-Premise-with-Direct-Connect"><a href="#Connecting-on-Premise-with-Direct-Connect" class="headerlink" title="Connecting on Premise with Direct Connect"></a>Connecting on Premise with Direct Connect</h2><p>VPN vs Direct Connect：<br>VPC也是私密通信。但是VPC traverse（遍历，横过）公网。VPC安全但是也很痛苦。<br>Direct Connect相比之下更加：<br>快，安全，可靠，可以支持很大很大的吞吐量<br>Direct Connect 考点：<br>把公司数据中心和AWS直接连接起来<br>很有用在高throughput workload的情况<br>想建立稳定可靠的安全传输，选它</p><h2 id="Simplifying-Networks-with-Transit-Gateway"><a href="#Simplifying-Networks-with-Transit-Gateway" class="headerlink" title="Simplifying Networks with Transit Gateway"></a>Simplifying Networks with Transit Gateway</h2><p>Transit Gateway考点：<br>类似于VPC Peering，也是hub and spoke（辐）结构<br>它作为一个中心，可以简化VPC之间连接的拓扑结构<br>支持Direct Connect和VPN<br>AWS服务中唯一支持多播的服务<br>可以使用路由表来控制VPC之间的路由关系</p><h2 id="5G-Networking-with-AWS-Wavelength"><a href="#5G-Networking-with-AWS-Wavelength" class="headerlink" title="5G Networking with AWS Wavelength"></a>5G Networking with AWS Wavelength</h2><p>AWS Wavelength:<br>暂时还没出现在考试中。<br>如过看到5G，超低延迟，边缘计算等字样，考虑AWS Wavelength</p><h2 id="VPC-Networking-Exam-Tips"><a href="#VPC-Networking-Exam-Tips" class="headerlink" title="VPC Networking Exam Tips"></a>VPC Networking Exam Tips</h2><p>考点：高可用NAT<br>当资源分布在多个AZ中时，NAT Gateway所在AZ如果down了，那其他AZ中的资源就无法访问网络了。<br>解决方案是在每个AZ中配置NAT Gateway，保证每个AZ中的资源使用同一个AZ中的NAT Gateway。<br>考点：<br>安全组是stateful的。让进则让出，无视出站；反之亦然。<br>考点：<br>IP黑名单通过Network ACL实现<br>考点：<br>VPC Endpoint保证你在AWS内部将服务互联。分为Interface和Gateway，其中Gateway只支持S3和DynamoDB这两个，原因是他俩是公网IP地址。Interface支持其他使用私有IP地服务。<br>考点：<br>PrivateLink是用来peering成百上千VPC的。它不需要VPC Peering&#x2F;Route Table&#x2F;NAT Gateway&#x2F;Internet Gateway，都不要。<br>它只要服务端的Network 负载均衡，以及客户端的ENI 弹性网络接口。<br>考点：<br>Transit Gateway。它是星型结构，用来把VPC，Direct Connect还有VPN都连接到一个点上，方便管理。支持多播。<br>考点：<br>VPN Hub，集中式管理所有VPN连接，方便VPN连接之间互联。</p><h1 id="Route-53"><a href="#Route-53" class="headerlink" title="Route 53"></a>Route 53</h1><h2 id="Route-53-Overview"><a href="#Route-53-Overview" class="headerlink" title="Route 53 Overview"></a>Route 53 Overview</h2><p>DNS是什么？<br>IPv4 vs IPv6<br>顶级域名<br>域名注册商<br>常用DNS记录类型<br>TTL是什么？<br>别名记录<br>路由策略<br>考点<br>DNS是什么呢？DNA就是把人类友好的字符串域名映射到IP地址的服务。<br>Top-Level Domain<br>顶级域名，指的是域名最后一个单词，像是com，cn，edu等等。<br>5个常用的域名注册商<br>domain.com<br>GoDaddy<br>Hoover<br>AWS<br>Namecheap<br>NS记录，Name Server记录，是当域名需要使用自己的DNS服务器来解析的时候，可以使用NS记录，将该域名指向自己的服务器。<br>图中示例，域名-顶级域名-NS记录-SOA</p><p>A记录:<br>域名翻译成IP地址<br>TTL:<br>Time to live. TTL越短,DNS刷新的就越频繁.<br>Canonical是一个词汇，可以用作形容词或名词。作为形容词，它表示“标准的”、“典范的”或“正式的”，通常用于描述某个特定领域中的标准或规范。作为名词，Canonical通常指代Linux发行版Ubuntu的公司Canonical Ltd。</p><p>例如，我们可以说：“这个网站提供了一个Canonical的定义”，这意味着这个网站提供了一个关于某个领域中的标准或规范的定义。又如：“Canonical公司是Ubuntu的开发商”，这意味着Canonical是Ubuntu的背后公司。<br>CNAME<br>Canonical Name<br>标准、典范名称<br>CNAME是用来从一个域名映射到另一个域名的。<br>Alias Record是AWS Route 53服务中的一种记录类型，因此它是AWS特有的。<br>与CNAME的区别在于Alias Records不走公网，所以对于AWS服务来说性能更好，更可靠。<br>而且Alias可以映射ip和域名，相当于结合了A记录和CNAME。</p><h2 id="Demo-Using-a-Simple-Routing-Policy"><a href="#Demo-Using-a-Simple-Routing-Policy" class="headerlink" title="Demo: Using a Simple Routing Policy"></a>Demo: Using a Simple Routing Policy</h2><p>Simple Routing Policy，配置多个IP则随机分配</p><h2 id="Demo-Using-a-Weighted-Routing-Policy"><a href="#Demo-Using-a-Weighted-Routing-Policy" class="headerlink" title="Demo: Using a Weighted Routing Policy"></a>Demo: Using a Weighted Routing Policy</h2><p>考点：<br>权重路由策略，可以设置权重<br>health check，可以检查每个记录的健康状态，如果fail则临时移除。可以设置SNS服务来提示fail的情况。</p><h2 id="Demo-Using-a-Failover-Routing-Policy"><a href="#Demo-Using-a-Failover-Routing-Policy" class="headerlink" title="Demo: Using a Failover Routing Policy"></a>Demo: Using a Failover Routing Policy</h2><p>在AWS EC2中的WebDMZ中，DMZ通常指的是Demilitarized Zone，即非军事区，是一种网络安全架构设计模式，用于在互联网和内部网络之间创建一道安全屏障，以保护内部网络中的敏感资源不受外部网络的攻击或入侵。在WebDMZ中，DMZ通常用于部署Web服务器，以便在互联网上提供服务，同时保护内部网络中的其他资源。<br>考点：<br>Failover Routing Policy：<br>涉及到Active和Passive，考虑failover。</p><h2 id="Demo-Using-a-Geolocation-Routing-Policy"><a href="#Demo-Using-a-Geolocation-Routing-Policy" class="headerlink" title="Demo: Using a Geolocation Routing Policy"></a>Demo: Using a Geolocation Routing Policy</h2><p>考点<br>Geolocation Routing Policy：<br>重点，当看到基于用户地理位置，考虑到本地化或者监管需求，但是与访问的延迟无关的情况，考虑这个。</p><h2 id="Demo-Using-a-Geoproximity-Routing-Policy"><a href="#Demo-Using-a-Geoproximity-Routing-Policy" class="headerlink" title="Demo: Using a Geoproximity Routing Policy"></a>Demo: Using a Geoproximity Routing Policy</h2><p>复杂，不常用的考点：<br>Geoproximity Routing Policy<br>基于用户位置和资源的地理位置。可以选择基于bias设置路由。必须基于Route 53 traffic flow来设置geoproximity routing。</p><h2 id="Demo-Using-a-Latency-Routing-Policy"><a href="#Demo-Using-a-Latency-Routing-Policy" class="headerlink" title="Demo: Using a Latency Routing Policy"></a>Demo: Using a Latency Routing Policy</h2><p>考点：<br>Latency Routing Policy<br>基于延迟的路由策略。<br>那就是哪儿延迟低就路由到哪里。</p><h2 id="Demo-Using-a-Multivalue-Answer-Routing-Policy"><a href="#Demo-Using-a-Multivalue-Answer-Routing-Policy" class="headerlink" title="Demo: Using a Multivalue Answer Routing Policy"></a>Demo: Using a Multivalue Answer Routing Policy</h2><p>Multivalue Answer Routing<br>多值路由<br>本质上是Simple Routing Policy加上了HC。分开写。</p><h1 id="Elastic-Load-Balancing-ELB"><a href="#Elastic-Load-Balancing-ELB" class="headerlink" title="Elastic Load Balancing (ELB)"></a>Elastic Load Balancing (ELB)</h1><h2 id="ELB-Overview"><a href="#ELB-Overview" class="headerlink" title="ELB Overview"></a>ELB Overview</h2><p>ELB概述<br>3种LB：<br>Application LB<br>Network LB<br>Classic LB</p><h2 id="Using-Application-Load-Balancers"><a href="#Using-Application-Load-Balancers" class="headerlink" title="Using Application Load Balancers"></a>Using Application Load Balancers</h2><p>Applicaton LB：<br>包含以下内容：<br>Listener：检查客户端请求状态<br>Rules，rule包含优先级，一个及以上的action和condition<br>Target Groups，路由的目标，每个TG要配置上HC；<br>Limitations，只支持HTTP和HTTPS<br>HTTPS</p><p>Network LB：<br>1 Layer4<br>2 机制性能<br>3 ALB不支持的协议，来NLB<br>4 NLB能解密流量，但是需要配置证书</p><p>Classic LB：<br>504意味着超时，考虑DB或者实例。<br>需要用户的IPv4地址的时候，可以使用X-Forwarded-For头<br>粘性session<br>Sticky Session可以保证用户持续的访问同一台EC2实例。<br>场景题目，当EC2实例down了，LB依然把流量转发到该EC2<br>解决上面的问题考虑disable SS。</p><p>ALB也可以开启Sticky Session，但是只能是TG层面的。</p><p>Deregistration Delay<br>注销延迟<br>打开注销延迟：保持连接，当EC2不healthy<br>关闭注销延迟：当你希望LB立即关闭连接到不健康实例，就关闭注销延迟。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇是AWS Certified Solution Architect Associate SAA-C03 笔记的第二部分，涵盖了EBS，DB，Route 53及ELB的内容。&lt;/p&gt;
&lt;p&gt;持续更新中…&lt;/p&gt;</summary>
    
    
    
    <category term="AWS" scheme="https://xqtony.github.io/categories/AWS/"/>
    
    
    <category term="原创" scheme="https://xqtony.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="AI辅助创作" scheme="https://xqtony.github.io/tags/AI%E8%BE%85%E5%8A%A9%E5%88%9B%E4%BD%9C/"/>
    
    <category term="AWS" scheme="https://xqtony.github.io/tags/AWS/"/>
    
    <category term="Cloud" scheme="https://xqtony.github.io/tags/Cloud/"/>
    
    <category term="云技术" scheme="https://xqtony.github.io/tags/%E4%BA%91%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Kafka初探</title>
    <link href="https://xqtony.github.io/2023/05/28/kafka/"/>
    <id>https://xqtony.github.io/2023/05/28/kafka/</id>
    <published>2023-05-28T12:17:39.529Z</published>
    <updated>2023-05-28T15:13:34.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kafka中哪些特性是基于Zookeeper开发的？哪些特性是独立的？"><a href="#Kafka中哪些特性是基于Zookeeper开发的？哪些特性是独立的？" class="headerlink" title="Kafka中哪些特性是基于Zookeeper开发的？哪些特性是独立的？"></a><code>Kafka</code>中哪些特性是基于<code>Zookeeper</code>开发的？哪些特性是独立的？</h2><span id="more"></span><p>Kafka中基于Zookeeper开发的特性包括：</p><ol><li>Broker注册和发现：Kafka Broker在启动时会向Zookeeper注册自己的信息，并在需要时从Zookeeper获取其他Broker的信息。</li><li>Topic和Partition的管理：Kafka的Topic和Partition信息都存储在Zookeeper中，Kafka Broker在启动时会从Zookeeper获取Topic和Partition的信息。</li><li>Consumer Group的协调：Kafka Consumer Group的协调也是通过Zookeeper实现的，每个Consumer Group会在Zookeeper上创建一个节点，用于存储Group的信息和状态。</li><li>Leader选举：Kafka的Partition会被分配给多个Broker，其中一个Broker会被选举为Partition的Leader，Leader负责处理读写请求。当Leader宕机时，Kafka会通过Zookeeper进行Leader选举。</li></ol><p>Kafka中独立的特性包括：</p><ol><li>Producer和Consumer的API：Kafka提供了Producer和Consumer的API，用于发送和接收消息。</li><li>消息存储：Kafka使用自己的存储引擎来存储消息，与Zookeeper无关。</li><li>消息复制：Kafka支持消息复制，当Broker宕机时，消息可以从备份的Broker中恢复。</li><li>消息压缩和批处理：Kafka支持对消息进行压缩和批处理，以提高传输效率。</li></ol><p>参考链接：</p><p><a href="https://aws.amazon.com/cn/msk/what-is-kafka/">什么是 Apache Kafka</a><br><a href="https://aws.amazon.com/cn/blogs/china/best-practices-for-running-apache-kafka-on-aws/">关于在 AWS 上运行 Apache Kafka 的最佳实践</a><br><a href="https://gitee.com/JackieWs/java2022/blob/master/docs/mq/Kafka%E6%94%AF%E6%8C%81%E7%99%BE%E4%B8%87%E7%BA%A7TPS%E7%9A%84%E7%A7%98%E5%AF%86%E9%83%BD%E8%97%8F%E5%9C%A8%E8%BF%99%E9%87%8C.md">Kafka支持百万级TPS的秘密都藏在这里</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzIwODI1OTk1Nw==&mid=2650322018&idx=1&sn=ff1d7be13158a9d1cbc02a6d9123e503&chksm=8f09ca78b87e436e023de69301b326a9541d51b94a0d57393cc766da9dfef40c9ccaf0fdbc0c&token=1553501157&lang=zh_CN#rd">支持百万级TPS，Kafka是怎么做到的？答案藏在这10张图里</a><br><a href="https://blog.csdn.net/duysh/article/details/116355977">图解 Kafka</a><br><a href="https://zhuanlan.zhihu.com/p/392568942">漫画：图解 Kafka，看本篇就足够啦</a><br><a href="https://zhuanlan.zhihu.com/p/442962047">超详细“零”基础kafka入门篇</a><br><a href="https://blog.csdn.net/qq_36918149/article/details/98471761">kafka是什么？</a><br><a href="https://kafka.apache.org/">APACHE KAFKA</a><br><a href="https://juejin.cn/post/6874957625998606344">Kafka宕机后不再高可用？探究Kafka高可用实现</a><br><a href="https://zhuanlan.zhihu.com/p/424546275">Kafka是什么？主要应用在什么场景?如何设计高可用？</a><br><a href="https://github.com/javaxiaokashow/JavaFaceNotes/blob/master/Kafka.md">Kafka</a><br><a href="https://blog.csdn.net/wangmx1993328/article/details/107725519">Kafka 安装部署、集群启动、命令行操作 与 可视化工具 Kafka Tool</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Kafka中哪些特性是基于Zookeeper开发的？哪些特性是独立的？&quot;&gt;&lt;a href=&quot;#Kafka中哪些特性是基于Zookeeper开发的？哪些特性是独立的？&quot; class=&quot;headerlink&quot; title=&quot;Kafka中哪些特性是基于Zookeeper开发的？哪些特性是独立的？&quot;&gt;&lt;/a&gt;&lt;code&gt;Kafka&lt;/code&gt;中哪些特性是基于&lt;code&gt;Zookeeper&lt;/code&gt;开发的？哪些特性是独立的？&lt;/h2&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://xqtony.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="二创" scheme="https://xqtony.github.io/tags/%E4%BA%8C%E5%88%9B/"/>
    
    <category term="AI辅助创作" scheme="https://xqtony.github.io/tags/AI%E8%BE%85%E5%8A%A9%E5%88%9B%E4%BD%9C/"/>
    
    <category term="Kafka" scheme="https://xqtony.github.io/tags/Kafka/"/>
    
    <category term="Zookeeper" scheme="https://xqtony.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>目标</title>
    <link href="https://xqtony.github.io/2023/05/28/todo/"/>
    <id>https://xqtony.github.io/2023/05/28/todo/</id>
    <published>2023-05-28T03:17:48.590Z</published>
    <updated>2023-06-26T17:01:32.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h1><p>罗列出需要掌握的技术知识点。考虑在GitHub上上线项目来实践。</p><span id="more"></span><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ul><li>Java虚拟机原理</li><li>Java高级特性和类库</li><li>Java网络与服务器编程</li><li>Java多线程编程</li><li>JVM调优</li><li>NIO、RPC框架</li></ul><h2 id="AWS"><a href="#AWS" class="headerlink" title="AWS"></a>AWS</h2><ul><li>SAA-C03</li><li>DVA-C02</li></ul><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><ul><li>Golang语言机制</li><li>开发工具的使用，定位和调试问题</li></ul><h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><ul><li>理解什么是分布式架构，精通主流框架原理</li><li>Spring Cloud</li><li>Dubbo</li><li>Zookeeper</li></ul><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><ul><li>MySQL</li><li>Redis</li><li>HBase</li><li>MongoDB</li><li>Kafka</li><li>ElasticSearch</li></ul><h2 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h2><ul><li>JS</li><li>JQuery</li><li>ReactJs</li><li>Vue</li></ul><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><ul><li>HTTP协议</li><li>缓存</li><li>序列化</li><li>RPC框架</li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul><li>Docker</li><li>K8s （含二次开发）</li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li>编写脚本bash shell</li><li>熟悉环境</li></ul><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><ul><li>DevOps概念</li><li>CI&#x2F;CD pipelines</li></ul><h2 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h2><ul><li>计算机网络</li><li>数据结构</li><li>操作系统</li><li>算法</li><li>设计模式</li></ul><h2 id="软实力"><a href="#软实力" class="headerlink" title="软实力"></a>软实力</h2><ul><li>技术钻研能力</li><li>分析问题解决问题</li><li>独立承担任务</li><li>系统进度把控</li><li>独立负责跨足项目</li><li>结果导向</li></ul><h2 id="代码风格及文档"><a href="#代码风格及文档" class="headerlink" title="代码风格及文档"></a>代码风格及文档</h2><ul><li>良好的编码习惯</li><li>技术文档编写能力</li><li>英语书面交流</li></ul><h2 id="没来得及整理的内容"><a href="#没来得及整理的内容" class="headerlink" title="没来得及整理的内容"></a>没来得及整理的内容</h2><p><a href="https://www.cnblogs.com/kuanglongblogs/p/11230250.html">https://www.cnblogs.com/kuanglongblogs/p/11230250.html</a></p><p><a href="https://gitee.com/yudaocode/SpringBoot-Labs">芋道源码 &#x2F; SpringBoot-Labs</a><br><a href="https://www.cnblogs.com/kuanglongblogs/p/11230250.html">java8 stream多字段排序</a><br><a href="https://www.yuque.com/xiatian-bsgny/lm0ec1/wqf8mn#qam2">国内顶级开源项目：芋道、ruoyi、JeecgBoot、pig、SpringBlade功能对比</a><br><a href="https://blog.csdn.net/duysh/article/details/116355977">图解 Kafka</a><br><a href="https://zhuanlan.zhihu.com/p/392568942">漫画：图解 Kafka，看本篇就足够啦</a><br><a href="https://zhuanlan.zhihu.com/p/442962047">超详细“零”基础kafka入门篇</a><br><a href="https://blog.csdn.net/qq_36918149/article/details/98471761">kafka是什么？</a><br><a href="https://kafka.apache.org/">APACHE KAFKA</a><br><a href="https://juejin.cn/post/6874957625998606344">Kafka宕机后不再高可用？探究Kafka高可用实现</a><br><a href="https://zhuanlan.zhihu.com/p/424546275">Kafka是什么？主要应用在什么场景?如何设计高可用？</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;待办事项&quot;&gt;&lt;a href=&quot;#待办事项&quot; class=&quot;headerlink&quot; title=&quot;待办事项&quot;&gt;&lt;/a&gt;待办事项&lt;/h1&gt;&lt;p&gt;罗列出需要掌握的技术知识点。考虑在GitHub上上线项目来实践。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>简单记录下GitHub SSH访问的配置</title>
    <link href="https://xqtony.github.io/2023/05/28/ssh%20git%20config/"/>
    <id>https://xqtony.github.io/2023/05/28/ssh%20git%20config/</id>
    <published>2023-05-28T03:17:48.590Z</published>
    <updated>2023-06-26T17:19:26.622Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现http方式pull和push都很容易出现下面的log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\xqkon\Documents\Work\xqtony.github.io&gt;git push</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/xqtony/xqtony.github.io.git/&#x27;</span>: Failed to connect to github.com port 443 after 21068 ms: Timed out</span><br></pre></td></tr></table></figure><span id="more"></span><p>找到的最可靠的方案是切换成SSH。</p><p>通过下面的命令生成公钥和私钥，邮箱记得替换成自己的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxx@xx.com&quot;</span></span><br></pre></td></tr></table></figure><p>设置成功之后可以测试连通性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>添加一下ssh方式访问，但是因为已经存在一个<code>origin</code>了，只能叫<code>origin_ssh</code>了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin_ssh git@github.com:xxxxxxxxxx.git</span><br><span class="line">git push -u origin_ssh master</span><br></pre></td></tr></table></figure><p>最好把<code>remote</code>的名字也修改了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list all remotes</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">git remote rename origin origin_http</span><br><span class="line"></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line">git remote rename origin_ssh origin</span><br><span class="line"></span><br><span class="line">git remote -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新发现可以直接删除掉原来的<code>remote</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></table></figure><p>然后重新添加就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:xxxxxxxxxx.git</span><br><span class="line">git branch --set-upstream-to=origin/main main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://blog.csdn.net/lun_hui_wu_qi/article/details/118785305">最新解决git拉取远程仓库失败问题：Failed to connect to github.com port 443: Timed out.</a><br><a href="https://blog.csdn.net/weixin_43987277/article/details/113467941">git使用——10.使用ssh方式推送git项目</a><br><a href="https://blog.csdn.net/q1302182594/article/details/52954575">通过SSH向GitHub push代码</a><br><a href="https://www.cnblogs.com/feipeng8848/p/12844456.html">git重命名远程名称</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近发现http方式pull和push都很容易出现下面的log：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C:&#92;Users&#92;xqkon&#92;Documents&#92;Work&#92;xqtony.github.io&amp;gt;git push&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: unable to access &lt;span class=&quot;string&quot;&gt;&amp;#x27;https://github.com/xqtony/xqtony.github.io.git/&amp;#x27;&lt;/span&gt;: Failed to connect to github.com port 443 after 21068 ms: Timed out&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Git" scheme="https://xqtony.github.io/categories/Git/"/>
    
    
    <category term="原创" scheme="https://xqtony.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="git" scheme="https://xqtony.github.io/tags/git/"/>
    
    <category term="github" scheme="https://xqtony.github.io/tags/github/"/>
    
    <category term="ssh" scheme="https://xqtony.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>区分几个reverse方法</title>
    <link href="https://xqtony.github.io/2023/05/26/reverses/"/>
    <id>https://xqtony.github.io/2023/05/26/reverses/</id>
    <published>2023-05-25T23:24:08.374Z</published>
    <updated>2023-05-26T00:31:07.034Z</updated>
    
    <content type="html"><![CDATA[<p>下列的几个<code>reverse</code>你能分清楚吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Comparator.reversed();</span><br><span class="line">Comparator.reverseOrder();</span><br><span class="line">Collections.reverse();</span><br><span class="line">Collections.reverseOrder();</span><br></pre></td></tr></table></figure><span id="more"></span><p>来看看源码：</p><ol><li><p><code>Comparator.reversed()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> Comparator&lt;T&gt; <span class="title function_">reversed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.reverseOrder(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure><p>返回一个比较器，强制该比较器的相反顺序。</p></li><li><p><code>Comparator.reverseOrder</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; Comparator&lt;T&gt; <span class="title function_">reverseOrder</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> Collections.reverseOrder();</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>返回一个与 自然排序相反的比较器。</p></li><li><p><code>Collections.reverse()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(List&lt;?&gt; list)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size();</span><br><span class="line">    <span class="keyword">if</span> (size &lt; REVERSE_THRESHOLD || list <span class="keyword">instanceof</span> RandomAccess) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, mid=size&gt;&gt;<span class="number">1</span>, j=size-<span class="number">1</span>; i&lt;mid; i++, j--)</span><br><span class="line">            swap(list, i, j);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">fwd</span> <span class="operator">=</span> list.listIterator();</span><br><span class="line">        <span class="type">ListIterator</span> <span class="variable">rev</span> <span class="operator">=</span> list.listIterator(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, mid=list.size()&gt;&gt;<span class="number">1</span>; i&lt;mid; i++) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">tmp</span> <span class="operator">=</span> fwd.next();</span><br><span class="line">            fwd.set(rev.previous());</span><br><span class="line">            rev.set(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(List&lt;?&gt; list, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">List</span> <span class="variable">l</span> <span class="operator">=</span> list;</span><br><span class="line">    l.set(i, l.set(j, l.get(i)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法反转指定列表中元素的顺序。</p></li><li><p><code>Collections.reverseOrder()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Comparator&lt;T&gt; <span class="title function_">reverseOrder</span><span class="params">(Comparator&lt;T&gt; cmp)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Comparator&lt;T&gt;) ReverseComparator.REVERSE_ORDER;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp == ReverseComparator.REVERSE_ORDER) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Comparator&lt;T&gt;) Comparators.NaturalOrderComparator.INSTANCE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp == Comparators.NaturalOrderComparator.INSTANCE) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Comparator&lt;T&gt;) ReverseComparator.REVERSE_ORDER;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp <span class="keyword">instanceof</span> ReverseComparator2) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((ReverseComparator2&lt;T&gt;) cmp).cmp;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReverseComparator2</span>&lt;&gt;(cmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此方法返回一个比较器，它强制指定比较器的反向排序。当不指定比较器的时候，返回<code>ReverseComparator.REVERSE_ORDER</code>。那顺便看下<code>ReverseComparator</code>的实现：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReverseComparator</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Comparable&lt;Object&gt;&gt;, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@java</span>.io.Serial</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7207038068494060240L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ReverseComparator</span> <span class="variable">REVERSE_ORDER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReverseComparator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Comparable&lt;Object&gt; c1, Comparable&lt;Object&gt; c2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> c2.compareTo(c1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@java</span>.io.Serial</span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123; <span class="keyword">return</span> Collections.reverseOrder(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Comparator&lt;Comparable&lt;Object&gt;&gt; <span class="title function_">reversed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Comparator.naturalOrder();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可见<code>ReverseComparator.REVERSE_ORDER</code>排序的顺序与自然排序刚好相反。</p><p>总结：</p><ul><li><code>Comparator.reversed()</code>: 无参数。底层调用<code>Collections.reverseOrder(this)</code>。返回一个与调用者比较器相反顺序的新的比较器。</li><li><code>Comparator.reverseOrder()</code>: 无参数。底层调用<code>Collections.reverseOrder()</code>。返回一个与<em>自然排序</em>相反的比较器。</li><li><code>Collections.reverse()</code>: 接受一个List类型参数，反转该List。无返回值。</li><li><code>Collections.reverseOrder()</code>: 无参调用时，返回一个与自然排序相反的比较器；有参调用时，返回与参数相反的比较器。</li></ul><p>参考：</p><p><a href="https://blog.csdn.net/Madoka_Homura/article/details/107382799">Java Comparator使用指南 —- 看这一篇就够了</a><br><a href="https://blog.csdn.net/qq_31635851/article/details/120285642">Java 8 新特性】Java Comparator.reverseOrder | 倒序排序-静态方法</a><br><a href="https://blog.csdn.net/qq_35029061/article/details/86655957">深入学习java源码之Comparator.reverseOrder()与Comparator.compare ()</a><br><a href="https://w3schools.cn/javautil/java_util_collections.html">Java.util.Collections 类</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;下列的几个&lt;code&gt;reverse&lt;/code&gt;你能分清楚吗？&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Comparator.reversed();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Comparator.reverseOrder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Collections.reverse();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Collections.reverseOrder();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java高级特性和类库" scheme="https://xqtony.github.io/categories/Java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E5%92%8C%E7%B1%BB%E5%BA%93/"/>
    
    
    <category term="Java" scheme="https://xqtony.github.io/tags/Java/"/>
    
    <category term="原创" scheme="https://xqtony.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
    <category term="Collections" scheme="https://xqtony.github.io/tags/Collections/"/>
    
    <category term="Comparator" scheme="https://xqtony.github.io/tags/Comparator/"/>
    
    <category term="reverse" scheme="https://xqtony.github.io/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>Lambda中比较器Comparator的使用</title>
    <link href="https://xqtony.github.io/2023/05/26/lambda%20in%20Comparator/"/>
    <id>https://xqtony.github.io/2023/05/26/lambda%20in%20Comparator/</id>
    <published>2023-05-25T22:15:31.551Z</published>
    <updated>2023-05-25T23:25:00.229Z</updated>
    
    <content type="html"><![CDATA[<p>如果你赶时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.sort((Developer o1, Developer o2) -&gt; Integer.compare(o1.getAge(), o2.getAge()));   <span class="comment">// 显式类型</span></span><br><span class="line">listDevs.sort((o1, o2) -&gt; Integer.compare(o1.getAge(), o2.getAge()));                   <span class="comment">// 隐式类型，效果一致</span></span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p>先来看下典型的比较器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Developer&gt; byName = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Developer o1, Developer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getName().compareTo(o2.getName()); <span class="comment">// name是String类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Java8</code>中引入了<code>Lambda</code>表达式，比较器可以改成下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Developer&gt; byName = (Developer o1, Developer o2) -&gt; o1.getName().compareTo(o2.getName());</span><br></pre></td></tr></table></figure><p>对于<em>数组</em>，<code>Arrays.sort()</code>提供了传入比较器的重载方法，对于<em>列表</em>，<code>Collections.sort()</code>也提供了传入比较器的重载方法。</p><h1 id="二、使用实例"><a href="#二、使用实例" class="headerlink" title="二、使用实例"></a>二、使用实例</h1><h2 id="2-1-通过new-新建比较器"><a href="#2-1-通过new-新建比较器" class="headerlink" title="2.1 通过new 新建比较器"></a>2.1 通过<code>new</code> 新建比较器</h2><p>假如我们要通过Developer 对象的年龄进行排序，通常情况下我们使用Collections.sort，new个匿名Comparator 类，类似下面这种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSorting</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Developer&gt; listDevs = getDevelopers();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Before Sort&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Developer developer : listDevs) &#123;</span><br><span class="line">            System.out.println(developer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sort by age</span></span><br><span class="line">        Collections.sort(listDevs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Developer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Developer o1, Developer o2)</span> &#123;</span><br><span class="line">                <span class="comment">// return o1.getAge() - o2.getAge();</span></span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1.getAge(), o2.getAge());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;After Sort&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Developer developer : listDevs) &#123;</span><br><span class="line">            System.out.println(developer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Developer&gt; <span class="title function_">getDevelopers</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Developer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Developer&gt;();</span><br><span class="line"></span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">Developer</span>(<span class="string">&quot;ricky&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;70000&quot;</span>), <span class="number">33</span>));</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">Developer</span>(<span class="string">&quot;alvin&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;80000&quot;</span>), <span class="number">20</span>));</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">Developer</span>(<span class="string">&quot;jason&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100000&quot;</span>), <span class="number">10</span>));</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">Developer</span>(<span class="string">&quot;iris&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;170000&quot;</span>), <span class="number">55</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Before Sort</span><br><span class="line">Developer [name=ricky, salary=70000, age=33]</span><br><span class="line">Developer [name=alvin, salary=80000, age=20]</span><br><span class="line">Developer [name=jason, salary=100000, age=10]</span><br><span class="line">Developer [name=iris, salary=170000, age=55]</span><br><span class="line"></span><br><span class="line">After Sort</span><br><span class="line">Developer [name=jason, salary=100000, age=10]</span><br><span class="line">Developer [name=alvin, salary=80000, age=20]</span><br><span class="line">Developer [name=ricky, salary=70000, age=33]</span><br><span class="line">Developer [name=iris, salary=170000, age=55]</span><br></pre></td></tr></table></figure><p>当比较规则发生变化时，你需要再次new个匿名Comparator 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort by age</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Developer o1, Developer o2)</span> &#123;</span><br><span class="line">        <span class="comment">// Tony updated: 尽管几乎不可能溢出，但存在这种可能性</span></span><br><span class="line">        <span class="comment">// return o1.getAge() - o2.getAge();</span></span><br><span class="line">        <span class="comment">// 参考这篇博客：https://xqtony.github.io/2023/05/26/compareTo/</span></span><br><span class="line">        <span class="comment">// 应该使用下面的实现方法：</span></span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1.getAget(), o2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort by name</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Developer o1, Developer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort by salary</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Developer o1, Developer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getSalary().compareTo(o2.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样也可以，不过你会不会觉得这样有点怪，因为其实不同的只有一行代码而已，但是却需要重复写很多代码？</p><h2 id="2-2-通过Lambda表达式新建比较器"><a href="#2-2-通过Lambda表达式新建比较器" class="headerlink" title="2.2 通过Lambda表达式新建比较器"></a>2.2 通过Lambda表达式新建比较器</h2><p>在<code>java8</code>中，<code>List</code>接口直接提供了排序方法， 所以你不需要使用<code>Collections.sort：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//List.sort() since Java 8</span></span><br><span class="line">listDevs.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Developer o1, Developer o2)</span> &#123;</span><br><span class="line">        <span class="comment">// Tony：原文中存在两个问题：</span></span><br><span class="line">        <span class="comment">// 1. 溢出风险</span></span><br><span class="line">        <span class="comment">// 2. 顺序写反了</span></span><br><span class="line">        <span class="comment">// return o2.getAge() - o1.getAge();</span></span><br><span class="line">        <span class="comment">// Tony:</span></span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1.getAget(), o2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Lambda</code>改写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSorting</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Developer&gt; listDevs = getDevelopers();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Before Sort&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Developer developer : listDevs) &#123;</span><br><span class="line">            System.out.println(developer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;After Sort&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Tony： 原文使用了下面的实现</span></span><br><span class="line">        <span class="comment">// listDevs.sort((Developer o1, Developer o2)-&gt;o1.getAge()-o2.getAge());</span></span><br><span class="line">        listDevs.sort((Developer o1, Developer o2) -&gt; Integer.compare(o1.getAge(), o2.getAge()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java 8 lambda feature</span></span><br><span class="line">        listDevs.forEach((developer)-&gt;System.out.println(developer));</span><br><span class="line">        <span class="comment">// Tony注：</span></span><br><span class="line">        <span class="comment">// listDevs.forEach(System.out::println);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Developer&gt; <span class="title function_">getDevelopers</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Developer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Developer&gt;();</span><br><span class="line"></span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">Developer</span>(<span class="string">&quot;ricky&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;70000&quot;</span>), <span class="number">33</span>));</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">Developer</span>(<span class="string">&quot;alvin&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;80000&quot;</span>), <span class="number">20</span>));</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">Developer</span>(<span class="string">&quot;jason&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;100000&quot;</span>), <span class="number">10</span>));</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">Developer</span>(<span class="string">&quot;iris&quot;</span>, <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;170000&quot;</span>), <span class="number">55</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Before Sort</span><br><span class="line">Developer [name=ricky, salary=70000, age=33]</span><br><span class="line">Developer [name=alvin, salary=80000, age=20]</span><br><span class="line">Developer [name=jason, salary=100000, age=10]</span><br><span class="line">Developer [name=iris, salary=170000, age=55]</span><br><span class="line"></span><br><span class="line">After Sort</span><br><span class="line">Developer [name=jason, salary=100000, age=10]</span><br><span class="line">Developer [name=alvin, salary=80000, age=20]</span><br><span class="line">Developer [name=ricky, salary=70000, age=33]</span><br><span class="line">Developer [name=iris, salary=170000, age=55]</span><br></pre></td></tr></table></figure><h2 id="2-3-更多的例子"><a href="#2-3-更多的例子" class="headerlink" title="2.3 更多的例子"></a>2.3 更多的例子</h2><p>根据年龄：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//sort by age</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Developer o1, Developer o2)</span> &#123;</span><br><span class="line">        <span class="comment">// return o1.getAge() - o2.getAge();</span></span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1.getAget(), o2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line"><span class="comment">// Tony 注：同样的问题</span></span><br><span class="line"><span class="comment">// listDevs.sort((Developer o1, Developer o2)-&gt;o1.getAge()-o2.getAge());</span></span><br><span class="line">listDevs.sort((Developer o1, Developer o2) -&gt; Integer.compare(o1.getAge(), o2.getAge()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda, valid, parameter type is optional</span></span><br><span class="line"><span class="comment">// Tony 注：同样的问题</span></span><br><span class="line"><span class="comment">// listDevs.sort((o1, o2)-&gt;o1.getAge()-o2.getAge());</span></span><br><span class="line">listDevs.sort((o1, o2) -&gt; Integer.compare(o1.getAge(), o2.getAge()));</span><br></pre></td></tr></table></figure><p>根据名字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort by name</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Developer o1, Developer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getName().compareTo(o2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line">listDevs.sort((Developer o1, Developer o2)-&gt;o1.getName().compareTo(o2.getName()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line">listDevs.sort((o1, o2)-&gt;o1.getName().compareTo(o2.getName()));</span><br></pre></td></tr></table></figure><p>根据薪水：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sort by salary</span></span><br><span class="line">Collections.sort(listDevs, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Developer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Developer o1, Developer o2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> o1.getSalary().compareTo(o2.getSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line"><span class="comment">// Tony注：使用compareTo()同样可以，本质上底层还是在调用compare()方法</span></span><br><span class="line">listDevs.sort((Developer o1, Developer o2)-&gt;o1.getSalary().compareTo(o2.getSalary()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda</span></span><br><span class="line">listDevs.sort((o1, o2)-&gt;o1.getSalary().compareTo(o2.getSalary()))</span><br></pre></td></tr></table></figure><p>从小到大排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Developer&gt; salaryComparator = (o1, o2)-&gt;o1.getSalary().compareTo(o2.getSalary());</span><br><span class="line">listDevs.sort(salaryComparator);</span><br></pre></td></tr></table></figure><p>从大到小倒序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Developer&gt; salaryComparator = (o1, o2)-&gt;o1.getSalary().compareTo(o2.getSalary());</span><br><span class="line">listDevs.sort(salaryComparator.reversed());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tony 注：掘金版本给出了下面的实现：</span></span><br><span class="line"><span class="comment">// Comparator&lt;Developer&gt; salaryComparator = (o1, o2)-&gt;o2.getSalary().compareTo(o1.getSalary());</span></span><br><span class="line"><span class="comment">// 但是实际上根据Comparator接口中compare函数的定义，当o1的值小于o2，应该返回负值。因此上面这行的实现违反设计原则的，并不推荐。</span></span><br></pre></td></tr></table></figure><p>本文虽然大部分是转载，但关于<code>Integer</code>类型的数值比较防止溢出问题，以及对<code>compare()</code>方法的设计均有重要注解，因此归类为二创。</p><p>参考：<br><a href="https://blog.csdn.net/u014042066/article/details/76248692">java8-Lambda中比较器Comparator的使用 - CSDN</a><br><a href="https://juejin.cn/post/6898898464252690446">java8-Lambda中比较器Comparator的使用 - 掘金</a><br><a href="https://blog.csdn.net/y506798278/article/details/104503588">Java8 Lambda表达式（二）System.out::println与Lambda表达式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如果你赶时间：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;list.sort((Developer o1, Developer o2) -&amp;gt; Integer.compare(o1.getAge(), o2.getAge()));   &lt;span class=&quot;comment&quot;&gt;// 显式类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;listDevs.sort((o1, o2) -&amp;gt; Integer.compare(o1.getAge(), o2.getAge()));                   &lt;span class=&quot;comment&quot;&gt;// 隐式类型，效果一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Java高级特性和类库" scheme="https://xqtony.github.io/categories/Java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E5%92%8C%E7%B1%BB%E5%BA%93/"/>
    
    
    <category term="compare" scheme="https://xqtony.github.io/tags/compare/"/>
    
    <category term="Java" scheme="https://xqtony.github.io/tags/Java/"/>
    
    <category term="二创" scheme="https://xqtony.github.io/tags/%E4%BA%8C%E5%88%9B/"/>
    
    <category term="Comparator" scheme="https://xqtony.github.io/tags/Comparator/"/>
    
    <category term="Lambda" scheme="https://xqtony.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>比较Collections.sort()与Arrays.sort()</title>
    <link href="https://xqtony.github.io/2023/05/26/two%20sort/"/>
    <id>https://xqtony.github.io/2023/05/26/two%20sort/</id>
    <published>2023-05-25T22:04:40.531Z</published>
    <updated>2023-05-25T23:23:52.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Collections-sort-与-Arrays-sort-的异同？"><a href="#Collections-sort-与-Arrays-sort-的异同？" class="headerlink" title="Collections.sort() 与 Arrays.sort() 的异同？"></a><code>Collections.sort()</code> 与 <code>Arrays.sort()</code> 的异同？</h1><p><code>Collections.sort()</code> 和 <code>Arrays.sort()</code> 都是 Java 中用于排序的方法，它们的异同如下：</p><span id="more"></span><ol><li><p>参数类型不同：<code>Collections.sort()</code> 方法接受 List 类型的参数，而 <code>Arrays.sort()</code> 方法接受数组类型的参数。</p></li><li><p>底层实现不同：<code>Collections.sort()</code> 方法使用的是归并排序（Merge Sort）算法，而 <code>Arrays.sort()</code> 方法使用的是快速排序（Quick Sort）算法。</p></li><li><p>排序稳定性不同：<code>Collections.sort()</code> 方法是稳定排序，即对于相等的元素，排序前后它们的相对位置不会发生改变。而 <code>Arrays.sort()</code> 方法是不稳定排序，即对于相等的元素，排序前后它们的相对位置可能会发生改变。</p></li><li><p>性能表现不同：<code>Arrays.sort()</code> 方法在大多数情况下比 <code>Collections.sort()</code> 方法性能更好，因为它对原始数据进行排序，不需要进行额外的包装和拆包操作。</p></li></ol><p>综上所述，如果需要对 List 进行排序，应该使用 <code>Collections.sort()</code> 方法；而如果需要对数组进行排序，应该使用 <code>Arrays.sort()</code> 方法。</p><p>但需要注意的是，<code>Arrays.sort()</code> 方法和<code>Collections.sort()</code> 方法在排序时都可能会改变原始对象内元素的顺序，所以在使用前需要备份。</p><p>另外注意，使用<code>Collections.sort()</code>时，被排序列表中的元素必须实现<code>Comparable</code>接口中的<code>compareTo</code>方法。</p><p>参考：<br><a href="https://blog.csdn.net/qq_23179075/article/details/78753136">Java中Collections.sort()的使用!</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Collections-sort-与-Arrays-sort-的异同？&quot;&gt;&lt;a href=&quot;#Collections-sort-与-Arrays-sort-的异同？&quot; class=&quot;headerlink&quot; title=&quot;Collections.sort() 与 Arrays.sort() 的异同？&quot;&gt;&lt;/a&gt;&lt;code&gt;Collections.sort()&lt;/code&gt; 与 &lt;code&gt;Arrays.sort()&lt;/code&gt; 的异同？&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Collections.sort()&lt;/code&gt; 和 &lt;code&gt;Arrays.sort()&lt;/code&gt; 都是 Java 中用于排序的方法，它们的异同如下：&lt;/p&gt;</summary>
    
    
    
    <category term="Java高级特性和类库" scheme="https://xqtony.github.io/categories/Java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E5%92%8C%E7%B1%BB%E5%BA%93/"/>
    
    
    <category term="Java" scheme="https://xqtony.github.io/tags/Java/"/>
    
    <category term="Collections" scheme="https://xqtony.github.io/tags/Collections/"/>
    
    <category term="Arrays" scheme="https://xqtony.github.io/tags/Arrays/"/>
    
    <category term="sort" scheme="https://xqtony.github.io/tags/sort/"/>
    
    <category term="AI辅助创作" scheme="https://xqtony.github.io/tags/AI%E8%BE%85%E5%8A%A9%E5%88%9B%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>比较Comparator与Comparable接口</title>
    <link href="https://xqtony.github.io/2023/05/26/comparable%20vs%20comparator/"/>
    <id>https://xqtony.github.io/2023/05/26/comparable%20vs%20comparator/</id>
    <published>2023-05-25T21:54:15.297Z</published>
    <updated>2023-05-25T23:34:57.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单比较下Comparator与Comparable接口"><a href="#简单比较下Comparator与Comparable接口" class="headerlink" title="简单比较下Comparator与Comparable接口"></a>简单比较下<code>Comparator</code>与<code>Comparable</code>接口</h2><p><code>Comparator</code> 和 <code>Comparable</code> 都是 <code>Java</code> 中用于比较对象大小的接口，但它们有以下区别：</p><span id="more"></span><ul><li><p>接口位置不同：<code>Comparable</code> 接口位于 <code>java.lang</code> 包中，而 <code>Comparator</code> 接口位于 <code>java.util</code> 包中。</p></li><li><p>实现方式不同：实现 <code>Comparable</code> 接口的类需要重写 <code>compareTo()</code> 方法，而实现 <code>Comparator</code> 接口的类需要重写 <code>compare()</code> 方法。</p></li><li><p>使用场景不同：实现 <code>Comparable</code> 接口的类通常用于已经有一定顺序的情况下，例如对整数或字符串进行排序。而实现 <code>Comparator</code> 接口的类通常用于需要动态指定排序方式的情况下，例如对自定义对象进行排序。</p></li><li><p>排序方式不同：<code>Comparable</code> 接口是内部比较器，它定义了对象的自然顺序，即对象本身就有了固定的比较规则。而 <code>Comparator</code> 接口是外部比较器，它允许用户根据需要指定不同的比较规则。</p></li></ul><p>综上所述，<code>Comparable</code> 接口适用于已经有一定顺序的情况下，而 <code>Comparator</code> 接口适用于需要动态指定排序方式的情况下。</p><h2 id="以下是-Comparable-和-Comparator-的用法实例："><a href="#以下是-Comparable-和-Comparator-的用法实例：" class="headerlink" title="以下是 Comparable 和 Comparator 的用法实例："></a>以下是 Comparable 和 Comparator 的用法实例：</h2><p>Comparable 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Person other)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.age, other.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个 <code>Person</code> 类，并实现了 <code>Comparable</code> 接口。在 <code>compareTo()</code> 方法中，我们使用 <code>Integer.compare()</code> 方法比较了两个 <code>Person</code> 对象的年龄大小关系，从而定义了 <code>Person</code> 对象的自然顺序。这样，我们就可以在使用 <code>Collections.sort()</code> 或 <code>Arrays.sort()</code> 方法时，直接对 &#96;Person 对象进行排序。</p><p>Comparator 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonCompartor</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Person&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Person p1, Person p2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(p1.getAge(), p2.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Person[] people=<span class="keyword">new</span> <span class="title class_">Person</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tony&quot;</span>, <span class="number">20</span>),<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Xiangqi&quot;</span>, <span class="number">10</span>)&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Person person : people)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(person.getName()+<span class="string">&quot;:&quot;</span>+person.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(people,<span class="keyword">new</span> <span class="title class_">PersonCompartor</span>());</span><br><span class="line">        System.out.println(<span class="string">&quot;\n排序后&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Person person : people)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(person.getName()+<span class="string">&quot;:&quot;</span>+person.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个例子中，我们同样定义了一个 <code>Person</code> 类，但没有实现 <code>Comparable</code> 接口。然后，我们创建了一个 <code>PersonComparator</code> 类，实现了 <code>Comparator</code> 接口，并重写了 <code>compare()</code> 方法。在 <code>compare()</code> 方法中，我们比较了两个 <code>Person</code> 对象的年龄大小关系，从而定义了 <code>Person</code> 对象的比较规则。这样，我们就可以在使用 <code>Collections.sort()</code> 或 <code>Arrays.sort()</code> 方法时，使用 <code>PersonComparator</code> 对象进行排序。</p><p>参考文献：</p><p><a href="https://www.cnblogs.com/xujian2014/p/5215082.html">Java中Comparable和Comparator区别小结</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简单比较下Comparator与Comparable接口&quot;&gt;&lt;a href=&quot;#简单比较下Comparator与Comparable接口&quot; class=&quot;headerlink&quot; title=&quot;简单比较下Comparator与Comparable接口&quot;&gt;&lt;/a&gt;简单比较下&lt;code&gt;Comparator&lt;/code&gt;与&lt;code&gt;Comparable&lt;/code&gt;接口&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Comparator&lt;/code&gt; 和 &lt;code&gt;Comparable&lt;/code&gt; 都是 &lt;code&gt;Java&lt;/code&gt; 中用于比较对象大小的接口，但它们有以下区别：&lt;/p&gt;</summary>
    
    
    
    <category term="Java高级特性和类库" scheme="https://xqtony.github.io/categories/Java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E5%92%8C%E7%B1%BB%E5%BA%93/"/>
    
    
    <category term="compareTo" scheme="https://xqtony.github.io/tags/compareTo/"/>
    
    <category term="compare" scheme="https://xqtony.github.io/tags/compare/"/>
    
    <category term="Java" scheme="https://xqtony.github.io/tags/Java/"/>
    
    <category term="AI辅助创作" scheme="https://xqtony.github.io/tags/AI%E8%BE%85%E5%8A%A9%E5%88%9B%E4%BD%9C/"/>
    
    <category term="Comparator" scheme="https://xqtony.github.io/tags/Comparator/"/>
    
    <category term="Comparable" scheme="https://xqtony.github.io/tags/Comparable/"/>
    
  </entry>
  
  <entry>
    <title>浅谈compareTo()方法</title>
    <link href="https://xqtony.github.io/2023/05/26/compareTo/"/>
    <id>https://xqtony.github.io/2023/05/26/compareTo/</id>
    <published>2023-05-25T20:19:45.560Z</published>
    <updated>2023-05-25T22:51:37.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下面这段代码使用了-compareTo-方法，有问题吗？"><a href="#下面这段代码使用了-compareTo-方法，有问题吗？" class="headerlink" title="下面这段代码使用了 compareTo() 方法，有问题吗？"></a>下面这段代码使用了 <code>compareTo()</code> 方法，有问题吗？</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id - emp.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用减法看起来合乎逻辑，但实际上隐藏了溢出的问题。</p><span id="more"></span><p>当我们需要按照一定的规则进行排序的时候，通常要实现 <code>Comparable</code> 接口，并实现 <code>compareTo</code> 方法，规则如下：</p><p>1）如果当前对象小于另外一个对象，则 <code>compareTo</code> 方法必须返回负数；如果当前对象大于另外一个对象，则必须返回正数；如果两个对象相等，则返回零。</p><p>2）通常来说，<code>compareTo</code> 方法必须和 <code>equals</code> 方法一致，如果两个对象通过 equals 方法判断的结果为 <code>true</code>，那么 <code>compareTo</code> 必须返回零。</p><p>不过，JDK 中有一个反例，就是 <code>BigDecimal</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2.0&quot;</span>);</span><br><span class="line"><span class="type">BigDecimal</span> <span class="variable">bd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;2.00&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;equals: &quot;</span> + bd1.equals(bd2));</span><br><span class="line">System.out.println(<span class="string">&quot;compareTo: &quot;</span> + bd1.compareTo(bd2));</span><br></pre></td></tr></table></figure><p>输出结果如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">equals: <span class="literal">false</span></span><br><span class="line">compareTo: 0</span><br></pre></td></tr></table></figure><p>这是因为 <code>JDK</code> 认为 <code>2.0</code> 和 <code>2.00</code> 的精度不一样，所以不能 <code>equals</code>，但值确实是相等的。</p><p>3）不能使用减法来比较整数值，因为减法的结果可能溢出。应该使用 <code>Integer.compareTo()</code> 来进行比较。如果你想通过减法操作来提高性能，必须得确保两个操作数是正整数，或者确保两者相差的值小于 <code>Integer.MAX_VALUE</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompareDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(Integer.MIN_VALUE));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(Integer.MAX_VALUE));</span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id - emp.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的输出结果如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Employee&#123;<span class="built_in">id</span>=1&#125;, Employee&#123;<span class="built_in">id</span>=2147483647&#125;, Employee&#123;<span class="built_in">id</span>=-2147483648&#125;]</span><br></pre></td></tr></table></figure><p>排序就乱了。因为 <code>Integer.MIN_VALUE - 1</code> 变成了正数 <code>2147483647</code>。</p><p>回到最开始的问题，正确的写法应该是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> Integer.valueOf(<span class="built_in">this</span>.id).compareTo(emp.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，<code>Integer.compareTo()</code>底层是通过调用<code>Integer.compare()</code>方法实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Integer anotherInteger)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> compare(<span class="built_in">this</span>.value, anotherInteger.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (x &lt; y) ? -<span class="number">1</span> : ((x == y) ? <span class="number">0</span> : <span class="number">1</span>); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>所以上面的问题可以重写为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(<span class="built_in">this</span>.id, emp.id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，<code>String</code>类型只有<code>compareTo</code>方法，而没有<code>compare</code>方法。给出源代码进行参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(String anotherString)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> value.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> anotherString.value.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lim</span> <span class="operator">=</span> Math.min(len1, len2);</span><br><span class="line">    <span class="type">char</span> v1[] = value;</span><br><span class="line">    <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; lim) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> v1[k];</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> v2[k];</span><br><span class="line">        <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">            <span class="keyword">return</span> c1 - c2;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len1 - len2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见<code>String</code>类型不需要<code>compare</code>方法。</p><p>基于<a href="https://mp.weixin.qq.com/s/oBDrFnuk1lbfuNHkrhAC5w">这10道基础Java面试题，虐哭了多少人</a>改写。</p><p>参考：</p><p><a href="https://blog.csdn.net/tp19970424/article/details/84962584">List集合排序Collections.sort()方法的一个容易忽略的小问题</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;下面这段代码使用了-compareTo-方法，有问题吗？&quot;&gt;&lt;a href=&quot;#下面这段代码使用了-compareTo-方法，有问题吗？&quot; class=&quot;headerlink&quot; title=&quot;下面这段代码使用了 compareTo() 方法，有问题吗？&quot;&gt;&lt;/a&gt;下面这段代码使用了 &lt;code&gt;compareTo()&lt;/code&gt; 方法，有问题吗？&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Comparable&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;Employee&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;emp&lt;/span&gt; &lt;span class=&quot;operator&quot;&gt;=&lt;/span&gt; (Employee) o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.id - emp.id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用减法看起来合乎逻辑，但实际上隐藏了溢出的问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Java高级特性和类库" scheme="https://xqtony.github.io/categories/Java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E5%92%8C%E7%B1%BB%E5%BA%93/"/>
    
    
    <category term="compareTo" scheme="https://xqtony.github.io/tags/compareTo/"/>
    
    <category term="compare" scheme="https://xqtony.github.io/tags/compare/"/>
    
    <category term="BigDecimal" scheme="https://xqtony.github.io/tags/BigDecimal/"/>
    
    <category term="Java" scheme="https://xqtony.github.io/tags/Java/"/>
    
    <category term="二创" scheme="https://xqtony.github.io/tags/%E4%BA%8C%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库 - 基础篇</title>
    <link href="https://xqtony.github.io/2023/05/23/MySQL_DB_basic/"/>
    <id>https://xqtony.github.io/2023/05/23/MySQL_DB_basic/</id>
    <published>2023-05-22T16:28:19.611Z</published>
    <updated>2023-05-25T21:33:41.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>是一种 关系型数据库：建立在关系模型上，由多张互相连接的二维表组成的数据库。关系数据库 特点：1. 使用表存储数据，格式统一，便于维护2. 使用SQL语言操作，标准统一，使用方便<br>MySQL的数据模型从客户端到DBMS，再到数据库，最后到达数据库中的表  </p><span id="more"></span><p><img src="/images/MySQL_DB_basic/1.png">  </p><p>MySQL启动的命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">start</span> mysql80  # 这里的mysql80是注册在Windows中的服务名称</span><br><span class="line">net stop mysql80</span><br></pre></td></tr></table></figure><p>MySQL客户端连接MySQL自带的客户端命令行CMD执行命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h <span class="number">127.0</span>.<span class="number">0.1</span> -<span class="selector-tag">P</span> <span class="number">3306</span> -u root -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure><p>SQLSQL通用语法1. SQL语句单行，多行均可，默认分号结尾2. 使用空格&#x2F;缩进以增加可读性3. 不区分大小写，推荐关键字使用大写4. 注释：单行注释：– 通用，# MySQL独有多行注释：&#x2F;**&#x2F;<br>SQL分类：DDL: Data Definition Language 数据定义语言，用来定义数据库对象 （数据库，表，字段）DML: Data Manipulation Language 数据操作语言，用来对数据库表中的数据进行增删改DQL: Data Query Language 数据查询语言，用来查询数据库中表的记录DCL: Data Control Language 数据控制语言，用来创建数据库用户、控制数据库的访问权限<br>DDL-数据库操作:查询查询所有数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DATABASES;</span><br></pre></td></tr></table></figure><p>查询当前数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 [<span class="keyword">DEFAULT</span> CHARSET 字符集] [<span class="keyword">COLLATE</span> 排序规则]</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> test; <span class="comment">-- 如果不存在，创建test数据库</span></span><br><span class="line"><span class="keyword">create</span> database itheima <span class="keyword">default</span> charset utf8mb4;  <span class="comment">-- 创建utf8mb4字符集的itheima 数据库</span></span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] 数据库名</span><br></pre></td></tr></table></figure><p>使用数据库</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">USE</span> 数据库名</span><br></pre></td></tr></table></figure><p>查询当前数据库全部表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure><p>查询表结构</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">DESC</span> 表名 或者 DESCRIBE 表名</span><br></pre></td></tr></table></figure><p>查询指定表的建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名</span><br></pre></td></tr></table></figure><p>DDL-表操作-创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    字段<span class="number">1</span>   字段<span class="number">1</span>类型[COMMENT  字段<span class="number">1</span>注释],</span><br><span class="line">    字段<span class="number">2</span>   字段<span class="number">2</span>类型[COMMENT  字段<span class="number">2</span>注释],</span><br><span class="line">    ......</span><br><span class="line">    字段n   字段n类型[COMMENT  字段n注释]</span><br><span class="line">)[COMMENT 注释];</span><br></pre></td></tr></table></figure><blockquote><p>第二章讲解InnoDB底层原理</p></blockquote><p>DDL-表操作-数据类型主要分三类：数值类型，字符串类型，日期时间类型数值类型<br><img src="/images/MySQL_DB_basic/2.png"> </p><p>实例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age TINYINT UNSIGNED  # <span class="number">0</span>~<span class="number">255</span>的整数</span><br><span class="line">score DOUBLE(<span class="number">4</span>, <span class="number">1</span>)   <span class="selector-id">#100</span>.<span class="number">0</span>最长是<span class="number">4</span>，填<span class="number">4</span>，<span class="number">80.5</span>，<span class="number">70.5</span>，最多一位小数，填<span class="number">1</span>。</span><br></pre></td></tr></table></figure><p>字符串类型<br><img src="/images/MySQL_DB_basic/3.png"> </p><p>定长&#x2F;变长字符串的区别</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">char</span>(<span class="number">10</span>) <span class="meta"># 长度固定为10，没用的部分用空格补位  --&gt; 性能好？</span></span><br><span class="line">varchar(<span class="number">10</span>) <span class="meta"># 长度最长不超过10，小于10时体现实际长度  --&gt; 性能较差</span></span><br></pre></td></tr></table></figure><p>实例：用户名 username 用那个更好呢？答案：varchar(50)更好。因为用户的用户名不是定长的，使用varchar可以节约空间性别 gender 用哪个？答案：char(1)<br>日期类型<br><img src="/images/MySQL_DB_basic/4.png"> </p><p>实例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">birthday</span> date  <span class="comment"># 生日用date类型更合适</span></span><br></pre></td></tr></table></figure><p>案例：根据需求创建表（设计合理的数据类型、长度）<br><img src="/images/MySQL_DB_basic/5.png"> </p><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">    id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    workno <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    idcard <span class="type">char</span>(<span class="number">18</span>) comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">    entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>DDL-表操作-修改添加字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型（长度） [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><p>案例：为emp表添加一个字段“昵称”为nickname，类型为varchar(20)答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">add</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);</span><br></pre></td></tr></table></figure><p>修改字段名和字段类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名称 类型（长度） [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure><p>案例：将emp表的nickname 修改为username，类型为varchar(30)答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp change nickname username <span class="type">varchar</span>(<span class="number">30</span>) comment <span class="string">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>删除字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p>案例：删除emp中的username列答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">drop</span> username;</span><br></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure><p>案例：将emp表表名修改为employee</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp RENAME <span class="keyword">TO</span> employee;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 表名;</span><br></pre></td></tr></table></figure><p>删除指定表，并重新创建该表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><p>MySQL图形化界面：<br><img src="/images/MySQL_DB_basic/6.png"> MySQL Workbench<br>DML-介绍DML的全称是Data Manipulation Lanagage (数据操作语言），用来对数据表中的数据记录进行增删改操作。添加数据 (INSERT)修改数据 (UPDATE)删除数据 (DELETE)<br>DML-添加数据1. 给指定字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段<span class="number">1</span>， 字段<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>， 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>2. 给全部字段添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 VALUSE (值<span class="number">1</span>， 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><p>3. 批量添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>，字段名<span class="number">2</span>，...) VALUSE (值<span class="number">1</span>，值<span class="number">2</span>，...), VALUSE (值<span class="number">1</span>，值<span class="number">2</span>，...);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 VALUSE (值<span class="number">1</span>，值<span class="number">2</span>，...), VALUSE (值<span class="number">1</span>，值<span class="number">2</span>，...);</span><br></pre></td></tr></table></figure><p>注意：<br><img src="/images/MySQL_DB_basic/7.png"> </p><p>DML-修改数据UPDATE 表名 SET 字段名1&#x3D;值1, 字段名2&#x3D;值2, … [WHERE 条件];注意：如果修改的条件没有，则会修改整张表的数据。案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- id = 1 的名字修改为it 黑马</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;kelly&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- id = 1 的名字修改为Kelly, gender 修改为女</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;kelly&#x27;</span>, gender <span class="operator">=</span> <span class="string">&#x27;W&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将所有员工的入职时间设定为2008-01-01</span></span><br><span class="line"><span class="keyword">update</span> employee <span class="keyword">set</span> entrydate <span class="operator">=</span> <span class="string">&#x27;2008-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><p>DML-删除数据DELETE FROM 表名 [WHERE 条件];注意：DELETE语句的条件可有可无，没有的情况下会删除整张表的数据。DELETE语句不能删除某一个字段的值（可以使用UPDATE）。案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除gender为W的员工</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除所有员工</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employee;</span><br></pre></td></tr></table></figure><p>DQL-介绍DQL是Data Query Language 的缩写，用来查询数据库中表的记录。查询关键字：SELECT<br>DQL-语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名列表</span><br><span class="line"><span class="keyword">WHERE</span> 条件列表 <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span> 分组后条件列表 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序字段列表</span><br><span class="line">LIMIT 分页参数</span><br></pre></td></tr></table></figure><p>基本查询条件查询 WHERE聚合函数 count(), max(), min(), avg(), sum()分组查询 GROUP BY排序查询 ORDER BY分页查询 LIMIT<br>DQL-基本查询1. 查询返回多个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>，字段<span class="number">2</span>，字段<span class="number">3.</span>.. <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>2. 设置别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [<span class="keyword">AS</span> 别名<span class="number">1</span>], 字段<span class="number">2</span> [<span class="keyword">AS</span> 别名<span class="number">2</span>] ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>其中AS可以省略3. 去除重复记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>案例：数据准备：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数据准备</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">  id <span class="type">INT</span>,</span><br><span class="line">    workno <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    age TINYINT UNSIGNED,</span><br><span class="line">    idcard <span class="type">CHAR</span>(<span class="number">18</span>),</span><br><span class="line">    workaddress <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    entrydate <span class="type">DATE</span></span><br><span class="line">) COMMENT <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DESC</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;123456789012345678&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456789012335678&#x27;</span>, <span class="string">&#x27;Dalian&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;ac&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">8</span>, <span class="string">&#x27;123456789012345678&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;2006-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;ad&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;123456783412345678&#x27;</span>, <span class="string">&#x27;Dalian&#x27;</span>, <span class="string">&#x27;2002-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;ae&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;123456783312345678&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;af&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">68</span>, <span class="string">&#x27;123456786012345678&#x27;</span>, <span class="string">&#x27;Dalian&#x27;</span>, <span class="string">&#x27;2000-01-06&#x27;</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;ag&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;123456789012445678&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;2007-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;ah&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">8</span>, <span class="string">&#x27;123456789012235678&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;123456789022345678&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;2011-01-02&#x27;</span>),</span><br><span class="line">(<span class="number">10</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;aj&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="number">98</span>, <span class="string">&#x27;123456722212345678&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">11</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;ak&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;123456555512345678&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">12</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;al&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="number">78</span>, <span class="string">&#x27;123456789512345678&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">13</span>, <span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;am&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;123456789712345678&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;1990-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">14</span>, <span class="string">&#x27;14&#x27;</span>, <span class="string">&#x27;an&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456789872345678&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">15</span>, <span class="string">&#x27;15&#x27;</span>, <span class="string">&#x27;ao&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;123456789012345678&#x27;</span>, <span class="string">&#x27;Shanghai&#x27;</span>, <span class="string">&#x27;2005-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">16</span>, <span class="string">&#x27;16&#x27;</span>, <span class="string">&#x27;aq&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;123456782362345678&#x27;</span>, <span class="string">&#x27;Beijing&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  基本查询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询指定字段，name，workno，age返回</span></span><br><span class="line"><span class="keyword">SELECT</span> name, workno, age <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询所有字段返回</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;  <span class="comment">-- 尽量不要写*，因为效率低而且不安全，相比之下写出来所有字段更好</span></span><br><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询所有员工的工作地址</span></span><br><span class="line"><span class="keyword">SELECT</span> workaddress <span class="keyword">as</span> <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> workaddress <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 查询员工的上班地址（不要重复）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> workaddress <span class="string">&#x27;工作地址&#x27;</span> <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure><p>DQL-条件查询1. 语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br></pre></td></tr></table></figure><p>2. 条件比较运算符![]<img src="/images/MySQL_DB_basic/8.png"><br>逻辑运算符<br><img src="/images/MySQL_DB_basic/9.png">   </p><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 条件查询</span></span><br><span class="line"><span class="comment">-- 1. 查询年龄等于98的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">98</span>;</span><br><span class="line"><span class="comment">-- 2. 查询年龄小于20 的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 3. 查询年龄小于等于20的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 4. 查询没有身份证号的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> idcard <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- 5. 查询有身份证号的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> idcard <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="comment">-- 6. 查询年龄不是88的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&lt;&gt;</span> <span class="number">88</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">!=</span> <span class="number">88</span>;</span><br><span class="line"><span class="comment">-- 7. 查询年龄在15~20岁的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">15</span> <span class="keyword">AND</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&gt;=</span> <span class="number">15</span> <span class="keyword">AND</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">-- 8. 查询性别为女而且年龄小于25的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;W&#x27;</span> <span class="keyword">AND</span> age <span class="operator">&lt;</span> <span class="number">25</span>;</span><br><span class="line"><span class="comment">-- 9. 查询年龄等于18或20或40的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">20</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="keyword">IN</span> (<span class="number">18</span>, <span class="number">20</span>, <span class="number">40</span>);</span><br><span class="line"><span class="comment">-- 10. 查询名字是两个字的员工的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> name <span class="keyword">like</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 11. 查询身份证号最后一位是X的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> idcard <span class="keyword">LIKE</span> <span class="string">&#x27;%X&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> idcard <span class="keyword">LIKE</span> <span class="string">&#x27;_________________X&#x27;</span>;</span><br></pre></td></tr></table></figure><p>DQL-分组查询语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [<span class="keyword">HAVING</span> 分组后过滤条件]</span><br></pre></td></tr></table></figure><p>WHERE和HAVING的区别- 执行时间不同，WHER是分组前过滤，HAVING是分组后过滤- 判断条件不同，WHERE不能对聚合函数进行判断，HAVING可以<br>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分组查询</span></span><br><span class="line"><span class="comment">-- 1. 根据性别分组，统计男性员工和女性员工的数量</span></span><br><span class="line"><span class="keyword">SELECT</span> gender, <span class="built_in">COUNT</span>(<span class="operator">*</span>) total <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br><span class="line"><span class="comment">-- 2. 根据性别分组，统计男性员工和女性员工的平均年龄</span></span><br><span class="line"><span class="keyword">SELECT</span> gender, <span class="built_in">AVG</span>(age) avg_age <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> gender;</span><br><span class="line"><span class="comment">-- 3. 查询年龄小于45的员工，并根据工作地址进行分组，获取员工数量&gt;=3的工作地址</span></span><br><span class="line"><span class="keyword">SELECT</span> workaddress, <span class="built_in">COUNT</span>(<span class="operator">*</span>) address_count <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> workaddress <span class="keyword">HAVING</span> address_count <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>注意：- 执行顺序：where &gt; 聚合函数 &gt; having- 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无意义<br>DQL-排序查询语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>,  字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>排序方式：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ASC: 升序 （默认值）</span><br><span class="line">DESC: 降序</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 排序查询</span></span><br><span class="line"><span class="comment">-- 1 根据年龄对公司的员工进行升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>;  <span class="comment">-- ASC可以省略；降序则改为DESC</span></span><br><span class="line"><span class="comment">-- 2 根据入职时间对员工进行降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> entrydate <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 3 根据年龄对公司员工进行升序排序，如果年龄相同再按入职时间进行降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">ASC</span>, entrydate <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>DQL-分页查询语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 起始索, 查询返回记录数;</span><br></pre></td></tr></table></figure><p>注意：- 起始索引从0开始，其实索引 &#x3D; (查询页码 - 1) * 每页显示记录数- 分页查询是数据库的方言，不同的数据库有不同的实现，MySQL是LIMIT- 如果查询的是第一页的数据，起始索引可以省略，直接简写为LIMIT 10<br>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分页查询</span></span><br><span class="line"><span class="comment">-- 1. 查询第一页员工数据，每页显示10条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">0</span>, <span class="number">10</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询第二页员工数据，每页显示10条记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">10</span>, <span class="number">10</span>; <span class="comment">-- (页码 - 1)*页展示记录数</span></span><br></pre></td></tr></table></figure><p>DQL 案例课</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例</span></span><br><span class="line"><span class="comment">-- 1. 查询年龄为20，21，22，23岁的女性员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="keyword">IN</span> (<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>) <span class="keyword">AND</span> gender <span class="operator">=</span> <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line"><span class="comment">-- 2. 查询性别为男并且年龄在20-40岁（含）且姓名为两个字的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;M&#x27;</span> <span class="keyword">AND</span> ( age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span> ) <span class="keyword">AND</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 3. 统计员工表中，年龄小于60岁的男性和女性员工的数量。SELECT gender, COUNT(*) age_count FROM emp WHERE age &lt; 60 GROUP BY gender;</span></span><br><span class="line"><span class="comment">-- 4. 查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按照年龄升序排序，年龄相同按照入职时间降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&lt;=</span> <span class="number">35</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age, entrydate <span class="keyword">DESC</span>;</span><br><span class="line"><span class="comment">-- 5. 查询性别为W且年龄在20-40（含）以内的前5个员工信息，对查询的结果按年龄升序排序，年龄相同按照入职时间升序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;W&#x27;</span> <span class="keyword">AND</span> ( age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span> ) <span class="keyword">ORDER</span> <span class="keyword">BY</span> age, entrydate LIMIT <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>DQL - 执行顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>        (<span class="number">4</span>)</span><br><span class="line"><span class="keyword">FROM</span>          (<span class="number">1</span>)</span><br><span class="line"><span class="keyword">WHERE</span>         (<span class="number">2</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>      (<span class="number">3</span>)</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>      (<span class="number">5</span>)</span><br><span class="line">LIMIT         (<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">=</span><span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">LIMIT</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄大于15的员工的姓名、年龄、并根据年龄进行升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br><span class="line"><span class="comment">-- 顺序验证</span></span><br><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">FROM</span> emp E <span class="keyword">WHERE</span> E.age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age; </span><br><span class="line"><span class="comment">-- FROM 第一</span></span><br><span class="line"><span class="keyword">SELECT</span> E.name, E.age <span class="keyword">FROM</span> emp E <span class="keyword">WHERE</span> E.age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age; </span><br><span class="line"><span class="comment">-- SELECT 在FROM和WHERE之后</span></span><br><span class="line"><span class="keyword">SELECT</span> E.name ename, E.age EAGE <span class="keyword">FROM</span> emp E <span class="keyword">WHERE</span> EAGE <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age; </span><br><span class="line"><span class="comment">-- 失败：SELECT 在FROM和WHERE之后执行</span></span><br><span class="line"><span class="keyword">SELECT</span> E.name ename, E.age EAGE <span class="keyword">FROM</span> emp E <span class="keyword">WHERE</span> E.age <span class="operator">&gt;</span> <span class="number">15</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> EAGE; </span><br><span class="line"><span class="comment">-- 成功：SELECT 在ORDER BY之前执行</span></span><br></pre></td></tr></table></figure><p>DCL-介绍DCL 全称 Data Control Language （数据控制语言），用来管理数据库用户、控制数据库的访问权限<br>DCL-管理用户1. 查询用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>2. 创建用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>3. 修改用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>4. 删除用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DCL</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户itcast，只能够在localhost 访问，密码123456</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建用户heima，可以在任意机器访问该数据库，密码123456</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改用户heima的密码为1234</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除itcast@localhost用户</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> <span class="string">&#x27;itcast&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意：- 主机名可以用’%‘通配- 这类SQL开发人员使用较少，主要是DBA (Database Administrator 数据库管理员)使用<br>DCL-权限控制</p><p><img src="/images/MySQL_DB_basic/10.png"> </p><p>1. 查询权限  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@‘主机名’;</span><br></pre></td></tr></table></figure><p>2. 授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@‘主机名’;</span><br></pre></td></tr></table></figure><p>3. 撤销权限</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">REMOVE</span> 权限列表 ON 数据库名.表名 FROM <span class="string">&#x27;用户名&#x27;</span>@‘主机名’;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">show</span> grants <span class="keyword">for</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> itcast.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 撤销权限</span></span><br><span class="line"><span class="keyword">revoke</span> <span class="keyword">all</span> <span class="keyword">on</span> itcast.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;heima&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>注意：<br><img src="/images/MySQL_DB_basic/11.png"> </p><p>总结：1. 用户管理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;usernmae&#x27;</span>@<span class="string">&#x27;host&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;host&#x27;</span>;</span><br></pre></td></tr></table></figure><p>2. 权限控制</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> ‘用户名<span class="string">&#x27;@&#x27;</span>主机名<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">REVOKE 权限列表 ON 数据库名.表名 FROM &#x27;</span>用户名<span class="string">&#x27;@&#x27;</span>主机名<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure><p>函数函数是指可以被另一段程序直接调用的的程序或代码。</p><ul><li><p>字符串函数</p></li><li><p>数值函数</p></li><li><p>日期函数</p></li><li><p>流程函数</p></li></ul><p>字符串函数<br><img src="/images/MySQL_DB_basic/12.png"><br>演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 函数演示</span></span><br><span class="line"><span class="comment">-- concat</span></span><br><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;Hello &#x27;</span>, <span class="string">&#x27;MySQL&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- lower</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- upper</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">upper</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- lpad</span></span><br><span class="line"><span class="keyword">select</span> lpad(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- rpad</span></span><br><span class="line"><span class="keyword">select</span> rpad(<span class="string">&#x27;01&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- trim</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="string">&#x27;  Hello MySQL    &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- substring</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">substring</span>(<span class="string">&#x27;Hello MySQL&#x27;</span>, <span class="number">1</span>, <span class="number">5</span>);  # 这里字符串索引从<span class="number">1</span>开始</span><br></pre></td></tr></table></figure><p>案例：由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补充0。比如1号员工应该为00001。答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 员工号补0.</span></span><br><span class="line">use itcast;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> workno <span class="operator">=</span> lpad(workno, <span class="number">5</span>, <span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure><p>数值函数常见的数值函数如下：</p><p><img src="/images/MySQL_DB_basic/13.png"> </p><p>演示</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数值函数</span></span><br><span class="line"><span class="comment">-- ceil</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">ceil</span>(<span class="number">1.1</span>);</span><br><span class="line"><span class="comment">-- floor</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">floor</span>(<span class="number">1.5</span>);</span><br><span class="line"><span class="comment">-- mod</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">3</span>, <span class="number">4</span>);  # <span class="number">3</span>除以<span class="number">4</span>取余</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">mod</span>(<span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">-- rand</span></span><br><span class="line"><span class="keyword">select</span> rand();  # 获得一个<span class="number">0</span><span class="number">-1</span>的随机数</span><br><span class="line"><span class="comment">-- round</span></span><br><span class="line"><span class="keyword">select</span> round(<span class="number">2.345</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">select</span> round(<span class="number">2.344</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>案例通过数据库的函数，生成一个六位数的随机验证码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 2.通过数据库的函数，生成一个六位数的随机验证码</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="built_in">substring</span>(rand(), <span class="number">3</span>, <span class="number">6</span>);  # 用substring截取</span><br><span class="line"><span class="keyword">select</span> lpad(round(rand() <span class="operator">*</span> <span class="number">1000000</span>, <span class="number">0</span>), <span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>);  # 计算，取整，填充</span><br></pre></td></tr></table></figure><p>日期函数常见的日期函数<br><img src="/images/MySQL_DB_basic/14.png"> </p><p>演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 日期函数</span></span><br><span class="line"><span class="comment">-- curdate()</span></span><br><span class="line"><span class="keyword">select</span> curdate();</span><br><span class="line"><span class="comment">-- curtime()</span></span><br><span class="line"><span class="keyword">select</span> curtime();</span><br><span class="line"><span class="comment">-- now()</span></span><br><span class="line"><span class="keyword">select</span> now();</span><br><span class="line"></span><br><span class="line"><span class="comment">-- YEAR, MONTH, DAY</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">year</span>(now()), <span class="keyword">month</span>(now()), <span class="keyword">day</span>(now());</span><br><span class="line"></span><br><span class="line"><span class="comment">-- date_add(date, INTERVAL expr type)</span></span><br><span class="line"><span class="keyword">select</span> date_add(now(), <span class="type">INTERVAL</span> <span class="number">70</span> <span class="keyword">day</span>);  # <span class="number">70</span>天之后，<span class="number">70</span>天之前用负值即可</span><br><span class="line"></span><br><span class="line"><span class="comment">-- date_diff</span></span><br><span class="line"><span class="keyword">select</span> datediff(now(), <span class="string">&#x27;2022-12-01&#x27;</span>);  # 第一个日期减去第二个日期</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有员工的入职天数，并根据入职天数倒序排序</span></span><br><span class="line"><span class="keyword">select</span> name, entrydate, datediff(now(), entrydate) 入职日期 <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> 入职日期 <span class="keyword">desc</span>;  #可以用中文。</span><br></pre></td></tr></table></figure><p>流程函数流程函数实现条件筛选，提高语句的效率：<br><img src="/images/MySQL_DB_basic/15.png"> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF(value, t, f)</span><br><span class="line">IFNULL(value1, value2)</span><br><span class="line">CASE WHEN <span class="selector-attr">[val1]</span> THEN <span class="selector-attr">[res1]</span> ... ELSE <span class="selector-attr">[default]</span> END</span><br><span class="line">CASE <span class="selector-attr">[expr]</span> WHEN <span class="selector-attr">[val1]</span> THEN <span class="selector-attr">[res1]</span> .. ELSE <span class="selector-attr">[default]</span> END</span><br></pre></td></tr></table></figure><p>演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 流程函数</span></span><br><span class="line"><span class="comment">-- if</span></span><br><span class="line"><span class="keyword">select</span> if (<span class="literal">true</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;error&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ifnull</span></span><br><span class="line"><span class="keyword">select</span> ifnull (<span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;Default&#x27;</span>);  <span class="comment">-- 第一个值为非null则返回第一个值，若为null则返回第二个值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ifnull (<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Default&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> ifnull (<span class="keyword">null</span>, <span class="string">&#x27;Default&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- case when then else end</span></span><br><span class="line"><span class="comment">-- 需求：查询emp员工姓名和工作地址（北京/上海 ---&gt;一线城市，其他---&gt;二线城市）</span></span><br><span class="line"><span class="keyword">select</span> name, </span><br><span class="line">     <span class="keyword">case</span> workaddress </span><br><span class="line">       <span class="keyword">when</span> <span class="string">&#x27;Beijing&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> </span><br><span class="line">       <span class="keyword">when</span> <span class="string">&#x27;Shanghai&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span></span><br><span class="line">       <span class="keyword">else</span> <span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：统计班级各个学员的成绩，展示的规则如下：-- &gt;= 85，展示优秀 </span></span><br><span class="line"><span class="comment">-- &gt;= 60, 展示及格 </span></span><br><span class="line"><span class="comment">-- 否则， 展示不及格 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">  id <span class="type">int</span> comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    math <span class="type">int</span> comment <span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">    english <span class="type">int</span> comment <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">    chinese <span class="type">int</span> comment <span class="string">&#x27;语文&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;学员成绩表&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score</span><br><span class="line"><span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">67</span>, <span class="number">88</span>, <span class="number">95</span>), (<span class="number">2</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="number">23</span>, <span class="number">66</span>, <span class="number">90</span>), (<span class="number">3</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">56</span>, <span class="number">98</span>, <span class="number">76</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> score;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> id, name,</span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">when</span> math <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> math <span class="keyword">between</span> <span class="number">60</span> <span class="keyword">and</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span> <span class="string">&#x27;数学成绩&#x27;</span>,</span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">when</span> english <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> english <span class="keyword">between</span> <span class="number">60</span> <span class="keyword">and</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span> <span class="string">&#x27;英语成绩&#x27;</span>,</span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">when</span> chinese <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> chinese <span class="keyword">between</span> <span class="number">60</span> <span class="keyword">and</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span> <span class="string">&#x27;语文成绩&#x27;</span></span><br><span class="line"><span class="keyword">from</span> score;</span><br></pre></td></tr></table></figure><p>总结字符串函数</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">concat</span></span><br><span class="line"><span class="attr">lower</span></span><br><span class="line"><span class="attr">upper</span></span><br><span class="line"><span class="attr">lpad</span> <span class="string">左填充</span></span><br><span class="line"><span class="attr">rpad</span> <span class="string">右填充</span></span><br><span class="line"><span class="attr">trim</span> <span class="string">去除左右空格</span></span><br><span class="line"><span class="attr">substring</span>  <span class="string">字符串截取</span></span><br></pre></td></tr></table></figure><p>数值函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ceil</span><br><span class="line">floor</span><br><span class="line">mod</span><br><span class="line">rand</span><br><span class="line">round 四舍五入，保留指定位小数</span><br></pre></td></tr></table></figure><p>日期函数</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">curdate</span></span><br><span class="line">curtime</span><br><span class="line">now</span><br><span class="line">year</span><br><span class="line">month</span><br><span class="line">day</span><br><span class="line">date_add</span><br><span class="line">datediff  第一个日期减去第二个日期</span><br></pre></td></tr></table></figure><p>流程函数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span></span><br><span class="line">ifnull</span><br><span class="line"><span class="keyword">case</span> [...] <span class="keyword">when</span>.. <span class="keyword">then</span>... <span class="keyword">else</span>... <span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>约束概述：常见的约束有哪些</p><ul><li><p>概念：约束是作用于表中字段上的规则，用于限制存储在表中的数据</p></li><li><p>目的：保证数据库中数据的正确，有效性和完整性</p></li><li><p>分类：</p></li></ul><p><img src="/images/MySQL_DB_basic/16.png"> </p><p>约束演示案例：根据需求，完成表的创建<br><img src="/images/MySQL_DB_basic/17.png"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">id: <span class="keyword">primary</span> key, auto_increment</span><br><span class="line">name: <span class="keyword">not</span> <span class="keyword">null</span>, <span class="keyword">unique</span></span><br><span class="line">age: <span class="keyword">check</span></span><br><span class="line">status: <span class="keyword">default</span></span><br><span class="line">gender: N<span class="operator">/</span>A</span><br><span class="line"><span class="comment">--  约束</span></span><br><span class="line"><span class="keyword">create</span> database itheima <span class="keyword">default</span> charset utf8mb4;</span><br><span class="line">use itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">check</span>(age <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">and</span> age <span class="operator">&lt;</span> <span class="number">120</span>) comment <span class="string">&#x27;年龄&#x27;</span>,   <span class="comment">-- 用and或&amp;&amp;都可以 </span></span><br><span class="line">    status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span> comment <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, age, status, gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom1&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;男&#x27;</span>), (<span class="string">&#x27;Tom2&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, age, status, gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom3&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, age, status, gender) <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="number">19</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;男&#x27;</span>); <span class="comment">-- 出错，因为不可以出错</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, age, status, gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom3&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;男&#x27;</span>); <span class="comment">-- 不可重复执行，因为存在唯一约束 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, age, status, gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom4&#x27;</span>, <span class="number">80</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);  <span class="comment">-- id 是5，虽然刚才插入没有成功，但是id已经被申请过了 </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, age, status, gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>, <span class="number">-1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;男&#x27;</span>);  <span class="comment">-- 检查约束生效 </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, age, status, gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>, <span class="number">121</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;男&#x27;</span>); <span class="comment">-- 检查约束生效 </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, age, gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom6&#x27;</span>, <span class="number">121</span>, <span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(name, age, gender) <span class="keyword">values</span> (<span class="string">&#x27;Tom5&#x27;</span>, <span class="number">120</span>, <span class="string">&#x27;男&#x27;</span>);</span><br></pre></td></tr></table></figure><p>拓展：约束的修改</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 发现建表的时候约束设置的不正确,如何修改 </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>;  <span class="comment">-- 查看现有约束的名称</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">drop</span> <span class="keyword">constraint</span> user_chk_1; <span class="comment">-- 删除现有约束</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">121</span>;  <span class="comment">-- 如果有数据不满足约束,去除之 </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">constraint</span> user_chk_1 <span class="keyword">check</span> (age <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">and</span> age <span class="operator">&lt;=</span> <span class="number">120</span>);  <span class="comment">-- 添加新的约束,操作结束</span></span><br></pre></td></tr></table></figure><p>外键约束概念外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性<br><img src="/images/MySQL_DB_basic/18.png"> </p><p>具有外键的表称为子表，被关联的表叫做父表注意：数据库层面，未建立外键关联，所以无法保证数据的一致性和完整性。演示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 外键约束 </span></span><br><span class="line"><span class="comment">-- 准备数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">  id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;部门名称&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept (id, name) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;研发部&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;市场部&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;财务部&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;销售部&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;总经办&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">  id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    job <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">    salary <span class="type">int</span> comment <span class="string">&#x27;薪资&#x27;</span>,</span><br><span class="line">    entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    managerid <span class="type">int</span> comment <span class="string">&#x27;直属领导ID&#x27;</span>,</span><br><span class="line">    dept_id <span class="type">int</span> comment <span class="string">&#x27;部门ID&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp (name, age, job, salary, entrydate, managerid, dept_id) <span class="keyword">values</span> (<span class="string">&#x27;金庸&#x27;</span>, <span class="number">66</span>, <span class="string">&#x27;总裁&#x27;</span>, <span class="number">20000</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="keyword">null</span>, <span class="number">5</span>), (<span class="string">&#x27;张无忌&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;项目经理&#x27;</span>, <span class="number">12500</span>, <span class="string">&#x27;2005-12-05&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;杨逍&#x27;</span>, <span class="number">33</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">8400</span>, <span class="string">&#x27;2000-11-03&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>), (<span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">48</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">11000</span>, <span class="string">&#x27;2002-02-05&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;常遇春&#x27;</span>, <span class="number">43</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">10500</span>, <span class="string">&#x27;2004-09-07&#x27;</span>, <span class="number">3</span>, <span class="number">1</span>), (<span class="string">&#x27;小昭&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;程序员鼓励师&#x27;</span>, <span class="number">6600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以上,没有设置物理外键,无法保证数据之间的一致性和完整性</span></span><br></pre></td></tr></table></figure><p>语法：添加外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    ..</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名);</span><br><span class="line">案例：</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 成功删除 </span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept (id, name) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;研发部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加外键 </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key(dept_id) <span class="keyword">references</span> dept(id);</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- Cannot delete or update a parent row: a foreign key constraint fails</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除外键 </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_emp_dept_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 删除成功</span></span><br></pre></td></tr></table></figure><p>删除&#x2F;更新行为<br><img src="/images/MySQL_DB_basic/19.png"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段）</span><br><span class="line"><span class="keyword">REFERENCES</span> 主表 （主表字段名）</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE <span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 外键的删除和更新行为 </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id</span><br><span class="line"><span class="keyword">foreign</span> key(dept_id) <span class="keyword">references</span> dept(id)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade;  <span class="comment">-- 级联更新/删除 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 级联更新操作 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line"><span class="keyword">update</span> dept <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;  <span class="comment">-- 查看子表，的确更新为6了，这就是cascade的作用 </span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">6</span>; <span class="comment">-- 子表数据也被删除了 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- SET NULL 操作 </span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 准备数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">  id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;部门名称&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept (id, name)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;研发部&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;市场部&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;财务部&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;销售部&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;总经办&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">  id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    job <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">    salary <span class="type">int</span> comment <span class="string">&#x27;薪资&#x27;</span>,</span><br><span class="line">    entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    managerid <span class="type">int</span> comment <span class="string">&#x27;直属领导ID&#x27;</span>,</span><br><span class="line">    dept_id <span class="type">int</span> comment <span class="string">&#x27;部门ID&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp (name, age, job, salary, entrydate, managerid, dept_id)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;金庸&#x27;</span>, <span class="number">66</span>, <span class="string">&#x27;总裁&#x27;</span>, <span class="number">20000</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="keyword">null</span>, <span class="number">5</span>),</span><br><span class="line">(<span class="string">&#x27;张无忌&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;项目经理&#x27;</span>, <span class="number">12500</span>, <span class="string">&#x27;2005-12-05&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;杨逍&#x27;</span>, <span class="number">33</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">8400</span>, <span class="string">&#x27;2000-11-03&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">48</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">11000</span>, <span class="string">&#x27;2002-02-05&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;常遇春&#x27;</span>, <span class="number">43</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">10500</span>, <span class="string">&#x27;2004-09-07&#x27;</span>, <span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;小昭&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;程序员鼓励师&#x27;</span>, <span class="number">6600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加外键 </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key(dept_id)</span><br><span class="line"><span class="keyword">references</span> dept(id) <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">set</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span>; </span><br><span class="line"><span class="comment">-- set null更新/删除 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除id = 1的数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp; </span><br><span class="line"><span class="comment">-- 可见所有emp 原有dept_id = 1的数据现在 dept_id的值为 null</span></span><br></pre></td></tr></table></figure><p>总结1. 非空约束 not null2. 唯一约束 unique3. 主键约束 primary key (自增: AUTO_INCREMENT， ORACLE没有这个，而是SEQUENCE)4. 默认约束 default5. 检查约束 check6. 外键约束 foreign key<br>多表查询多表关系各个表结构之间存在各种联系：一对多 （多对一）多对多一对一一对多（多对一）案例：部门 与 员工 的关系关系：一个部门对应多个员工，一个员工对应一个部门实现：再多的一方建立外键，只想一的一方的主键<br><img src="/images/MySQL_DB_basic/20.png"> </p><p>多对多案例：学生 与 课程的关系关系：一个学生可以选择多门课程，一门课程也可以供多个学生选择实现：建立第三张中间表，中间层至少包含两个外键，分别关联两方主键<br><img src="/images/MySQL_DB_basic/21.png"> </p><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多对多 </span></span><br><span class="line"><span class="comment">-- 学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="keyword">no</span> <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;学号&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student</span><br><span class="line"><span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;黛绮丝&#x27;</span>, <span class="string">&#x27;2000100101&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;谢逊&#x27;</span>, <span class="string">&#x27;2000100102&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;殷天正&#x27;</span>, <span class="string">&#x27;2000100103&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="string">&#x27;2000100104&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 课程表 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;课程名称&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;课程表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;Java&#x27;</span>), (<span class="keyword">null</span>, <span class="string">&#x27;PHP&#x27;</span>), (<span class="keyword">null</span>, <span class="string">&#x27;MySQL&#x27;</span>), (<span class="keyword">null</span>, <span class="string">&#x27;Hadoop&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生课程关系表 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_course(</span><br><span class="line">  id <span class="type">int</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    studentid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;学生ID&#x27;</span>,</span><br><span class="line">    courseid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;课程ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">constraint</span> fk_courseid <span class="keyword">foreign</span> key (courseid) <span class="keyword">references</span> course (id),</span><br><span class="line">    <span class="keyword">constraint</span> fk_student_id <span class="keyword">foreign</span> key (studentid) <span class="keyword">references</span> student(id)</span><br><span class="line">) comment <span class="string">&#x27;学生课程中间表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_course <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="keyword">null</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="keyword">null</span>, <span class="number">1</span>, <span class="number">3</span>), (<span class="keyword">null</span>, <span class="number">2</span>, <span class="number">2</span>), (<span class="keyword">null</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="keyword">null</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">describe</span> student_course;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> studenstudent_coursestudent_coursestudent_coursestudent_coursestudent_courset_course;</span><br></pre></td></tr></table></figure><p>.一对一案例：用户 和 用户详情的关系关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率实现：在任意一方加入外键，关联另一方的主键，并且设置外键为唯一的（UNIQUE）图例：![]<img src="/images/MySQL_DB_basic/22.png"> </p><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 一对一</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user (</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;1: 男，2: 女&#x27;</span>,</span><br><span class="line">    phone <span class="type">char</span>(<span class="number">11</span>) comment <span class="string">&#x27;手机号&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户基本信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user_edu (</span><br><span class="line">  id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    degree <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;学历&#x27;</span>,</span><br><span class="line">    major <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;专业&#x27;</span>,</span><br><span class="line">    primaryschool <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;小学&#x27;</span>,</span><br><span class="line">    middleschool <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;中学&#x27;</span>,</span><br><span class="line">    university <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;大学&#x27;</span>,</span><br><span class="line">    userid <span class="type">int</span> <span class="keyword">UNIQUE</span> comment <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">constraint</span> fk_userid <span class="keyword">foreign</span> key (userid) <span class="keyword">references</span> tb_user(id)</span><br><span class="line">) comment <span class="string">&#x27;用户教育信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(id, name, age, gender, phone) <span class="keyword">values</span></span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;黄渤&#x27;</span>, <span class="number">45</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;18800001111&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;冰冰&#x27;</span>, <span class="number">35</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;18800002222&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;码云&#x27;</span>, <span class="number">55</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;18800008888&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;李彦宏&#x27;</span>, <span class="number">50</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;18800009999&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user_edu <span class="keyword">values</span></span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;本科&#x27;</span>, <span class="string">&#x27;舞蹈&#x27;</span>, <span class="string">&#x27;青岛市第一小学&#x27;</span>, <span class="string">&#x27;青岛市第一中学&#x27;</span>, <span class="string">&#x27;北京电影学院&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;硕士&#x27;</span>, <span class="string">&#x27;表演&#x27;</span>, <span class="string">&#x27;朝阳区第一小学&#x27;</span>, <span class="string">&#x27;朝阳区第一中学&#x27;</span>, <span class="string">&#x27;上海戏剧学院&#x27;</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;本科&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="string">&#x27;杭州市第一小学&#x27;</span>, <span class="string">&#x27;杭州市第一中学&#x27;</span>, <span class="string">&#x27;杭州示范大学&#x27;</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="keyword">null</span>, <span class="string">&#x27;本科&#x27;</span>, <span class="string">&#x27;计算机&#x27;</span>, <span class="string">&#x27;阳泉第一小学&#x27;</span>, <span class="string">&#x27;阳泉第一中学&#x27;</span>, <span class="string">&#x27;清华大学&#x27;</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>多表查询概述概述：指从多张表中查询数据笛卡尔积：指在数学中，两个集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）<br><img src="/images/MySQL_DB_basic/23.png"> </p><p>案例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数据准备 </span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> dept;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">  id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;部门名称&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept (id, name) <span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;研发部&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;市场部&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;财务部&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;销售部&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;总经办&#x27;</span>), (<span class="number">6</span>, <span class="string">&#x27;人事部&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">  id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    job <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">    salary <span class="type">int</span> comment <span class="string">&#x27;薪资&#x27;</span>,</span><br><span class="line">    entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    managerid <span class="type">int</span> comment <span class="string">&#x27;直属领导ID&#x27;</span>,</span><br><span class="line">    dept_id <span class="type">int</span> comment <span class="string">&#x27;部门ID&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp (name, age, job, salary, entrydate, managerid, dept_id)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;金庸&#x27;</span>, <span class="number">66</span>, <span class="string">&#x27;总裁&#x27;</span>, <span class="number">20000</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="keyword">null</span>, <span class="number">5</span>),</span><br><span class="line">(<span class="string">&#x27;张无忌&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;项目经理&#x27;</span>, <span class="number">12500</span>, <span class="string">&#x27;2005-12-05&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;杨逍&#x27;</span>, <span class="number">33</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">8400</span>, <span class="string">&#x27;2000-11-03&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">48</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">11000</span>, <span class="string">&#x27;2002-02-05&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;常遇春&#x27;</span>, <span class="number">43</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">10500</span>, <span class="string">&#x27;2004-09-07&#x27;</span>, <span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;小昭&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;程序员鼓励师&#x27;</span>, <span class="number">6600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;灭绝&#x27;</span>, <span class="number">60</span>, <span class="string">&#x27;财务总监&#x27;</span>, <span class="number">8500</span>, <span class="string">&#x27;2002-10-12&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;周芷若&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;会计&#x27;</span>, <span class="number">48000</span>, <span class="string">&#x27;2006-10-12&#x27;</span>, <span class="number">7</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="string">&#x27;丁敏君&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;出纳&#x27;</span>, <span class="number">5250</span>, <span class="string">&#x27;2009-10-12&#x27;</span>, <span class="number">7</span>, <span class="number">3</span>),</span><br><span class="line">(<span class="string">&#x27;赵敏&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;市场部总监&#x27;</span>, <span class="number">12500</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;路障可&#x27;</span>, <span class="number">56</span>, <span class="string">&#x27;职员&#x27;</span>, <span class="number">3750</span>, <span class="string">&#x27;2006-10-12&#x27;</span>, <span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;和笔翁&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;职员&#x27;</span>, <span class="number">3750</span>, <span class="string">&#x27;2007-10-12&#x27;</span>, <span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;房东白&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;职员&#x27;</span>, <span class="number">5500</span>, <span class="string">&#x27;2009-10-12&#x27;</span>, <span class="number">102</span>, <span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;张三丰&#x27;</span>, <span class="number">88</span>, <span class="string">&#x27;销售总监&#x27;</span>, <span class="number">14000</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">1</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="string">&#x27;玉莲舟&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;销售&#x27;</span>, <span class="number">4600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">14</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="string">&#x27;宋远桥&#x27;</span>, <span class="number">40</span>, <span class="string">&#x27;销售&#x27;</span>, <span class="number">4600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">14</span>, <span class="number">4</span>),</span><br><span class="line">(<span class="string">&#x27;陈友谅&#x27;</span>, <span class="number">42</span>, <span class="string">&#x27;null&#x27;</span>, <span class="number">2000</span>, <span class="string">&#x27;2011-10-12&#x27;</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> <span class="keyword">foreign</span> key fk_deptid (dept_id)</span><br><span class="line"><span class="keyword">references</span> dept(id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多表查询 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp, dept;  <span class="comment">-- 查出来的结果好像比想象中要多 - 笛卡尔积 17 * 6 = 102 条</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp, dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure><p>多表查询分类- 连接查询    - 内连接: 相当于查询A.B交集部分的数据    </p><ul><li>外连接:        <br>左外连接: 查询左表中的所有数据，以及交集部分数据        <br>右外连接：查询右表中的所有数据，以及交集部分数据   </li><li>自连接：当前表与自身的连接查询，自连接必须使用表别名\</li><li>子查询<br>内连接内连接查询语法：    <br>隐式内连接：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span>, 表<span class="number">2</span> <span class="keyword">where</span> 条件...;</span><br></pre></td></tr></table></figure><p>    显式内连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> [<span class="keyword">INNER</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 连接条件...;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 内连接演示</span></span><br><span class="line"><span class="comment">-- 1. 查询每一个员工的姓名,以及关联的部门的名称 (隐式内连接实现) </span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;  </span><br><span class="line"><span class="comment">-- 起别名之后不能直接用表名访问字段了 </span></span><br><span class="line"><span class="keyword">select</span> emp.name, dept.name <span class="keyword">from</span> emp, dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询每一个员工的姓名以及关联的部门名称(显式内连接实现) </span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> emp e </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure><p>外连接语法：    左外：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">left</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件... ;</span><br></pre></td></tr></table></figure><p>    右外：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件... ;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 外连接演示 </span></span><br><span class="line"><span class="comment">-- 1. 查询emp表所有数据， 和对应的部门信息 （左连接）</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.name <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.name <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询dept表中所有数据，和对应的员工信息 （右连接） </span></span><br><span class="line"><span class="keyword">select</span> d.<span class="operator">*</span>, e.<span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 等价于：select d.*, e.* from dept d left outer join emp e  on e.dept_id = d.id;</span></span><br></pre></td></tr></table></figure><p>自连接语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表A 别名A <span class="keyword">join</span> 表A 别名B <span class="keyword">on</span> 条件... ;</span><br></pre></td></tr></table></figure><p>自联结查询可以是内连接也可以是外连接案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 内连接演示 </span></span><br><span class="line"><span class="comment">-- 1. 查询员工及其所属的领导名字 </span></span><br><span class="line"><span class="comment">-- 表结构：emp表</span></span><br><span class="line"><span class="keyword">select</span> a.name employee, b.name manager <span class="keyword">from</span> emp a, emp b</span><br><span class="line"><span class="keyword">where</span> a.managerid <span class="operator">=</span> b.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询所有员工emp及其领导的名字emp，如果员工没有领导也需要查询出来 </span></span><br><span class="line"><span class="comment">-- 表结构：emp e1, emp e2</span></span><br><span class="line"><span class="keyword">select</span> e1.name employee, e2.name boss <span class="keyword">from</span> emp e1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp e2 <span class="keyword">on</span> e1.managerid <span class="operator">=</span> e2.id; <span class="comment">-- 左外</span></span><br></pre></td></tr></table></figure><p>联合查询关键字：union, union all语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段列表 表A ...</span><br><span class="line"><span class="keyword">UNION</span> [<span class="keyword">ALL</span>]</span><br><span class="line"><span class="keyword">select</span> 字段列表 表B ... ;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- union all, union</span></span><br><span class="line"><span class="comment">-- 1. 将薪资低于5000的员工，和年龄大于50的员工全部查询出来 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">union</span> # <span class="keyword">union</span>合并后去重，<span class="keyword">union</span> <span class="keyword">all</span>则没有去重 </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"># 如果第二个查询只查询name，则无法使用<span class="keyword">union</span>因为列数量不同</span><br></pre></td></tr></table></figure><p>小结：</p><ul><li><p>联合查询多张表的列数必须保持一致，字段类型也必须一致</p></li><li><p>union all 直接合并，union则会去重</p></li></ul><p>子查询概念：SQL语句中嵌套SELECT语句，成为嵌套查询，又称子查询语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> column1 <span class="operator">=</span> (<span class="keyword">select</span> column1 <span class="keyword">from</span> t2);</span><br></pre></td></tr></table></figure><p>注意 - 子查询外部语句可以是insert&#x2F;update&#x2F;delete&#x2F;select的任何一个。<br>分类：子查询结果不同，可以分为：    标量子查询 （子查询结果为单个值）    列子查询 （子查询结果为一列）    行子查询 （子查询结果为一行）    表子查询 （子查询结果为多行多列）<br>根据子查询位置，分为：WHERE之后，FROM之后，SELECT之后。<br>标量子查询：概念：子查询返回结果为单个值（数字，字符串，日期等），最简单的形式，这种子查询称为标量子查询。常用的操作符：&#x3D; &lt;&gt; &gt; &gt;&#x3D; &lt; &lt;&#x3D;<br>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 标量子查询 </span></span><br><span class="line"><span class="comment">-- 1. 查询销售部所有员工信息 </span></span><br><span class="line"><span class="comment">-- a. 查询销售部部门id</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"><span class="comment">-- b. 根据部门id查询员工信息 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="comment">-- 使用子查询 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span></span><br><span class="line">(<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 使用外连接 </span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">where</span> d.name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询在“房东白”入职之后的员工信息 </span></span><br><span class="line"><span class="comment">-- a. 查询房东白的入职时间 </span></span><br><span class="line"><span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span> emp.name <span class="operator">=</span> <span class="string">&#x27;房东白&#x27;</span>;</span><br><span class="line"><span class="comment">-- b. 查询比房东白入职晚的员工 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2009-10-12&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用子查询 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span></span><br><span class="line">(<span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;房东白&#x27;</span>);</span><br></pre></td></tr></table></figure><p>列子查询：概念：子查询返回的结果是一列（可以是多行），这种子查询称为列子查询常用的操作符：IN, NOT IN, ANY, SOME, ALL<br><img src="/images/MySQL_DB_basic/24.png"> </p><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列子查询 </span></span><br><span class="line"><span class="comment">-- 1. 查询“销售部”和“市场部”的所有员工信息 </span></span><br><span class="line"><span class="comment">-- a. 找到销售部和市场部的部门id</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="keyword">in</span> (<span class="string">&#x27;销售部&#x27;</span>, <span class="string">&#x27;市场部&#x27;</span>);</span><br><span class="line"><span class="comment">-- b. 根据部门id，查询员工信息 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="keyword">in</span> (<span class="string">&#x27;销售部&#x27;</span>, <span class="string">&#x27;市场部&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询比财务部所有人工资都高的员工信息</span></span><br><span class="line"><span class="comment">-- 标量子查询 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp a <span class="keyword">where</span> salary <span class="operator">&gt;</span> ( </span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(salary) <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 列子查询 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span> (</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 比研发部任意一人工资高的员工信息 </span></span><br><span class="line"><span class="comment">-- 列子查询 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">any</span> (</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 标量子查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(e.salary) <span class="keyword">from</span> emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">where</span> d.name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>行子查询概念：子查询返回的结果是一行（多列的）常用操作符：&#x3D;, &lt;&gt;, IN, NOT IN案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 行子查询 </span></span><br><span class="line"><span class="comment">-- 查询与张无忌薪资和直属领导相同的员工信息  </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (salary, managerid) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">select</span> salary, managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>);</span><br></pre></td></tr></table></figure><p>表子查询概念：子查询返回的结果是多行多列，这种子查询叫做表子查询常用操作符：IN案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表子查询 </span></span><br><span class="line"><span class="comment">-- 1. 查询与路障可，宋远桥的职位和薪资相同的员工 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (job, salary) <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> job, salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">in</span> (<span class="string">&#x27;路障可&#x27;</span>, <span class="string">&#x27;宋远桥&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询入职日期是“2006-01-01”之后的员工信息及其部门信息 </span></span><br><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>, b.<span class="operator">*</span> <span class="keyword">from</span> dept a </span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) b</span><br><span class="line"><span class="keyword">on</span> a.id <span class="operator">=</span> b.dept_id;</span><br></pre></td></tr></table></figure><p>多表查询案例：<br><img src="/images/MySQL_DB_basic/25.png"> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 多表查询案例 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> salgrade (</span><br><span class="line">  grade <span class="type">int</span>,</span><br><span class="line">    losal <span class="type">int</span>,</span><br><span class="line">    hisal <span class="type">int</span></span><br><span class="line">) comment <span class="string">&#x27;薪资等级表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">0</span>, <span class="number">3000</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">3001</span>, <span class="number">5000</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">5001</span>, <span class="number">8000</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">8001</span>, <span class="number">10000</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">10001</span>, <span class="number">15000</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="number">15001</span>, <span class="number">20000</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="number">20001</span>, <span class="number">25000</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="number">25001</span>, <span class="number">30000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询员工的姓名，年龄，职位，部门信息（隐式内连接） </span></span><br><span class="line"><span class="keyword">select</span> e.name, e.age, e.job, d.name <span class="keyword">from</span> emp e, dept d</span><br><span class="line"><span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询年龄小于30岁的员工的姓名，年龄，职位，部门信息（显式内连接） </span></span><br><span class="line"><span class="keyword">select</span> e.name, e.age, e.job, d.name</span><br><span class="line"><span class="keyword">from</span> emp e <span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">where</span> e.age <span class="operator">&lt;</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询拥有员工的部门的id，部门名称 </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> d.id, d.name <span class="keyword">from</span> dept d</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> emp e</span><br><span class="line"><span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 查询年龄大于40岁的员工，及其归属的部门名称；如果员工没有部门，也要展示出来 </span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.name <span class="keyword">from</span> </span><br><span class="line">emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">where</span> e.age <span class="operator">&gt;</span> <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 查询所有员工的工资等级 </span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, sg.grade, sg.losal, sg.hisal <span class="keyword">from</span></span><br><span class="line">emp e <span class="keyword">left</span> <span class="keyword">join</span> salgrade sg</span><br><span class="line"><span class="keyword">on</span> e.salary <span class="operator">&gt;=</span> sg.losal <span class="keyword">and</span> e.salary <span class="operator">&lt;=</span> sg.hisal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, sg.grade <span class="keyword">from</span></span><br><span class="line">emp e, salgrade sg</span><br><span class="line"><span class="keyword">where</span> e.salary <span class="keyword">between</span> sg.losal <span class="keyword">and</span> sg.hisal;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6. 查询研发部所有员工的信息及工资等级 </span></span><br><span class="line"><span class="keyword">select</span> d.name, e.<span class="operator">*</span>, sg.grade <span class="keyword">from</span></span><br><span class="line">emp e <span class="keyword">join</span> salgrade sg <span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.salary <span class="keyword">between</span> sg.losal <span class="keyword">and</span> sg.hisal</span><br><span class="line"><span class="keyword">and</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">where</span> d.name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    d.name, e.<span class="operator">*</span>, sg.grade</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    emp e,</span><br><span class="line">    dept d,</span><br><span class="line">    salgrade sg</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    e.salary <span class="keyword">BETWEEN</span> sg.losal <span class="keyword">AND</span> sg.hisal</span><br><span class="line">        <span class="keyword">AND</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line">        <span class="keyword">AND</span> d.name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>;</span><br><span class="line"><span class="comment">-- ctrl + B </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7. 查询研发部的员工的平均工资 </span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(e.salary) <span class="string">&#x27;研发部平均工资&#x27;</span> <span class="keyword">from</span> emp e, dept d</span><br><span class="line"><span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">and</span> d.name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8. 查询工资比灭绝高的员工信息 </span></span><br><span class="line"><span class="comment">-- 自连接 </span></span><br><span class="line"><span class="keyword">select</span> e2.<span class="operator">*</span> <span class="keyword">from</span> emp e1, emp e2</span><br><span class="line"><span class="keyword">where</span> e1.name <span class="operator">=</span> <span class="string">&#x27;灭绝&#x27;</span></span><br><span class="line"><span class="keyword">and</span> e2.salary <span class="operator">&gt;</span> e1.salary;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;灭绝&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 9. 查询比平均薪资高的员工信息 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> emp</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 10. 查询低于本部门平均薪资的员工 </span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, avgsal.sal <span class="keyword">from</span> emp e <span class="keyword">join</span> (</span><br><span class="line"><span class="keyword">select</span> dept_id, <span class="built_in">avg</span>(salary) sal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> dept_id) avgsal</span><br><span class="line"><span class="keyword">on</span> e.dept_id <span class="operator">=</span> avgsal.dept_id</span><br><span class="line"><span class="keyword">where</span> e.salary <span class="operator">&lt;</span> avgsal.sal;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以用子查询，目测效率更低因为对于每一行子查询都需要重新计算一下本部门平均薪资 </span></span><br><span class="line"><span class="comment">-- 第一步：计算本部门平均薪资：select avg(salary) from emp where dept_id = 1;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e2 <span class="keyword">where</span> e2.salary <span class="operator">&lt;</span></span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">avg</span>(e1.salary) <span class="keyword">from</span> emp e1 <span class="keyword">where</span> e1.dept_id <span class="operator">=</span> e2.dept_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 11. 查询所有部门信息并统计部门的员工人数 </span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(e.dept_id), d.name <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d</span><br><span class="line"><span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> d.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="comment">-- 第一步，计算每个部门的人数 </span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp e <span class="keyword">where</span> e.dept_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第二步，得出结果 </span></span><br><span class="line"><span class="keyword">select</span> d.id, d.name, (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp e</span><br><span class="line"><span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id) <span class="string">&#x27;人数&#x27;</span> <span class="keyword">from</span> dept d;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 12. 查询所有学生的选课情况，展示出学生名称，学号，课程名称 </span></span><br><span class="line"><span class="keyword">select</span> s.name <span class="string">&#x27;姓名&#x27;</span>, s.no <span class="string">&#x27;学号&#x27;</span>, c.name <span class="string">&#x27;课程名称&#x27;</span> <span class="keyword">from</span></span><br><span class="line">student s, course c , student_course sc</span><br><span class="line"><span class="keyword">where</span> s.id <span class="operator">=</span> sc.studentid</span><br><span class="line"><span class="keyword">and</span> sc. courseid <span class="operator">=</span> c.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student_course;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course;</span><br></pre></td></tr></table></figure><p>多表查询-总结1. 多表关系多表之间的关系分为三类：    一对多：在多的一方设置外键，关联一的一方的主键    多对多：建立中间表，中间表包含两个外键，关联两张表的主键    一对一：用于表结构拆分，在其中任何一方设置外键（UNIQUE)，关联另一方的主键</p><blockquote><p>（一对一注：xx_order与xx_order_det就是这样的关系）</p></blockquote><p>2. 多表查询内连接    隐式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表A, 表B <span class="keyword">where</span> 条件....;</span><br></pre></td></tr></table></figure><p>    显式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表A <span class="keyword">inner</span> <span class="keyword">join</span> 表B <span class="keyword">on</span> 条件.....;</span><br></pre></td></tr></table></figure><p>外连接    左外：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> 表A <span class="keyword">left</span> <span class="keyword">join</span> 表B <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure><p>    右外：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">from</span> 表A <span class="keyword">right</span> <span class="keyword">join</span> 表B <span class="keyword">on</span> 条件...;</span><br></pre></td></tr></table></figure><p>自连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表A 别名<span class="number">1</span>, 表B 别名<span class="number">2</span> <span class="keyword">where</span> 条件...;</span><br></pre></td></tr></table></figure><p>子查询：标量子查询，列子查询，行子查询，表子查询。<br>事务事务简介事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。注意：默认MySQL的事务是自动提交的，即当执行一条DML语句，MySQL会隐式的提交事务。<br>事务操作案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 事务操作 </span></span><br><span class="line"><span class="comment">-- 数据准备 </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> account (</span><br><span class="line">  id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    money <span class="type">int</span> comment <span class="string">&#x27;余额&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;账户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account</span><br><span class="line"><span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="number">2000</span>), (<span class="keyword">null</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 恢复数据 </span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账操作 </span></span><br><span class="line"><span class="comment">-- 1. 查询张三的余额 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 将张三的账户余额减去1000 </span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 将李四账户余额+1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure><p>事务操作方式一：查看&#x2F;设置事务的提交方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">-- 将提交方式改为手动</span></span><br></pre></td></tr></table></figure><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 恢复数据 </span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转账操作 </span></span><br><span class="line"><span class="comment">-- 1. 查询张三的余额 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 将张三的账户余额减去1000 </span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 将李四账户余额+1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">rollback</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure><p>事务操作方式二：开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction 或者 <span class="keyword">begin</span></span><br></pre></td></tr></table></figure><p>提交事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span></span><br></pre></td></tr></table></figure><p>回滚事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">rollback</span></span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式2</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@autocommit</span>;</span><br><span class="line"><span class="keyword">set</span> @<span class="variable">@autocommit</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>;  <span class="comment">-- 事务开始 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1. 查询张三的余额 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 将张三的账户余额减去1000 </span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">-</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 将李四账户余额+1000</span></span><br><span class="line"><span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> money <span class="operator">+</span> <span class="number">1000</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>; <span class="comment">-- 提交事务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rollback</span>; <span class="comment">-- 回滚事务</span></span><br></pre></td></tr></table></figure><p>commit 之前：<br><img src="/images/MySQL_DB_basic/26.png"> </p><p>commit 之后：<br><img src="/images/MySQL_DB_basic/27.png">  </p><p>出错了就rollback<br>事务四大特性（ACID）原子性 A - atomicity 事务是不可分割的最小操作单元，要么全部成功，要么全部失败。一致性 C - consistency 事务完成时，必须使所有数据都保持一致隔离性 I - isolation 数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境运行持久性 D - durability 事务一旦提交或回滚，它对数据库中数据的修改就是永久的<br>并发事务问题</p><table width="0"><colgroup><col style="width: 310px;"><col style="width: 310px;"></colgroup><tbody><tr style="height: 42px;"><td data-cell-id="9076-1646771121440-cell-0-0" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;background-color: rgb(223, 64, 42);text-align: center;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(255, 255, 255);background-color: transparent;font-weight: bold;font-style: normal;text-decoration: none;">问题</span></p></td><td data-cell-id="9076-1646771121440-cell-0-1" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;background-color: rgb(223, 64, 42);text-align: center;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(255, 255, 255);background-color: transparent;font-weight: bold;font-style: normal;text-decoration: none;">描述</span></p></td></tr><tr style="height: 40px;"><td data-cell-id="9076-1646771121440-cell-1-0" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;text-align: center;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(194, 79, 74);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">脏读</span></p></td><td data-cell-id="9076-1646771121440-cell-1-1" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">一个事务读取到另一个事务未提交的数据</span></p></td></tr><tr style="height: 40px;"><td data-cell-id="9076-1646771121440-cell-2-0" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;text-align: center;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(194, 79, 74);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">不可重复读</span></p></td><td data-cell-id="9076-1646771121440-cell-2-1" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读</span></p></td></tr><tr style="height: 40px;"><td data-cell-id="9076-1646771121440-cell-3-0" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;text-align: center;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(194, 79, 74);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">幻读</span></p></td><td data-cell-id="9076-1646771121440-cell-3-1" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">一个事务按照条件查询数据时，没有对应的数据行，但在插入数据时，发现这行数据已经存在了，好像出现了”幻影“。</span></p></td></tr></tbody></table>事务隔离级别<table width="0"><colgroup><col style="width: 155px;"><col style="width: 155px;"><col style="width: 155px;"><col style="width: 155px;"></colgroup><tbody><tr style="height: 40px;"><td data-cell-id="7274-1646771576710-cell-0-0" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">隔离级别</span></p></td><td data-cell-id="7274-1646771576710-cell-0-1" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">脏读</span></p></td><td data-cell-id="7274-1646771576710-cell-0-2" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">不可重复读</span></p></td><td data-cell-id="7274-1646771576710-cell-0-3" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">幻读</span></p></td></tr><tr style="height: 40px;"><td data-cell-id="7274-1646771576710-cell-1-0" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">Read uncommitted</span></p></td><td data-cell-id="7274-1646771576710-cell-1-1" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">allow</span></p></td><td data-cell-id="7274-1646771576710-cell-1-2" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">allow</span></p></td><td data-cell-id="7274-1646771576710-cell-1-3" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">allow</span></p></td></tr><tr style="height: 40px;"><td data-cell-id="7274-1646771576710-cell-2-0" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">Read commiited (Oracle 默认）</span></p></td><td data-cell-id="7274-1646771576710-cell-2-1" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">no</span></p></td><td data-cell-id="7274-1646771576710-cell-2-2" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">allow</span></p></td><td data-cell-id="7274-1646771576710-cell-2-3" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">allow</span></p></td></tr><tr style="height: 40px;"><td data-cell-id="7274-1646771576710-cell-3-0" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">Repeatable Read (MySQL 默认）</span></p></td><td data-cell-id="7274-1646771576710-cell-3-1" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">no</span></p></td><td data-cell-id="7274-1646771576710-cell-3-2" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">no</span></p></td><td data-cell-id="7274-1646771576710-cell-3-3" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">allow</span></p></td></tr><tr style="height: 40px;"><td data-cell-id="7274-1646771576710-cell-4-0" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">Serializable</span></p></td><td data-cell-id="7274-1646771576710-cell-4-1" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">no</span></p></td><td data-cell-id="7274-1646771576710-cell-4-2" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">no</span></p></td><td data-cell-id="7274-1646771576710-cell-4-3" style="font-size: 14px;color: rgb(57, 57, 57);border-width: 1px;border-style: solid;border-color: rgb(167, 167, 167);overflow: hidden;overflow-wrap: break-word;white-space: pre-wrap;"><p><span style="font-size: 14px;font-family: Microsoft YaHei, STXihei;color: rgb(0, 0, 0);background-color: transparent;font-weight: normal;font-style: normal;text-decoration: none;">no</span></p></td></tr></tbody></table>查看事务隔离级别：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @<span class="keyword">@transaction_isolation</span>;</span><br></pre></td></tr></table></figure><p>设置事务隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> [session<span class="operator">|</span><span class="keyword">global</span>] transaction isolation level</span><br><span class="line">&#123;read uncommitted <span class="operator">|</span> read committed <span class="operator">|</span> repeatable read <span class="operator">|</span> serializable&#125;</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置事务隔离级别案例 </span></span><br><span class="line"><span class="comment">-- 演示脏读 </span></span><br><span class="line"><span class="keyword">set</span> session transaction isolation level read uncommitted;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;  <span class="comment">-- id = 1, money = 2000;</span></span><br><span class="line"><span class="comment">-- 新开个session，执行</span></span><br><span class="line"># <span class="keyword">start</span> transaction</span><br><span class="line"># <span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> <span class="number">2001</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;  <span class="comment">-- 发现数据更新了 money = 2001</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 演示不可重复读 </span></span><br><span class="line"><span class="comment">-- 在一个事务里修改隔离级别是不会起作用的 </span></span><br><span class="line"><span class="keyword">set</span> session transaction isolation level read committed;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;  <span class="comment">-- 发现数据是没有更新的 money = 2000;</span></span><br><span class="line"><span class="comment">-- 新开的session里执行</span></span><br><span class="line"># <span class="keyword">commit</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;  <span class="comment">-- 发现数据更新了 money = 2001;</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 演示可重复读 </span></span><br><span class="line"><span class="keyword">set</span> session transaction isolation level repeatable read;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;  <span class="comment">-- id = 1, money = 2001</span></span><br><span class="line"><span class="comment">-- 新开的session里执行 </span></span><br><span class="line"># being</span><br><span class="line"># <span class="keyword">update</span> account <span class="keyword">set</span> money <span class="operator">=</span> <span class="number">2005</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"># <span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;  <span class="comment">-- 发现数据没有更新 money = 2001</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account; <span class="comment">-- 这时候在上一个事务之外，读到了 money = 2005</span></span><br><span class="line"><span class="comment">-- 演示幻读 </span></span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;  <span class="comment">-- 这时候只读到两条数据 </span></span><br><span class="line"><span class="comment">-- 在新session里执行 </span></span><br><span class="line"># <span class="keyword">begin</span>;</span><br><span class="line"># <span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line"># <span class="keyword">commit</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="number">2000</span>);  </span><br><span class="line"><span class="comment">-- 执行失败，原因是新session读已提交 </span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;  <span class="comment">-- 依然读不到 id为3的数据，称之为幻读 </span></span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"><span class="comment">-- 演示串行化 </span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> account <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">set</span> session transaction isolation level serializable;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> account;  <span class="comment">-- 这时候只读到两条数据 </span></span><br><span class="line"><span class="comment">-- 在新开session里执行 </span></span><br><span class="line"># <span class="keyword">begin</span>;</span><br><span class="line"># <span class="keyword">insert</span> <span class="keyword">into</span> account <span class="keyword">values</span> (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line"># 发现新session卡住了，不能动弹 </span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"># 发现新session里的<span class="keyword">insert</span>执行完成了。</span><br></pre></td></tr></table></figure><p>注意：事务隔离级别越高，数据越安全，但是效率也越低。<br>总结：1. 事务简介事务是一组操作的集合，一荣俱荣，一损俱损2. 事务操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> transaction; 或者 <span class="keyword">begin</span>; <span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">commit</span><span class="operator">/</span><span class="keyword">rollback</span>; <span class="comment">-- 提交/回滚</span></span><br></pre></td></tr></table></figure><p>事务3. 事务四大特性原子性A、一致性C、隔离性I、持久性D4. 并发事务问题脏读、不可重复读、幻读5. 事务隔离级别read uncommitted, read committed, repeatable read, serializable<br>基础篇总结MySQL概述 - SQL -函数 - 约束 - 多表查询 - 事务</p><p>转载自本人公众号<a href="https://mp.weixin.qq.com/s/TSVTzhUvrfqaWGSNDH2nmw">笔记：MySQL数据库 - 基础篇</a>，归类为原创。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;是一种 关系型数据库：建立在关系模型上，由多张互相连接的二维表组成的数据库。关系数据库 特点：1. 使用表存储数据，格式统一，便于维护2. 使用SQL语言操作，标准统一，使用方便&lt;br&gt;MySQL的数据模型从客户端到DBMS，再到数据库，最后到达数据库中的表  &lt;/p&gt;</summary>
    
    
    
    <category term="中间件" scheme="https://xqtony.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="MySQL" scheme="https://xqtony.github.io/tags/MySQL/"/>
    
    <category term="原创" scheme="https://xqtony.github.io/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
</feed>
